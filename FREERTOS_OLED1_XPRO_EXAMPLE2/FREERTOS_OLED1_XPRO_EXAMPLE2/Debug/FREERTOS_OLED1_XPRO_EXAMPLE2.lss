
FREERTOS_OLED1_XPRO_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000457c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  0000457c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004138  2000001c  00004598  0002001c  2**2
                  ALLOC
  3 .stack        00002004  20004154  000086d0  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   00048d77  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f82  00000000  00000000  00068e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d51b  00000000  00000000  0006ed96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a38  00000000  00000000  0007c2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ef8  00000000  00000000  0007cce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001eb8a  00000000  00000000  0007dbe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016b20  00000000  00000000  0009c76b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008f70f  00000000  00000000  000b328b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b70  00000000  00000000  0014299c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 61 00 20 89 1d 00 00 85 1d 00 00 85 1d 00 00     Xa. ............
	...
      2c:	75 1f 00 00 00 00 00 00 00 00 00 00 51 20 00 00     u...........Q ..
      3c:	95 20 00 00 85 1d 00 00 85 1d 00 00 85 1d 00 00     . ..............
      4c:	85 1d 00 00 85 1d 00 00 85 1d 00 00 85 1d 00 00     ................
      5c:	85 1d 00 00 85 1d 00 00 25 0d 00 00 35 0d 00 00     ........%...5...
      6c:	45 0d 00 00 55 0d 00 00 65 0d 00 00 75 0d 00 00     E...U...e...u...
      7c:	85 1d 00 00 85 1d 00 00 85 1d 00 00 85 1d 00 00     ................
      8c:	85 1d 00 00 85 1d 00 00 00 00 00 00 00 00 00 00     ................
      9c:	85 1d 00 00 85 1d 00 00 00 00 00 00 85 1d 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	0000457c 	.word	0x0000457c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	0000457c 	.word	0x0000457c
     10c:	0000457c 	.word	0x0000457c
     110:	00000000 	.word	0x00000000

00000114 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b083      	sub	sp, #12
     118:	466b      	mov	r3, sp
     11a:	1ddf      	adds	r7, r3, #7
     11c:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     11e:	4e0b      	ldr	r6, [pc, #44]	; (14c <ssd1306_write_command+0x38>)
     120:	4c0b      	ldr	r4, [pc, #44]	; (150 <ssd1306_write_command+0x3c>)
     122:	2201      	movs	r2, #1
     124:	0031      	movs	r1, r6
     126:	0020      	movs	r0, r4
     128:	4d0a      	ldr	r5, [pc, #40]	; (154 <ssd1306_write_command+0x40>)
     12a:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     12c:	2280      	movs	r2, #128	; 0x80
     12e:	0192      	lsls	r2, r2, #6
     130:	4b09      	ldr	r3, [pc, #36]	; (158 <ssd1306_write_command+0x44>)
     132:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
     134:	2201      	movs	r2, #1
     136:	0039      	movs	r1, r7
     138:	0020      	movs	r0, r4
     13a:	4b08      	ldr	r3, [pc, #32]	; (15c <ssd1306_write_command+0x48>)
     13c:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     13e:	2200      	movs	r2, #0
     140:	0031      	movs	r1, r6
     142:	0020      	movs	r0, r4
     144:	47a8      	blx	r5
}
     146:	b003      	add	sp, #12
     148:	bdf0      	pop	{r4, r5, r6, r7, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	20004134 	.word	0x20004134
     150:	200040f8 	.word	0x200040f8
     154:	00000f5d 	.word	0x00000f5d
     158:	41004400 	.word	0x41004400
     15c:	00001051 	.word	0x00001051

00000160 <ssd1306_init>:
{
     160:	b5f0      	push	{r4, r5, r6, r7, lr}
     162:	b091      	sub	sp, #68	; 0x44
	delay_init();
     164:	4b60      	ldr	r3, [pc, #384]	; (2e8 <ssd1306_init+0x188>)
     166:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     168:	4c60      	ldr	r4, [pc, #384]	; (2ec <ssd1306_init+0x18c>)
     16a:	2323      	movs	r3, #35	; 0x23
     16c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     16e:	2300      	movs	r3, #0
     170:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     172:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     174:	a902      	add	r1, sp, #8
     176:	2201      	movs	r2, #1
     178:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     17a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     17c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     17e:	2023      	movs	r0, #35	; 0x23
     180:	4b5b      	ldr	r3, [pc, #364]	; (2f0 <ssd1306_init+0x190>)
     182:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     184:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     186:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     188:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     18a:	2900      	cmp	r1, #0
     18c:	d104      	bne.n	198 <ssd1306_init+0x38>
		return &(ports[port_index]->Group[group_index]);
     18e:	095a      	lsrs	r2, r3, #5
     190:	01d2      	lsls	r2, r2, #7
     192:	4958      	ldr	r1, [pc, #352]	; (2f4 <ssd1306_init+0x194>)
     194:	468c      	mov	ip, r1
     196:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     198:	261f      	movs	r6, #31
     19a:	4033      	ands	r3, r6
     19c:	2501      	movs	r5, #1
     19e:	0029      	movs	r1, r5
     1a0:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     1a2:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
     1a4:	ac02      	add	r4, sp, #8
     1a6:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     1a8:	2300      	movs	r3, #0
     1aa:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     1ac:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     1ae:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     1b0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     1b2:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
     1b4:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
     1b6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     1b8:	2224      	movs	r2, #36	; 0x24
     1ba:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     1bc:	3a18      	subs	r2, #24
     1be:	2100      	movs	r1, #0
     1c0:	a808      	add	r0, sp, #32
     1c2:	4b4d      	ldr	r3, [pc, #308]	; (2f8 <ssd1306_init+0x198>)
     1c4:	4798      	blx	r3
	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
     1c6:	2380      	movs	r3, #128	; 0x80
     1c8:	025b      	lsls	r3, r3, #9
     1ca:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
     1cc:	4b4b      	ldr	r3, [pc, #300]	; (2fc <ssd1306_init+0x19c>)
     1ce:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
     1d0:	2301      	movs	r3, #1
     1d2:	425b      	negs	r3, r3
     1d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
     1d6:	4b4a      	ldr	r3, [pc, #296]	; (300 <ssd1306_init+0x1a0>)
     1d8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
     1da:	4b4a      	ldr	r3, [pc, #296]	; (304 <ssd1306_init+0x1a4>)
     1dc:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
     1de:	4b4a      	ldr	r3, [pc, #296]	; (308 <ssd1306_init+0x1a8>)
     1e0:	61a3      	str	r3, [r4, #24]
	spi_init(&ssd1306_master, SSD1306_SPI, &config);
     1e2:	4f4a      	ldr	r7, [pc, #296]	; (30c <ssd1306_init+0x1ac>)
     1e4:	0022      	movs	r2, r4
     1e6:	494a      	ldr	r1, [pc, #296]	; (310 <ssd1306_init+0x1b0>)
     1e8:	0038      	movs	r0, r7
     1ea:	4b4a      	ldr	r3, [pc, #296]	; (314 <ssd1306_init+0x1b4>)
     1ec:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1ee:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1f0:	0020      	movs	r0, r4
     1f2:	4b49      	ldr	r3, [pc, #292]	; (318 <ssd1306_init+0x1b8>)
     1f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f6:	4006      	ands	r6, r0
     1f8:	40b5      	lsls	r5, r6
     1fa:	4b48      	ldr	r3, [pc, #288]	; (31c <ssd1306_init+0x1bc>)
     1fc:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     1fe:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
     200:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     202:	2b00      	cmp	r3, #0
     204:	d1fc      	bne.n	200 <ssd1306_init+0xa0>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     206:	6823      	ldr	r3, [r4, #0]
     208:	2202      	movs	r2, #2
     20a:	4313      	orrs	r3, r2
     20c:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     20e:	ac01      	add	r4, sp, #4
     210:	2301      	movs	r3, #1
     212:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     214:	2200      	movs	r2, #0
     216:	70a2      	strb	r2, [r4, #2]
	pin.direction = PORT_PIN_DIR_OUTPUT;
     218:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(SSD1306_DC_PIN, &pin);
     21a:	0021      	movs	r1, r4
     21c:	200d      	movs	r0, #13
     21e:	4d34      	ldr	r5, [pc, #208]	; (2f0 <ssd1306_init+0x190>)
     220:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
     222:	0021      	movs	r1, r4
     224:	2017      	movs	r0, #23
     226:	47a8      	blx	r5
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
     228:	2000      	movs	r0, #0
     22a:	4b3d      	ldr	r3, [pc, #244]	; (320 <ssd1306_init+0x1c0>)
     22c:	4798      	blx	r3
     22e:	4936      	ldr	r1, [pc, #216]	; (308 <ssd1306_init+0x1a8>)
     230:	4b3c      	ldr	r3, [pc, #240]	; (324 <ssd1306_init+0x1c4>)
     232:	4798      	blx	r3
     234:	0083      	lsls	r3, r0, #2
     236:	1818      	adds	r0, r3, r0
     238:	0040      	lsls	r0, r0, #1
		port_base->OUTCLR.reg = pin_mask;
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0412      	lsls	r2, r2, #16
     23e:	4b2d      	ldr	r3, [pc, #180]	; (2f4 <ssd1306_init+0x194>)
     240:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     242:	2800      	cmp	r0, #0
     244:	d04a      	beq.n	2dc <ssd1306_init+0x17c>
		SysTick->LOAD = n;
     246:	4b38      	ldr	r3, [pc, #224]	; (328 <ssd1306_init+0x1c8>)
     248:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     24a:	2200      	movs	r2, #0
     24c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     24e:	0019      	movs	r1, r3
     250:	2280      	movs	r2, #128	; 0x80
     252:	0252      	lsls	r2, r2, #9
     254:	680b      	ldr	r3, [r1, #0]
     256:	4213      	tst	r3, r2
     258:	d0fc      	beq.n	254 <ssd1306_init+0xf4>
		port_base->OUTSET.reg = pin_mask;
     25a:	2280      	movs	r2, #128	; 0x80
     25c:	0412      	lsls	r2, r2, #16
     25e:	4b25      	ldr	r3, [pc, #148]	; (2f4 <ssd1306_init+0x194>)
     260:	619a      	str	r2, [r3, #24]
		SysTick->LOAD = n;
     262:	4b31      	ldr	r3, [pc, #196]	; (328 <ssd1306_init+0x1c8>)
     264:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     266:	2200      	movs	r2, #0
     268:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     26a:	0019      	movs	r1, r3
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	0252      	lsls	r2, r2, #9
     270:	680b      	ldr	r3, [r1, #0]
     272:	4213      	tst	r3, r2
     274:	d0fc      	beq.n	270 <ssd1306_init+0x110>
     276:	2280      	movs	r2, #128	; 0x80
     278:	0412      	lsls	r2, r2, #16
     27a:	4b1e      	ldr	r3, [pc, #120]	; (2f4 <ssd1306_init+0x194>)
     27c:	619a      	str	r2, [r3, #24]
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     27e:	20a8      	movs	r0, #168	; 0xa8
     280:	4c2a      	ldr	r4, [pc, #168]	; (32c <ssd1306_init+0x1cc>)
     282:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
     284:	201f      	movs	r0, #31
     286:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     288:	20d3      	movs	r0, #211	; 0xd3
     28a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
     28c:	2000      	movs	r0, #0
     28e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
     290:	2040      	movs	r0, #64	; 0x40
     292:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     294:	20a1      	movs	r0, #161	; 0xa1
     296:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     298:	20c8      	movs	r0, #200	; 0xc8
     29a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     29c:	20da      	movs	r0, #218	; 0xda
     29e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
     2a0:	2002      	movs	r0, #2
     2a2:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     2a4:	2081      	movs	r0, #129	; 0x81
     2a6:	47a0      	blx	r4
	ssd1306_write_command(contrast);
     2a8:	208f      	movs	r0, #143	; 0x8f
     2aa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     2ac:	20a4      	movs	r0, #164	; 0xa4
     2ae:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     2b0:	20a6      	movs	r0, #166	; 0xa6
     2b2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     2b4:	20d5      	movs	r0, #213	; 0xd5
     2b6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
     2b8:	2080      	movs	r0, #128	; 0x80
     2ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     2bc:	208d      	movs	r0, #141	; 0x8d
     2be:	47a0      	blx	r4
	ssd1306_write_command(0x14);
     2c0:	2014      	movs	r0, #20
     2c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     2c4:	20db      	movs	r0, #219	; 0xdb
     2c6:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     2c8:	2040      	movs	r0, #64	; 0x40
     2ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     2cc:	20d9      	movs	r0, #217	; 0xd9
     2ce:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
     2d0:	20f1      	movs	r0, #241	; 0xf1
     2d2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     2d4:	20af      	movs	r0, #175	; 0xaf
     2d6:	47a0      	blx	r4
}
     2d8:	b011      	add	sp, #68	; 0x44
     2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2dc:	2280      	movs	r2, #128	; 0x80
     2de:	0412      	lsls	r2, r2, #16
     2e0:	4b04      	ldr	r3, [pc, #16]	; (2f4 <ssd1306_init+0x194>)
     2e2:	619a      	str	r2, [r3, #24]
     2e4:	e7c7      	b.n	276 <ssd1306_init+0x116>
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	0000037d 	.word	0x0000037d
     2ec:	20004134 	.word	0x20004134
     2f0:	0000091d 	.word	0x0000091d
     2f4:	41004400 	.word	0x41004400
     2f8:	0000414b 	.word	0x0000414b
     2fc:	00220003 	.word	0x00220003
     300:	00360003 	.word	0x00360003
     304:	00370003 	.word	0x00370003
     308:	000f4240 	.word	0x000f4240
     30c:	200040f8 	.word	0x200040f8
     310:	42001c00 	.word	0x42001c00
     314:	00000d85 	.word	0x00000d85
     318:	00000cf5 	.word	0x00000cf5
     31c:	e000e100 	.word	0xe000e100
     320:	00001b15 	.word	0x00001b15
     324:	00003f85 	.word	0x00003f85
     328:	e000e010 	.word	0xe000e010
     32c:	00000115 	.word	0x00000115

00000330 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	b083      	sub	sp, #12
     334:	466b      	mov	r3, sp
     336:	1ddf      	adds	r7, r3, #7
     338:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     33a:	4e0b      	ldr	r6, [pc, #44]	; (368 <ssd1306_write_data+0x38>)
     33c:	4c0b      	ldr	r4, [pc, #44]	; (36c <ssd1306_write_data+0x3c>)
     33e:	2201      	movs	r2, #1
     340:	0031      	movs	r1, r6
     342:	0020      	movs	r0, r4
     344:	4d0a      	ldr	r5, [pc, #40]	; (370 <ssd1306_write_data+0x40>)
     346:	47a8      	blx	r5
     348:	2280      	movs	r2, #128	; 0x80
     34a:	0192      	lsls	r2, r2, #6
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <ssd1306_write_data+0x44>)
     34e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
     350:	2201      	movs	r2, #1
     352:	0039      	movs	r1, r7
     354:	0020      	movs	r0, r4
     356:	4b08      	ldr	r3, [pc, #32]	; (378 <ssd1306_write_data+0x48>)
     358:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     35a:	2200      	movs	r2, #0
     35c:	0031      	movs	r1, r6
     35e:	0020      	movs	r0, r4
     360:	47a8      	blx	r5
}
     362:	b003      	add	sp, #12
     364:	bdf0      	pop	{r4, r5, r6, r7, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	20004134 	.word	0x20004134
     36c:	200040f8 	.word	0x200040f8
     370:	00000f5d 	.word	0x00000f5d
     374:	41004400 	.word	0x41004400
     378:	00001051 	.word	0x00001051

0000037c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     37c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     37e:	2000      	movs	r0, #0
     380:	4b08      	ldr	r3, [pc, #32]	; (3a4 <delay_init+0x28>)
     382:	4798      	blx	r3
     384:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     386:	4c08      	ldr	r4, [pc, #32]	; (3a8 <delay_init+0x2c>)
     388:	21fa      	movs	r1, #250	; 0xfa
     38a:	0089      	lsls	r1, r1, #2
     38c:	47a0      	blx	r4
     38e:	4b07      	ldr	r3, [pc, #28]	; (3ac <delay_init+0x30>)
     390:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     392:	4907      	ldr	r1, [pc, #28]	; (3b0 <delay_init+0x34>)
     394:	0028      	movs	r0, r5
     396:	47a0      	blx	r4
     398:	4b06      	ldr	r3, [pc, #24]	; (3b4 <delay_init+0x38>)
     39a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     39c:	2205      	movs	r2, #5
     39e:	4b06      	ldr	r3, [pc, #24]	; (3b8 <delay_init+0x3c>)
     3a0:	601a      	str	r2, [r3, #0]
}
     3a2:	bd70      	pop	{r4, r5, r6, pc}
     3a4:	00001b15 	.word	0x00001b15
     3a8:	00003f85 	.word	0x00003f85
     3ac:	20000000 	.word	0x20000000
     3b0:	000f4240 	.word	0x000f4240
     3b4:	20000004 	.word	0x20000004
     3b8:	e000e010 	.word	0xe000e010

000003bc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     3bc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     3be:	4b08      	ldr	r3, [pc, #32]	; (3e0 <delay_cycles_ms+0x24>)
     3c0:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     3c2:	4a08      	ldr	r2, [pc, #32]	; (3e4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     3c4:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     3c6:	2180      	movs	r1, #128	; 0x80
     3c8:	0249      	lsls	r1, r1, #9
	while (n--) {
     3ca:	3801      	subs	r0, #1
     3cc:	d307      	bcc.n	3de <delay_cycles_ms+0x22>
	if (n > 0) {
     3ce:	2c00      	cmp	r4, #0
     3d0:	d0fb      	beq.n	3ca <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     3d2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     3d4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     3d6:	6813      	ldr	r3, [r2, #0]
     3d8:	420b      	tst	r3, r1
     3da:	d0fc      	beq.n	3d6 <delay_cycles_ms+0x1a>
     3dc:	e7f5      	b.n	3ca <delay_cycles_ms+0xe>
	}
}
     3de:	bd30      	pop	{r4, r5, pc}
     3e0:	20000000 	.word	0x20000000
     3e4:	e000e010 	.word	0xe000e010

000003e8 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
     3e8:	4b01      	ldr	r3, [pc, #4]	; (3f0 <gfx_mono_set_framebuffer+0x8>)
     3ea:	6018      	str	r0, [r3, #0]
}
     3ec:	4770      	bx	lr
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	20000038 	.word	0x20000038

000003f4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     3f4:	4b02      	ldr	r3, [pc, #8]	; (400 <gfx_mono_framebuffer_put_byte+0xc>)
     3f6:	681b      	ldr	r3, [r3, #0]
     3f8:	01c0      	lsls	r0, r0, #7
     3fa:	1818      	adds	r0, r3, r0
     3fc:	5442      	strb	r2, [r0, r1]
}
     3fe:	4770      	bx	lr
     400:	20000038 	.word	0x20000038

00000404 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     404:	4b02      	ldr	r3, [pc, #8]	; (410 <gfx_mono_framebuffer_get_byte+0xc>)
     406:	681b      	ldr	r3, [r3, #0]
     408:	01c0      	lsls	r0, r0, #7
     40a:	1818      	adds	r0, r3, r0
     40c:	5c40      	ldrb	r0, [r0, r1]
}
     40e:	4770      	bx	lr
     410:	20000038 	.word	0x20000038

00000414 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     416:	46ce      	mov	lr, r9
     418:	4647      	mov	r7, r8
     41a:	b580      	push	{r7, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     41c:	1884      	adds	r4, r0, r2
     41e:	2c80      	cmp	r4, #128	; 0x80
     420:	dd03      	ble.n	42a <gfx_mono_generic_draw_horizontal_line+0x16>
		length = GFX_MONO_LCD_WIDTH - x;
     422:	2280      	movs	r2, #128	; 0x80
     424:	4252      	negs	r2, r2
     426:	1a12      	subs	r2, r2, r0
     428:	b2d2      	uxtb	r2, r2
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     42a:	2a00      	cmp	r2, #0
     42c:	d037      	beq.n	49e <gfx_mono_generic_draw_horizontal_line+0x8a>
	page = y / 8;
     42e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
     430:	00ec      	lsls	r4, r5, #3
     432:	1b09      	subs	r1, r1, r4
     434:	2701      	movs	r7, #1
     436:	408f      	lsls	r7, r1
     438:	0039      	movs	r1, r7
     43a:	b2ff      	uxtb	r7, r7
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     43c:	2b01      	cmp	r3, #1
     43e:	d019      	beq.n	474 <gfx_mono_generic_draw_horizontal_line+0x60>
     440:	2b00      	cmp	r3, #0
     442:	d030      	beq.n	4a6 <gfx_mono_generic_draw_horizontal_line+0x92>
     444:	2b02      	cmp	r3, #2
     446:	d12a      	bne.n	49e <gfx_mono_generic_draw_horizontal_line+0x8a>
     448:	3801      	subs	r0, #1
     44a:	b2c6      	uxtb	r6, r0
     44c:	1992      	adds	r2, r2, r6
     44e:	b2d4      	uxtb	r4, r2
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     450:	4b20      	ldr	r3, [pc, #128]	; (4d4 <gfx_mono_generic_draw_horizontal_line+0xc0>)
     452:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     454:	4b20      	ldr	r3, [pc, #128]	; (4d8 <gfx_mono_generic_draw_horizontal_line+0xc4>)
     456:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
     458:	0021      	movs	r1, r4
     45a:	0028      	movs	r0, r5
     45c:	47c8      	blx	r9
			temp ^= pixelmask;
     45e:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
     460:	b2c2      	uxtb	r2, r0
     462:	2300      	movs	r3, #0
     464:	0021      	movs	r1, r4
     466:	0028      	movs	r0, r5
     468:	47c0      	blx	r8
     46a:	3c01      	subs	r4, #1
     46c:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
     46e:	42b4      	cmp	r4, r6
     470:	d1f2      	bne.n	458 <gfx_mono_generic_draw_horizontal_line+0x44>
     472:	e014      	b.n	49e <gfx_mono_generic_draw_horizontal_line+0x8a>
     474:	3801      	subs	r0, #1
     476:	b2c6      	uxtb	r6, r0
     478:	1992      	adds	r2, r2, r6
     47a:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
     47c:	4b15      	ldr	r3, [pc, #84]	; (4d4 <gfx_mono_generic_draw_horizontal_line+0xc0>)
     47e:	4699      	mov	r9, r3
			gfx_mono_put_byte(page, x + length, temp);
     480:	4b15      	ldr	r3, [pc, #84]	; (4d8 <gfx_mono_generic_draw_horizontal_line+0xc4>)
     482:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
     484:	0021      	movs	r1, r4
     486:	0028      	movs	r0, r5
     488:	47c8      	blx	r9
			temp |= pixelmask;
     48a:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
     48c:	b2c2      	uxtb	r2, r0
     48e:	2300      	movs	r3, #0
     490:	0021      	movs	r1, r4
     492:	0028      	movs	r0, r5
     494:	47c0      	blx	r8
     496:	3c01      	subs	r4, #1
     498:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
     49a:	42b4      	cmp	r4, r6
     49c:	d1f2      	bne.n	484 <gfx_mono_generic_draw_horizontal_line+0x70>
		break;

	default:
		break;
	}
}
     49e:	bc0c      	pop	{r2, r3}
     4a0:	4690      	mov	r8, r2
     4a2:	4699      	mov	r9, r3
     4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4a6:	3801      	subs	r0, #1
     4a8:	b2c6      	uxtb	r6, r0
     4aa:	1992      	adds	r2, r2, r6
     4ac:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
     4ae:	4b09      	ldr	r3, [pc, #36]	; (4d4 <gfx_mono_generic_draw_horizontal_line+0xc0>)
     4b0:	4699      	mov	r9, r3
			temp &= ~pixelmask;
     4b2:	43cf      	mvns	r7, r1
			gfx_mono_put_byte(page, x + length, temp);
     4b4:	4b08      	ldr	r3, [pc, #32]	; (4d8 <gfx_mono_generic_draw_horizontal_line+0xc4>)
     4b6:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
     4b8:	0021      	movs	r1, r4
     4ba:	0028      	movs	r0, r5
     4bc:	47c8      	blx	r9
			temp &= ~pixelmask;
     4be:	4038      	ands	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
     4c0:	b2c2      	uxtb	r2, r0
     4c2:	2300      	movs	r3, #0
     4c4:	0021      	movs	r1, r4
     4c6:	0028      	movs	r0, r5
     4c8:	47c0      	blx	r8
     4ca:	3c01      	subs	r4, #1
     4cc:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
     4ce:	42b4      	cmp	r4, r6
     4d0:	d1f2      	bne.n	4b8 <gfx_mono_generic_draw_horizontal_line+0xa4>
     4d2:	e7e4      	b.n	49e <gfx_mono_generic_draw_horizontal_line+0x8a>
     4d4:	00000825 	.word	0x00000825
     4d8:	0000071d 	.word	0x0000071d

000004dc <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4de:	46ce      	mov	lr, r9
     4e0:	b500      	push	{lr}
     4e2:	b082      	sub	sp, #8
     4e4:	9001      	str	r0, [sp, #4]
     4e6:	001e      	movs	r6, r3
	if (length == 0) {
     4e8:	2a00      	cmp	r2, #0
     4ea:	d031      	beq.n	550 <gfx_mono_generic_draw_vertical_line+0x74>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     4ec:	1e4b      	subs	r3, r1, #1
     4ee:	18d2      	adds	r2, r2, r3
     4f0:	b2d2      	uxtb	r2, r2

	if (y == y2) {
     4f2:	4291      	cmp	r1, r2
     4f4:	d030      	beq.n	558 <gfx_mono_generic_draw_vertical_line+0x7c>
     4f6:	1c13      	adds	r3, r2, #0
     4f8:	2a3f      	cmp	r2, #63	; 0x3f
     4fa:	d900      	bls.n	4fe <gfx_mono_generic_draw_vertical_line+0x22>
     4fc:	233f      	movs	r3, #63	; 0x3f
     4fe:	b2db      	uxtb	r3, r3

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
     500:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
     502:	08df      	lsrs	r7, r3, #3

	uint8_t y1bitpos = y & 0x07;
     504:	2207      	movs	r2, #7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     506:	4011      	ands	r1, r2
     508:	20ff      	movs	r0, #255	; 0xff
     50a:	0005      	movs	r5, r0
     50c:	408d      	lsls	r5, r1
     50e:	b2e9      	uxtb	r1, r5
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     510:	4013      	ands	r3, r2
     512:	1ad3      	subs	r3, r2, r3
     514:	4118      	asrs	r0, r3
     516:	b2c3      	uxtb	r3, r0
     518:	4699      	mov	r9, r3

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     51a:	42bc      	cmp	r4, r7
     51c:	d020      	beq.n	560 <gfx_mono_generic_draw_vertical_line+0x84>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
     51e:	0033      	movs	r3, r6
     520:	000a      	movs	r2, r1
     522:	9901      	ldr	r1, [sp, #4]
     524:	0020      	movs	r0, r4
     526:	4d12      	ldr	r5, [pc, #72]	; (570 <gfx_mono_generic_draw_vertical_line+0x94>)
     528:	47a8      	blx	r5

		while (++y1page < y2page) {
     52a:	3401      	adds	r4, #1
     52c:	42a7      	cmp	r7, r4
     52e:	d909      	bls.n	544 <gfx_mono_generic_draw_vertical_line+0x68>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     530:	4d0f      	ldr	r5, [pc, #60]	; (570 <gfx_mono_generic_draw_vertical_line+0x94>)
     532:	0033      	movs	r3, r6
     534:	22ff      	movs	r2, #255	; 0xff
     536:	9901      	ldr	r1, [sp, #4]
     538:	0020      	movs	r0, r4
     53a:	47a8      	blx	r5
		while (++y1page < y2page) {
     53c:	3401      	adds	r4, #1
     53e:	b2e4      	uxtb	r4, r4
     540:	42a7      	cmp	r7, r4
     542:	d8f6      	bhi.n	532 <gfx_mono_generic_draw_vertical_line+0x56>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     544:	0033      	movs	r3, r6
     546:	464a      	mov	r2, r9
     548:	9901      	ldr	r1, [sp, #4]
     54a:	0038      	movs	r0, r7
     54c:	4c08      	ldr	r4, [pc, #32]	; (570 <gfx_mono_generic_draw_vertical_line+0x94>)
     54e:	47a0      	blx	r4
	}
}
     550:	b002      	add	sp, #8
     552:	bc04      	pop	{r2}
     554:	4691      	mov	r9, r2
     556:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gfx_mono_draw_pixel(x, y, color);
     558:	0032      	movs	r2, r6
     55a:	4b06      	ldr	r3, [pc, #24]	; (574 <gfx_mono_generic_draw_vertical_line+0x98>)
     55c:	4798      	blx	r3
		return;
     55e:	e7f7      	b.n	550 <gfx_mono_generic_draw_vertical_line+0x74>
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     560:	001a      	movs	r2, r3
     562:	400a      	ands	r2, r1
     564:	0033      	movs	r3, r6
     566:	9901      	ldr	r1, [sp, #4]
     568:	0020      	movs	r0, r4
     56a:	4c01      	ldr	r4, [pc, #4]	; (570 <gfx_mono_generic_draw_vertical_line+0x94>)
     56c:	47a0      	blx	r4
     56e:	e7ef      	b.n	550 <gfx_mono_generic_draw_vertical_line+0x74>
     570:	00000831 	.word	0x00000831
     574:	000007bd 	.word	0x000007bd

00000578 <gfx_mono_generic_draw_rect>:
 * \param[in] color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     578:	b5f0      	push	{r4, r5, r6, r7, lr}
     57a:	b083      	sub	sp, #12
     57c:	0004      	movs	r4, r0
     57e:	000e      	movs	r6, r1
     580:	9300      	str	r3, [sp, #0]
     582:	ab08      	add	r3, sp, #32
     584:	781f      	ldrb	r7, [r3, #0]
	gfx_mono_draw_horizontal_line(x, y, width, color);
     586:	003b      	movs	r3, r7
     588:	9201      	str	r2, [sp, #4]
     58a:	4d0d      	ldr	r5, [pc, #52]	; (5c0 <gfx_mono_generic_draw_rect+0x48>)
     58c:	47a8      	blx	r5
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     58e:	9b00      	ldr	r3, [sp, #0]
     590:	1e59      	subs	r1, r3, #1
     592:	1871      	adds	r1, r6, r1
     594:	b2c9      	uxtb	r1, r1
     596:	003b      	movs	r3, r7
     598:	9a01      	ldr	r2, [sp, #4]
     59a:	0020      	movs	r0, r4
     59c:	47a8      	blx	r5

	gfx_mono_draw_vertical_line(x, y, height, color);
     59e:	003b      	movs	r3, r7
     5a0:	9a00      	ldr	r2, [sp, #0]
     5a2:	0031      	movs	r1, r6
     5a4:	0020      	movs	r0, r4
     5a6:	4d07      	ldr	r5, [pc, #28]	; (5c4 <gfx_mono_generic_draw_rect+0x4c>)
     5a8:	47a8      	blx	r5
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     5aa:	9801      	ldr	r0, [sp, #4]
     5ac:	3801      	subs	r0, #1
     5ae:	1820      	adds	r0, r4, r0
     5b0:	b2c0      	uxtb	r0, r0
     5b2:	003b      	movs	r3, r7
     5b4:	9a00      	ldr	r2, [sp, #0]
     5b6:	0031      	movs	r1, r6
     5b8:	47a8      	blx	r5
}
     5ba:	b003      	add	sp, #12
     5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	00000415 	.word	0x00000415
     5c4:	000004dd 	.word	0x000004dd

000005c8 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	b083      	sub	sp, #12
     5cc:	9000      	str	r0, [sp, #0]
     5ce:	9201      	str	r2, [sp, #4]
     5d0:	aa08      	add	r2, sp, #32
     5d2:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
     5d4:	2b00      	cmp	r3, #0
     5d6:	d00d      	beq.n	5f4 <gfx_mono_generic_draw_filled_rect+0x2c>
     5d8:	3901      	subs	r1, #1
     5da:	b2ce      	uxtb	r6, r1
     5dc:	199b      	adds	r3, r3, r6
     5de:	b2dc      	uxtb	r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     5e0:	4d05      	ldr	r5, [pc, #20]	; (5f8 <gfx_mono_generic_draw_filled_rect+0x30>)
     5e2:	003b      	movs	r3, r7
     5e4:	9a01      	ldr	r2, [sp, #4]
     5e6:	0021      	movs	r1, r4
     5e8:	9800      	ldr	r0, [sp, #0]
     5ea:	47a8      	blx	r5
     5ec:	3c01      	subs	r4, #1
     5ee:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
     5f0:	42b4      	cmp	r4, r6
     5f2:	d1f6      	bne.n	5e2 <gfx_mono_generic_draw_filled_rect+0x1a>
	}
}
     5f4:	b003      	add	sp, #12
     5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f8:	00000415 	.word	0x00000415

000005fc <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fe:	46de      	mov	lr, fp
     600:	4657      	mov	r7, sl
     602:	464e      	mov	r6, r9
     604:	4645      	mov	r5, r8
     606:	b5e0      	push	{r5, r6, r7, lr}
     608:	b085      	sub	sp, #20
     60a:	0004      	movs	r4, r0
     60c:	4688      	mov	r8, r1
     60e:	0015      	movs	r5, r2
     610:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     612:	7a5b      	ldrb	r3, [r3, #9]
     614:	465a      	mov	r2, fp
     616:	7a12      	ldrb	r2, [r2, #8]
     618:	2100      	movs	r1, #0
     61a:	9100      	str	r1, [sp, #0]
     61c:	0029      	movs	r1, r5
     61e:	4640      	mov	r0, r8
     620:	4e28      	ldr	r6, [pc, #160]	; (6c4 <gfx_mono_draw_char+0xc8>)
     622:	47b0      	blx	r6
			GFX_PIXEL_CLR);

	switch (font->type) {
     624:	465b      	mov	r3, fp
     626:	781b      	ldrb	r3, [r3, #0]
     628:	2b00      	cmp	r3, #0
     62a:	d006      	beq.n	63a <gfx_mono_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     62c:	b005      	add	sp, #20
     62e:	bc3c      	pop	{r2, r3, r4, r5}
     630:	4690      	mov	r8, r2
     632:	4699      	mov	r9, r3
     634:	46a2      	mov	sl, r4
     636:	46ab      	mov	fp, r5
     638:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     63a:	465b      	mov	r3, fp
     63c:	7a1a      	ldrb	r2, [r3, #8]
     63e:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     640:	0752      	lsls	r2, r2, #29
     642:	d000      	beq.n	646 <gfx_mono_draw_char+0x4a>
		char_row_size++;
     644:	3301      	adds	r3, #1
	glyph_data_offset = char_row_size * font->height *
     646:	465a      	mov	r2, fp
     648:	7a52      	ldrb	r2, [r2, #9]
     64a:	4692      	mov	sl, r2
			((uint8_t)ch - font->first_char);
     64c:	465a      	mov	r2, fp
     64e:	7a97      	ldrb	r7, [r2, #10]
     650:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
     652:	4652      	mov	r2, sl
     654:	4357      	muls	r7, r2
     656:	435f      	muls	r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
     658:	b2bf      	uxth	r7, r7
     65a:	465b      	mov	r3, fp
     65c:	685b      	ldr	r3, [r3, #4]
     65e:	469c      	mov	ip, r3
     660:	4467      	add	r7, ip
	gfx_coord_t inc_y = y;
     662:	9502      	str	r5, [sp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
     664:	4643      	mov	r3, r8
     666:	9303      	str	r3, [sp, #12]
     668:	e020      	b.n	6ac <gfx_mono_draw_char+0xb0>
			if ((glyph_byte & 0x80)) {
     66a:	b26b      	sxtb	r3, r5
     66c:	2b00      	cmp	r3, #0
     66e:	db0d      	blt.n	68c <gfx_mono_draw_char+0x90>
			inc_x += 1;
     670:	3401      	adds	r4, #1
     672:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
     674:	006d      	lsls	r5, r5, #1
     676:	b2ed      	uxtb	r5, r5
		for (i = 0; i < pixelsToDraw; i++) {
     678:	42a6      	cmp	r6, r4
     67a:	d00d      	beq.n	698 <gfx_mono_draw_char+0x9c>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     67c:	4643      	mov	r3, r8
     67e:	1ae3      	subs	r3, r4, r3
     680:	464a      	mov	r2, r9
     682:	421a      	tst	r2, r3
     684:	d1f1      	bne.n	66a <gfx_mono_draw_char+0x6e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     686:	783d      	ldrb	r5, [r7, #0]
				glyph_data++;
     688:	3701      	adds	r7, #1
     68a:	e7ee      	b.n	66a <gfx_mono_draw_char+0x6e>
				gfx_mono_draw_pixel(inc_x, inc_y,
     68c:	2201      	movs	r2, #1
     68e:	9902      	ldr	r1, [sp, #8]
     690:	0020      	movs	r0, r4
     692:	4b0d      	ldr	r3, [pc, #52]	; (6c8 <gfx_mono_draw_char+0xcc>)
     694:	4798      	blx	r3
     696:	e7eb      	b.n	670 <gfx_mono_draw_char+0x74>
		inc_y += 1;
     698:	9b02      	ldr	r3, [sp, #8]
     69a:	3301      	adds	r3, #1
     69c:	b2db      	uxtb	r3, r3
     69e:	9302      	str	r3, [sp, #8]
		rows_left--;
     6a0:	4653      	mov	r3, sl
     6a2:	3b01      	subs	r3, #1
     6a4:	b2db      	uxtb	r3, r3
     6a6:	469a      	mov	sl, r3
	} while (rows_left > 0);
     6a8:	2b00      	cmp	r3, #0
     6aa:	d0bf      	beq.n	62c <gfx_mono_draw_char+0x30>
		uint8_t pixelsToDraw = font->width;
     6ac:	465b      	mov	r3, fp
     6ae:	7a1e      	ldrb	r6, [r3, #8]
		for (i = 0; i < pixelsToDraw; i++) {
     6b0:	2e00      	cmp	r6, #0
     6b2:	d0f1      	beq.n	698 <gfx_mono_draw_char+0x9c>
     6b4:	4446      	add	r6, r8
     6b6:	b2f6      	uxtb	r6, r6
     6b8:	9c03      	ldr	r4, [sp, #12]
     6ba:	2500      	movs	r5, #0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     6bc:	2307      	movs	r3, #7
     6be:	4699      	mov	r9, r3
     6c0:	e7dc      	b.n	67c <gfx_mono_draw_char+0x80>
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	000005c9 	.word	0x000005c9
     6c8:	000007bd 	.word	0x000007bd

000006cc <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ce:	46c6      	mov	lr, r8
     6d0:	b500      	push	{lr}
     6d2:	b082      	sub	sp, #8
     6d4:	0004      	movs	r4, r0
     6d6:	4690      	mov	r8, r2
     6d8:	001f      	movs	r7, r3
     6da:	000d      	movs	r5, r1

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     6dc:	9101      	str	r1, [sp, #4]
     6de:	e009      	b.n	6f4 <gfx_mono_draw_string+0x28>
			y += font->height + 1;
     6e0:	7a7a      	ldrb	r2, [r7, #9]
     6e2:	3201      	adds	r2, #1
     6e4:	4442      	add	r2, r8
     6e6:	b2d3      	uxtb	r3, r2
     6e8:	4698      	mov	r8, r3
			x = start_of_string_position_x;
     6ea:	9d01      	ldr	r5, [sp, #4]
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
			x += font->width;
		}
	} while (*(++str));
     6ec:	3401      	adds	r4, #1
     6ee:	7823      	ldrb	r3, [r4, #0]
     6f0:	2b00      	cmp	r3, #0
     6f2:	d00d      	beq.n	710 <gfx_mono_draw_string+0x44>
		if (*str == '\n') {
     6f4:	7820      	ldrb	r0, [r4, #0]
     6f6:	280a      	cmp	r0, #10
     6f8:	d0f2      	beq.n	6e0 <gfx_mono_draw_string+0x14>
		} else if (*str == '\r') {
     6fa:	280d      	cmp	r0, #13
     6fc:	d0f6      	beq.n	6ec <gfx_mono_draw_string+0x20>
			gfx_mono_draw_char(*str, x, y, font);
     6fe:	003b      	movs	r3, r7
     700:	4642      	mov	r2, r8
     702:	0029      	movs	r1, r5
     704:	4e04      	ldr	r6, [pc, #16]	; (718 <gfx_mono_draw_string+0x4c>)
     706:	47b0      	blx	r6
			x += font->width;
     708:	7a3b      	ldrb	r3, [r7, #8]
     70a:	18ed      	adds	r5, r5, r3
     70c:	b2ed      	uxtb	r5, r5
     70e:	e7ed      	b.n	6ec <gfx_mono_draw_string+0x20>
}
     710:	b002      	add	sp, #8
     712:	bc04      	pop	{r2}
     714:	4690      	mov	r8, r2
     716:	bdf0      	pop	{r4, r5, r6, r7, pc}
     718:	000005fd 	.word	0x000005fd

0000071c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
     71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     71e:	0004      	movs	r4, r0
     720:	000f      	movs	r7, r1
     722:	0015      	movs	r5, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     724:	2b00      	cmp	r3, #0
     726:	d103      	bne.n	730 <gfx_mono_ssd1306_put_byte+0x14>
     728:	4b0d      	ldr	r3, [pc, #52]	; (760 <gfx_mono_ssd1306_put_byte+0x44>)
     72a:	4798      	blx	r3
     72c:	42a8      	cmp	r0, r5
     72e:	d015      	beq.n	75c <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     730:	002a      	movs	r2, r5
     732:	0039      	movs	r1, r7
     734:	0020      	movs	r0, r4
     736:	4b0b      	ldr	r3, [pc, #44]	; (764 <gfx_mono_ssd1306_put_byte+0x48>)
     738:	4798      	blx	r3
	address &= 0x0F;
     73a:	260f      	movs	r6, #15
     73c:	4034      	ands	r4, r6
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     73e:	20b0      	movs	r0, #176	; 0xb0
     740:	4320      	orrs	r0, r4
     742:	4c09      	ldr	r4, [pc, #36]	; (768 <gfx_mono_ssd1306_put_byte+0x4c>)
     744:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
     746:	0678      	lsls	r0, r7, #25
     748:	0f40      	lsrs	r0, r0, #29
     74a:	2310      	movs	r3, #16
     74c:	4318      	orrs	r0, r3
     74e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
     750:	0030      	movs	r0, r6
     752:	4038      	ands	r0, r7
     754:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
     756:	0028      	movs	r0, r5
     758:	4b04      	ldr	r3, [pc, #16]	; (76c <gfx_mono_ssd1306_put_byte+0x50>)
     75a:	4798      	blx	r3
}
     75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	00000405 	.word	0x00000405
     764:	000003f5 	.word	0x000003f5
     768:	00000115 	.word	0x00000115
     76c:	00000331 	.word	0x00000331

00000770 <gfx_mono_ssd1306_init>:
{
     770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gfx_mono_set_framebuffer(framebuffer);
     772:	480d      	ldr	r0, [pc, #52]	; (7a8 <gfx_mono_ssd1306_init+0x38>)
     774:	4b0d      	ldr	r3, [pc, #52]	; (7ac <gfx_mono_ssd1306_init+0x3c>)
     776:	4798      	blx	r3
	ssd1306_init();
     778:	4b0d      	ldr	r3, [pc, #52]	; (7b0 <gfx_mono_ssd1306_init+0x40>)
     77a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
     77c:	2040      	movs	r0, #64	; 0x40
     77e:	4b0d      	ldr	r3, [pc, #52]	; (7b4 <gfx_mono_ssd1306_init+0x44>)
     780:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     782:	2500      	movs	r5, #0
{
     784:	2600      	movs	r6, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
     786:	4f0c      	ldr	r7, [pc, #48]	; (7b8 <gfx_mono_ssd1306_init+0x48>)
{
     788:	0034      	movs	r4, r6
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
     78a:	2301      	movs	r3, #1
     78c:	0032      	movs	r2, r6
     78e:	0021      	movs	r1, r4
     790:	0028      	movs	r0, r5
     792:	47b8      	blx	r7
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     794:	3401      	adds	r4, #1
     796:	b2e4      	uxtb	r4, r4
     798:	2c80      	cmp	r4, #128	; 0x80
     79a:	d1f6      	bne.n	78a <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     79c:	3501      	adds	r5, #1
     79e:	b2ed      	uxtb	r5, r5
     7a0:	2d08      	cmp	r5, #8
     7a2:	d1f1      	bne.n	788 <gfx_mono_ssd1306_init+0x18>
}
     7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	2000003c 	.word	0x2000003c
     7ac:	000003e9 	.word	0x000003e9
     7b0:	00000161 	.word	0x00000161
     7b4:	00000115 	.word	0x00000115
     7b8:	0000071d 	.word	0x0000071d

000007bc <gfx_mono_ssd1306_draw_pixel>:
{
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7be:	46c6      	mov	lr, r8
     7c0:	b500      	push	{lr}
     7c2:	0004      	movs	r4, r0
     7c4:	0015      	movs	r5, r2
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     7c6:	b243      	sxtb	r3, r0
     7c8:	2b00      	cmp	r3, #0
     7ca:	db01      	blt.n	7d0 <gfx_mono_ssd1306_draw_pixel+0x14>
     7cc:	293f      	cmp	r1, #63	; 0x3f
     7ce:	d902      	bls.n	7d6 <gfx_mono_ssd1306_draw_pixel+0x1a>
}
     7d0:	bc04      	pop	{r2}
     7d2:	4690      	mov	r8, r2
     7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     7d6:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
     7d8:	00fb      	lsls	r3, r7, #3
     7da:	1ac9      	subs	r1, r1, r3
     7dc:	2601      	movs	r6, #1
     7de:	408e      	lsls	r6, r1
     7e0:	b2f3      	uxtb	r3, r6
     7e2:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     7e4:	0001      	movs	r1, r0
     7e6:	0038      	movs	r0, r7
     7e8:	4b0c      	ldr	r3, [pc, #48]	; (81c <gfx_mono_ssd1306_draw_pixel+0x60>)
     7ea:	4798      	blx	r3
     7ec:	0002      	movs	r2, r0
	switch (color) {
     7ee:	2d01      	cmp	r5, #1
     7f0:	d009      	beq.n	806 <gfx_mono_ssd1306_draw_pixel+0x4a>
     7f2:	2d00      	cmp	r5, #0
     7f4:	d00b      	beq.n	80e <gfx_mono_ssd1306_draw_pixel+0x52>
     7f6:	2d02      	cmp	r5, #2
     7f8:	d00c      	beq.n	814 <gfx_mono_ssd1306_draw_pixel+0x58>
	gfx_mono_put_byte(page, x, pixel_value);
     7fa:	2300      	movs	r3, #0
     7fc:	0021      	movs	r1, r4
     7fe:	0038      	movs	r0, r7
     800:	4c07      	ldr	r4, [pc, #28]	; (820 <gfx_mono_ssd1306_draw_pixel+0x64>)
     802:	47a0      	blx	r4
     804:	e7e4      	b.n	7d0 <gfx_mono_ssd1306_draw_pixel+0x14>
		pixel_value |= pixel_mask;
     806:	4643      	mov	r3, r8
     808:	4303      	orrs	r3, r0
     80a:	b2da      	uxtb	r2, r3
		break;
     80c:	e7f5      	b.n	7fa <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value &= ~pixel_mask;
     80e:	43b0      	bics	r0, r6
     810:	b2c2      	uxtb	r2, r0
		break;
     812:	e7f2      	b.n	7fa <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value ^= pixel_mask;
     814:	4643      	mov	r3, r8
     816:	4043      	eors	r3, r0
     818:	b2da      	uxtb	r2, r3
		break;
     81a:	e7ee      	b.n	7fa <gfx_mono_ssd1306_draw_pixel+0x3e>
     81c:	00000405 	.word	0x00000405
     820:	0000071d 	.word	0x0000071d

00000824 <gfx_mono_ssd1306_get_byte>:
{
     824:	b510      	push	{r4, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
     826:	4b01      	ldr	r3, [pc, #4]	; (82c <gfx_mono_ssd1306_get_byte+0x8>)
     828:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
     82a:	bd10      	pop	{r4, pc}
     82c:	00000405 	.word	0x00000405

00000830 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     832:	0004      	movs	r4, r0
     834:	000d      	movs	r5, r1
     836:	0017      	movs	r7, r2
     838:	001e      	movs	r6, r3
	return gfx_mono_framebuffer_get_byte(page, column);
     83a:	4b0c      	ldr	r3, [pc, #48]	; (86c <gfx_mono_ssd1306_mask_byte+0x3c>)
     83c:	4798      	blx	r3
     83e:	0002      	movs	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
     840:	2e01      	cmp	r6, #1
     842:	d009      	beq.n	858 <gfx_mono_ssd1306_mask_byte+0x28>
     844:	2e00      	cmp	r6, #0
     846:	d00a      	beq.n	85e <gfx_mono_ssd1306_mask_byte+0x2e>
     848:	2e02      	cmp	r6, #2
     84a:	d00b      	beq.n	864 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
     84c:	2300      	movs	r3, #0
     84e:	0029      	movs	r1, r5
     850:	0020      	movs	r0, r4
     852:	4c07      	ldr	r4, [pc, #28]	; (870 <gfx_mono_ssd1306_mask_byte+0x40>)
     854:	47a0      	blx	r4
}
     856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
     858:	4338      	orrs	r0, r7
     85a:	b2c2      	uxtb	r2, r0
		break;
     85c:	e7f6      	b.n	84c <gfx_mono_ssd1306_mask_byte+0x1c>
		temp &= ~pixel_mask;
     85e:	43b8      	bics	r0, r7
     860:	b2c2      	uxtb	r2, r0
		break;
     862:	e7f3      	b.n	84c <gfx_mono_ssd1306_mask_byte+0x1c>
		temp ^= pixel_mask;
     864:	4078      	eors	r0, r7
     866:	b2c2      	uxtb	r2, r0
		break;
     868:	e7f0      	b.n	84c <gfx_mono_ssd1306_mask_byte+0x1c>
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	00000405 	.word	0x00000405
     870:	0000071d 	.word	0x0000071d

00000874 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     874:	4b0c      	ldr	r3, [pc, #48]	; (8a8 <cpu_irq_enter_critical+0x34>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	2b00      	cmp	r3, #0
     87a:	d106      	bne.n	88a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     87c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     880:	2b00      	cmp	r3, #0
     882:	d007      	beq.n	894 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     884:	2200      	movs	r2, #0
     886:	4b09      	ldr	r3, [pc, #36]	; (8ac <cpu_irq_enter_critical+0x38>)
     888:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     88a:	4a07      	ldr	r2, [pc, #28]	; (8a8 <cpu_irq_enter_critical+0x34>)
     88c:	6813      	ldr	r3, [r2, #0]
     88e:	3301      	adds	r3, #1
     890:	6013      	str	r3, [r2, #0]
}
     892:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     894:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     896:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     89a:	2200      	movs	r2, #0
     89c:	4b04      	ldr	r3, [pc, #16]	; (8b0 <cpu_irq_enter_critical+0x3c>)
     89e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     8a0:	3201      	adds	r2, #1
     8a2:	4b02      	ldr	r3, [pc, #8]	; (8ac <cpu_irq_enter_critical+0x38>)
     8a4:	701a      	strb	r2, [r3, #0]
     8a6:	e7f0      	b.n	88a <cpu_irq_enter_critical+0x16>
     8a8:	2000043c 	.word	0x2000043c
     8ac:	20000440 	.word	0x20000440
     8b0:	20000014 	.word	0x20000014

000008b4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     8b4:	4b08      	ldr	r3, [pc, #32]	; (8d8 <cpu_irq_leave_critical+0x24>)
     8b6:	681a      	ldr	r2, [r3, #0]
     8b8:	3a01      	subs	r2, #1
     8ba:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     8bc:	681b      	ldr	r3, [r3, #0]
     8be:	2b00      	cmp	r3, #0
     8c0:	d109      	bne.n	8d6 <cpu_irq_leave_critical+0x22>
     8c2:	4b06      	ldr	r3, [pc, #24]	; (8dc <cpu_irq_leave_critical+0x28>)
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d005      	beq.n	8d6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     8ca:	2201      	movs	r2, #1
     8cc:	4b04      	ldr	r3, [pc, #16]	; (8e0 <cpu_irq_leave_critical+0x2c>)
     8ce:	701a      	strb	r2, [r3, #0]
     8d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     8d4:	b662      	cpsie	i
	}
}
     8d6:	4770      	bx	lr
     8d8:	2000043c 	.word	0x2000043c
     8dc:	20000440 	.word	0x20000440
     8e0:	20000014 	.word	0x20000014

000008e4 <system_board_init>:




void system_board_init(void)
{
     8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     8e8:	ac01      	add	r4, sp, #4
     8ea:	2501      	movs	r5, #1
     8ec:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     8ee:	2700      	movs	r7, #0
     8f0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     8f2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     8f4:	0021      	movs	r1, r4
     8f6:	2013      	movs	r0, #19
     8f8:	4e06      	ldr	r6, [pc, #24]	; (914 <system_board_init+0x30>)
     8fa:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     8fc:	2280      	movs	r2, #128	; 0x80
     8fe:	0312      	lsls	r2, r2, #12
     900:	4b05      	ldr	r3, [pc, #20]	; (918 <system_board_init+0x34>)
     902:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     904:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     906:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     908:	0021      	movs	r1, r4
     90a:	201c      	movs	r0, #28
     90c:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     90e:	b003      	add	sp, #12
     910:	bdf0      	pop	{r4, r5, r6, r7, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	0000091d 	.word	0x0000091d
     918:	41004400 	.word	0x41004400

0000091c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     91c:	b500      	push	{lr}
     91e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     920:	ab01      	add	r3, sp, #4
     922:	2280      	movs	r2, #128	; 0x80
     924:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     926:	780a      	ldrb	r2, [r1, #0]
     928:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     92a:	784a      	ldrb	r2, [r1, #1]
     92c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     92e:	788a      	ldrb	r2, [r1, #2]
     930:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     932:	0019      	movs	r1, r3
     934:	4b01      	ldr	r3, [pc, #4]	; (93c <port_pin_set_config+0x20>)
     936:	4798      	blx	r3
}
     938:	b003      	add	sp, #12
     93a:	bd00      	pop	{pc}
     93c:	00001d25 	.word	0x00001d25

00000940 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     940:	b5f0      	push	{r4, r5, r6, r7, lr}
     942:	46de      	mov	lr, fp
     944:	4657      	mov	r7, sl
     946:	464e      	mov	r6, r9
     948:	4645      	mov	r5, r8
     94a:	b5e0      	push	{r5, r6, r7, lr}
     94c:	b087      	sub	sp, #28
     94e:	4680      	mov	r8, r0
     950:	9104      	str	r1, [sp, #16]
     952:	0016      	movs	r6, r2
     954:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     956:	2200      	movs	r2, #0
     958:	2300      	movs	r3, #0
     95a:	2100      	movs	r1, #0
     95c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     95e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     960:	2001      	movs	r0, #1
     962:	0021      	movs	r1, r4
     964:	9600      	str	r6, [sp, #0]
     966:	9701      	str	r7, [sp, #4]
     968:	465c      	mov	r4, fp
     96a:	9403      	str	r4, [sp, #12]
     96c:	4644      	mov	r4, r8
     96e:	9405      	str	r4, [sp, #20]
     970:	e013      	b.n	99a <long_division+0x5a>
     972:	2420      	movs	r4, #32
     974:	1a64      	subs	r4, r4, r1
     976:	0005      	movs	r5, r0
     978:	40e5      	lsrs	r5, r4
     97a:	46a8      	mov	r8, r5
     97c:	e014      	b.n	9a8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     97e:	9c00      	ldr	r4, [sp, #0]
     980:	9d01      	ldr	r5, [sp, #4]
     982:	1b12      	subs	r2, r2, r4
     984:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     986:	465c      	mov	r4, fp
     988:	464d      	mov	r5, r9
     98a:	432c      	orrs	r4, r5
     98c:	46a3      	mov	fp, r4
     98e:	9c03      	ldr	r4, [sp, #12]
     990:	4645      	mov	r5, r8
     992:	432c      	orrs	r4, r5
     994:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     996:	3901      	subs	r1, #1
     998:	d325      	bcc.n	9e6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     99a:	2420      	movs	r4, #32
     99c:	4264      	negs	r4, r4
     99e:	190c      	adds	r4, r1, r4
     9a0:	d4e7      	bmi.n	972 <long_division+0x32>
     9a2:	0005      	movs	r5, r0
     9a4:	40a5      	lsls	r5, r4
     9a6:	46a8      	mov	r8, r5
     9a8:	0004      	movs	r4, r0
     9aa:	408c      	lsls	r4, r1
     9ac:	46a1      	mov	r9, r4
		r = r << 1;
     9ae:	1892      	adds	r2, r2, r2
     9b0:	415b      	adcs	r3, r3
     9b2:	0014      	movs	r4, r2
     9b4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     9b6:	9e05      	ldr	r6, [sp, #20]
     9b8:	464f      	mov	r7, r9
     9ba:	403e      	ands	r6, r7
     9bc:	46b4      	mov	ip, r6
     9be:	9e04      	ldr	r6, [sp, #16]
     9c0:	4647      	mov	r7, r8
     9c2:	403e      	ands	r6, r7
     9c4:	46b2      	mov	sl, r6
     9c6:	4666      	mov	r6, ip
     9c8:	4657      	mov	r7, sl
     9ca:	433e      	orrs	r6, r7
     9cc:	d003      	beq.n	9d6 <long_division+0x96>
			r |= 0x01;
     9ce:	0006      	movs	r6, r0
     9d0:	4326      	orrs	r6, r4
     9d2:	0032      	movs	r2, r6
     9d4:	002b      	movs	r3, r5
		if (r >= d) {
     9d6:	9c00      	ldr	r4, [sp, #0]
     9d8:	9d01      	ldr	r5, [sp, #4]
     9da:	429d      	cmp	r5, r3
     9dc:	d8db      	bhi.n	996 <long_division+0x56>
     9de:	d1ce      	bne.n	97e <long_division+0x3e>
     9e0:	4294      	cmp	r4, r2
     9e2:	d8d8      	bhi.n	996 <long_division+0x56>
     9e4:	e7cb      	b.n	97e <long_division+0x3e>
     9e6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     9e8:	4658      	mov	r0, fp
     9ea:	0019      	movs	r1, r3
     9ec:	b007      	add	sp, #28
     9ee:	bc3c      	pop	{r2, r3, r4, r5}
     9f0:	4690      	mov	r8, r2
     9f2:	4699      	mov	r9, r3
     9f4:	46a2      	mov	sl, r4
     9f6:	46ab      	mov	fp, r5
     9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000009fa <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     9fa:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     9fc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9fe:	2340      	movs	r3, #64	; 0x40
     a00:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     a02:	4281      	cmp	r1, r0
     a04:	d202      	bcs.n	a0c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     a06:	0018      	movs	r0, r3
     a08:	bd10      	pop	{r4, pc}
		baud_calculated++;
     a0a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     a0c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a0e:	1c63      	adds	r3, r4, #1
     a10:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     a12:	4288      	cmp	r0, r1
     a14:	d9f9      	bls.n	a0a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a16:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     a18:	2cff      	cmp	r4, #255	; 0xff
     a1a:	d8f4      	bhi.n	a06 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     a1c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a1e:	2300      	movs	r3, #0
     a20:	e7f1      	b.n	a06 <_sercom_get_sync_baud_val+0xc>
	...

00000a24 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a24:	b5f0      	push	{r4, r5, r6, r7, lr}
     a26:	b083      	sub	sp, #12
     a28:	000f      	movs	r7, r1
     a2a:	0016      	movs	r6, r2
     a2c:	aa08      	add	r2, sp, #32
     a2e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a30:	0004      	movs	r4, r0
     a32:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a34:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     a36:	42bc      	cmp	r4, r7
     a38:	d902      	bls.n	a40 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     a3a:	0010      	movs	r0, r2
     a3c:	b003      	add	sp, #12
     a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a40:	2b00      	cmp	r3, #0
     a42:	d114      	bne.n	a6e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a44:	0002      	movs	r2, r0
     a46:	0008      	movs	r0, r1
     a48:	2100      	movs	r1, #0
     a4a:	4c19      	ldr	r4, [pc, #100]	; (ab0 <_sercom_get_async_baud_val+0x8c>)
     a4c:	47a0      	blx	r4
     a4e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     a50:	003a      	movs	r2, r7
     a52:	2300      	movs	r3, #0
     a54:	2000      	movs	r0, #0
     a56:	4c17      	ldr	r4, [pc, #92]	; (ab4 <_sercom_get_async_baud_val+0x90>)
     a58:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     a5a:	2200      	movs	r2, #0
     a5c:	2301      	movs	r3, #1
     a5e:	1a12      	subs	r2, r2, r0
     a60:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     a62:	0c12      	lsrs	r2, r2, #16
     a64:	041b      	lsls	r3, r3, #16
     a66:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     a68:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     a6a:	2200      	movs	r2, #0
     a6c:	e7e5      	b.n	a3a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     a6e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     a70:	2b01      	cmp	r3, #1
     a72:	d1f9      	bne.n	a68 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     a74:	000a      	movs	r2, r1
     a76:	2300      	movs	r3, #0
     a78:	2100      	movs	r1, #0
     a7a:	4c0d      	ldr	r4, [pc, #52]	; (ab0 <_sercom_get_async_baud_val+0x8c>)
     a7c:	47a0      	blx	r4
     a7e:	0002      	movs	r2, r0
     a80:	000b      	movs	r3, r1
     a82:	9200      	str	r2, [sp, #0]
     a84:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     a86:	0038      	movs	r0, r7
     a88:	2100      	movs	r1, #0
     a8a:	4c0a      	ldr	r4, [pc, #40]	; (ab4 <_sercom_get_async_baud_val+0x90>)
     a8c:	47a0      	blx	r4
     a8e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     a90:	2380      	movs	r3, #128	; 0x80
     a92:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a94:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     a96:	4298      	cmp	r0, r3
     a98:	d8cf      	bhi.n	a3a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     a9a:	0f79      	lsrs	r1, r7, #29
     a9c:	00f8      	lsls	r0, r7, #3
     a9e:	9a00      	ldr	r2, [sp, #0]
     aa0:	9b01      	ldr	r3, [sp, #4]
     aa2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     aa4:	00ea      	lsls	r2, r5, #3
     aa6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     aa8:	b2d2      	uxtb	r2, r2
     aaa:	0352      	lsls	r2, r2, #13
     aac:	432a      	orrs	r2, r5
     aae:	e7db      	b.n	a68 <_sercom_get_async_baud_val+0x44>
     ab0:	0000409d 	.word	0x0000409d
     ab4:	00000941 	.word	0x00000941

00000ab8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ab8:	b510      	push	{r4, lr}
     aba:	b082      	sub	sp, #8
     abc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     abe:	4b0e      	ldr	r3, [pc, #56]	; (af8 <sercom_set_gclk_generator+0x40>)
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d007      	beq.n	ad6 <sercom_set_gclk_generator+0x1e>
     ac6:	2900      	cmp	r1, #0
     ac8:	d105      	bne.n	ad6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     aca:	4b0b      	ldr	r3, [pc, #44]	; (af8 <sercom_set_gclk_generator+0x40>)
     acc:	785b      	ldrb	r3, [r3, #1]
     ace:	4283      	cmp	r3, r0
     ad0:	d010      	beq.n	af4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     ad2:	201d      	movs	r0, #29
     ad4:	e00c      	b.n	af0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     ad6:	a901      	add	r1, sp, #4
     ad8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     ada:	2013      	movs	r0, #19
     adc:	4b07      	ldr	r3, [pc, #28]	; (afc <sercom_set_gclk_generator+0x44>)
     ade:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     ae0:	2013      	movs	r0, #19
     ae2:	4b07      	ldr	r3, [pc, #28]	; (b00 <sercom_set_gclk_generator+0x48>)
     ae4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     ae6:	4b04      	ldr	r3, [pc, #16]	; (af8 <sercom_set_gclk_generator+0x40>)
     ae8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     aea:	2201      	movs	r2, #1
     aec:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     aee:	2000      	movs	r0, #0
}
     af0:	b002      	add	sp, #8
     af2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     af4:	2000      	movs	r0, #0
     af6:	e7fb      	b.n	af0 <sercom_set_gclk_generator+0x38>
     af8:	20000444 	.word	0x20000444
     afc:	00001c2d 	.word	0x00001c2d
     b00:	00001ba1 	.word	0x00001ba1

00000b04 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b04:	4b40      	ldr	r3, [pc, #256]	; (c08 <_sercom_get_default_pad+0x104>)
     b06:	4298      	cmp	r0, r3
     b08:	d031      	beq.n	b6e <_sercom_get_default_pad+0x6a>
     b0a:	d90a      	bls.n	b22 <_sercom_get_default_pad+0x1e>
     b0c:	4b3f      	ldr	r3, [pc, #252]	; (c0c <_sercom_get_default_pad+0x108>)
     b0e:	4298      	cmp	r0, r3
     b10:	d04d      	beq.n	bae <_sercom_get_default_pad+0xaa>
     b12:	4b3f      	ldr	r3, [pc, #252]	; (c10 <_sercom_get_default_pad+0x10c>)
     b14:	4298      	cmp	r0, r3
     b16:	d05a      	beq.n	bce <_sercom_get_default_pad+0xca>
     b18:	4b3e      	ldr	r3, [pc, #248]	; (c14 <_sercom_get_default_pad+0x110>)
     b1a:	4298      	cmp	r0, r3
     b1c:	d037      	beq.n	b8e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     b1e:	2000      	movs	r0, #0
}
     b20:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     b22:	4b3d      	ldr	r3, [pc, #244]	; (c18 <_sercom_get_default_pad+0x114>)
     b24:	4298      	cmp	r0, r3
     b26:	d00c      	beq.n	b42 <_sercom_get_default_pad+0x3e>
     b28:	4b3c      	ldr	r3, [pc, #240]	; (c1c <_sercom_get_default_pad+0x118>)
     b2a:	4298      	cmp	r0, r3
     b2c:	d1f7      	bne.n	b1e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b2e:	2901      	cmp	r1, #1
     b30:	d017      	beq.n	b62 <_sercom_get_default_pad+0x5e>
     b32:	2900      	cmp	r1, #0
     b34:	d05d      	beq.n	bf2 <_sercom_get_default_pad+0xee>
     b36:	2902      	cmp	r1, #2
     b38:	d015      	beq.n	b66 <_sercom_get_default_pad+0x62>
     b3a:	2903      	cmp	r1, #3
     b3c:	d015      	beq.n	b6a <_sercom_get_default_pad+0x66>
	return 0;
     b3e:	2000      	movs	r0, #0
     b40:	e7ee      	b.n	b20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b42:	2901      	cmp	r1, #1
     b44:	d007      	beq.n	b56 <_sercom_get_default_pad+0x52>
     b46:	2900      	cmp	r1, #0
     b48:	d051      	beq.n	bee <_sercom_get_default_pad+0xea>
     b4a:	2902      	cmp	r1, #2
     b4c:	d005      	beq.n	b5a <_sercom_get_default_pad+0x56>
     b4e:	2903      	cmp	r1, #3
     b50:	d005      	beq.n	b5e <_sercom_get_default_pad+0x5a>
	return 0;
     b52:	2000      	movs	r0, #0
     b54:	e7e4      	b.n	b20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b56:	4832      	ldr	r0, [pc, #200]	; (c20 <_sercom_get_default_pad+0x11c>)
     b58:	e7e2      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b5a:	4832      	ldr	r0, [pc, #200]	; (c24 <_sercom_get_default_pad+0x120>)
     b5c:	e7e0      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b5e:	4832      	ldr	r0, [pc, #200]	; (c28 <_sercom_get_default_pad+0x124>)
     b60:	e7de      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b62:	4832      	ldr	r0, [pc, #200]	; (c2c <_sercom_get_default_pad+0x128>)
     b64:	e7dc      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b66:	4832      	ldr	r0, [pc, #200]	; (c30 <_sercom_get_default_pad+0x12c>)
     b68:	e7da      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b6a:	4832      	ldr	r0, [pc, #200]	; (c34 <_sercom_get_default_pad+0x130>)
     b6c:	e7d8      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b6e:	2901      	cmp	r1, #1
     b70:	d007      	beq.n	b82 <_sercom_get_default_pad+0x7e>
     b72:	2900      	cmp	r1, #0
     b74:	d03f      	beq.n	bf6 <_sercom_get_default_pad+0xf2>
     b76:	2902      	cmp	r1, #2
     b78:	d005      	beq.n	b86 <_sercom_get_default_pad+0x82>
     b7a:	2903      	cmp	r1, #3
     b7c:	d005      	beq.n	b8a <_sercom_get_default_pad+0x86>
	return 0;
     b7e:	2000      	movs	r0, #0
     b80:	e7ce      	b.n	b20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b82:	482d      	ldr	r0, [pc, #180]	; (c38 <_sercom_get_default_pad+0x134>)
     b84:	e7cc      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b86:	482d      	ldr	r0, [pc, #180]	; (c3c <_sercom_get_default_pad+0x138>)
     b88:	e7ca      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b8a:	482d      	ldr	r0, [pc, #180]	; (c40 <_sercom_get_default_pad+0x13c>)
     b8c:	e7c8      	b.n	b20 <_sercom_get_default_pad+0x1c>
     b8e:	2901      	cmp	r1, #1
     b90:	d007      	beq.n	ba2 <_sercom_get_default_pad+0x9e>
     b92:	2900      	cmp	r1, #0
     b94:	d031      	beq.n	bfa <_sercom_get_default_pad+0xf6>
     b96:	2902      	cmp	r1, #2
     b98:	d005      	beq.n	ba6 <_sercom_get_default_pad+0xa2>
     b9a:	2903      	cmp	r1, #3
     b9c:	d005      	beq.n	baa <_sercom_get_default_pad+0xa6>
	return 0;
     b9e:	2000      	movs	r0, #0
     ba0:	e7be      	b.n	b20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ba2:	4828      	ldr	r0, [pc, #160]	; (c44 <_sercom_get_default_pad+0x140>)
     ba4:	e7bc      	b.n	b20 <_sercom_get_default_pad+0x1c>
     ba6:	4828      	ldr	r0, [pc, #160]	; (c48 <_sercom_get_default_pad+0x144>)
     ba8:	e7ba      	b.n	b20 <_sercom_get_default_pad+0x1c>
     baa:	4828      	ldr	r0, [pc, #160]	; (c4c <_sercom_get_default_pad+0x148>)
     bac:	e7b8      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bae:	2901      	cmp	r1, #1
     bb0:	d007      	beq.n	bc2 <_sercom_get_default_pad+0xbe>
     bb2:	2900      	cmp	r1, #0
     bb4:	d023      	beq.n	bfe <_sercom_get_default_pad+0xfa>
     bb6:	2902      	cmp	r1, #2
     bb8:	d005      	beq.n	bc6 <_sercom_get_default_pad+0xc2>
     bba:	2903      	cmp	r1, #3
     bbc:	d005      	beq.n	bca <_sercom_get_default_pad+0xc6>
	return 0;
     bbe:	2000      	movs	r0, #0
     bc0:	e7ae      	b.n	b20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bc2:	4823      	ldr	r0, [pc, #140]	; (c50 <_sercom_get_default_pad+0x14c>)
     bc4:	e7ac      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bc6:	4823      	ldr	r0, [pc, #140]	; (c54 <_sercom_get_default_pad+0x150>)
     bc8:	e7aa      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bca:	4823      	ldr	r0, [pc, #140]	; (c58 <_sercom_get_default_pad+0x154>)
     bcc:	e7a8      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bce:	2901      	cmp	r1, #1
     bd0:	d007      	beq.n	be2 <_sercom_get_default_pad+0xde>
     bd2:	2900      	cmp	r1, #0
     bd4:	d015      	beq.n	c02 <_sercom_get_default_pad+0xfe>
     bd6:	2902      	cmp	r1, #2
     bd8:	d005      	beq.n	be6 <_sercom_get_default_pad+0xe2>
     bda:	2903      	cmp	r1, #3
     bdc:	d005      	beq.n	bea <_sercom_get_default_pad+0xe6>
	return 0;
     bde:	2000      	movs	r0, #0
     be0:	e79e      	b.n	b20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     be2:	481e      	ldr	r0, [pc, #120]	; (c5c <_sercom_get_default_pad+0x158>)
     be4:	e79c      	b.n	b20 <_sercom_get_default_pad+0x1c>
     be6:	481e      	ldr	r0, [pc, #120]	; (c60 <_sercom_get_default_pad+0x15c>)
     be8:	e79a      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bea:	481e      	ldr	r0, [pc, #120]	; (c64 <_sercom_get_default_pad+0x160>)
     bec:	e798      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bee:	481e      	ldr	r0, [pc, #120]	; (c68 <_sercom_get_default_pad+0x164>)
     bf0:	e796      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bf2:	2003      	movs	r0, #3
     bf4:	e794      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bf6:	481d      	ldr	r0, [pc, #116]	; (c6c <_sercom_get_default_pad+0x168>)
     bf8:	e792      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bfa:	481d      	ldr	r0, [pc, #116]	; (c70 <_sercom_get_default_pad+0x16c>)
     bfc:	e790      	b.n	b20 <_sercom_get_default_pad+0x1c>
     bfe:	481d      	ldr	r0, [pc, #116]	; (c74 <_sercom_get_default_pad+0x170>)
     c00:	e78e      	b.n	b20 <_sercom_get_default_pad+0x1c>
     c02:	481d      	ldr	r0, [pc, #116]	; (c78 <_sercom_get_default_pad+0x174>)
     c04:	e78c      	b.n	b20 <_sercom_get_default_pad+0x1c>
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	42001000 	.word	0x42001000
     c0c:	42001800 	.word	0x42001800
     c10:	42001c00 	.word	0x42001c00
     c14:	42001400 	.word	0x42001400
     c18:	42000800 	.word	0x42000800
     c1c:	42000c00 	.word	0x42000c00
     c20:	00050003 	.word	0x00050003
     c24:	00060003 	.word	0x00060003
     c28:	00070003 	.word	0x00070003
     c2c:	00010003 	.word	0x00010003
     c30:	001e0003 	.word	0x001e0003
     c34:	001f0003 	.word	0x001f0003
     c38:	000d0002 	.word	0x000d0002
     c3c:	000e0002 	.word	0x000e0002
     c40:	000f0002 	.word	0x000f0002
     c44:	00110003 	.word	0x00110003
     c48:	00120003 	.word	0x00120003
     c4c:	00130003 	.word	0x00130003
     c50:	003f0005 	.word	0x003f0005
     c54:	003e0005 	.word	0x003e0005
     c58:	00520005 	.word	0x00520005
     c5c:	00170003 	.word	0x00170003
     c60:	00180003 	.word	0x00180003
     c64:	00190003 	.word	0x00190003
     c68:	00040003 	.word	0x00040003
     c6c:	000c0002 	.word	0x000c0002
     c70:	00100003 	.word	0x00100003
     c74:	00530005 	.word	0x00530005
     c78:	00160003 	.word	0x00160003

00000c7c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c7c:	b530      	push	{r4, r5, lr}
     c7e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c80:	4b0b      	ldr	r3, [pc, #44]	; (cb0 <_sercom_get_sercom_inst_index+0x34>)
     c82:	466a      	mov	r2, sp
     c84:	cb32      	ldmia	r3!, {r1, r4, r5}
     c86:	c232      	stmia	r2!, {r1, r4, r5}
     c88:	cb32      	ldmia	r3!, {r1, r4, r5}
     c8a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c8c:	9b00      	ldr	r3, [sp, #0]
     c8e:	4283      	cmp	r3, r0
     c90:	d00b      	beq.n	caa <_sercom_get_sercom_inst_index+0x2e>
     c92:	2301      	movs	r3, #1
     c94:	009a      	lsls	r2, r3, #2
     c96:	4669      	mov	r1, sp
     c98:	5852      	ldr	r2, [r2, r1]
     c9a:	4282      	cmp	r2, r0
     c9c:	d006      	beq.n	cac <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c9e:	3301      	adds	r3, #1
     ca0:	2b06      	cmp	r3, #6
     ca2:	d1f7      	bne.n	c94 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     ca4:	2000      	movs	r0, #0
}
     ca6:	b007      	add	sp, #28
     ca8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     caa:	2300      	movs	r3, #0
			return i;
     cac:	b2d8      	uxtb	r0, r3
     cae:	e7fa      	b.n	ca6 <_sercom_get_sercom_inst_index+0x2a>
     cb0:	000043f0 	.word	0x000043f0

00000cb4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     cb4:	4770      	bx	lr
	...

00000cb8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     cba:	4b0a      	ldr	r3, [pc, #40]	; (ce4 <_sercom_set_handler+0x2c>)
     cbc:	781b      	ldrb	r3, [r3, #0]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d10c      	bne.n	cdc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     cc2:	4f09      	ldr	r7, [pc, #36]	; (ce8 <_sercom_set_handler+0x30>)
     cc4:	4e09      	ldr	r6, [pc, #36]	; (cec <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     cc6:	4d0a      	ldr	r5, [pc, #40]	; (cf0 <_sercom_set_handler+0x38>)
     cc8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     cca:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     ccc:	195a      	adds	r2, r3, r5
     cce:	6014      	str	r4, [r2, #0]
     cd0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cd2:	2b18      	cmp	r3, #24
     cd4:	d1f9      	bne.n	cca <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     cd6:	2201      	movs	r2, #1
     cd8:	4b02      	ldr	r3, [pc, #8]	; (ce4 <_sercom_set_handler+0x2c>)
     cda:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     cdc:	0080      	lsls	r0, r0, #2
     cde:	4b02      	ldr	r3, [pc, #8]	; (ce8 <_sercom_set_handler+0x30>)
     ce0:	50c1      	str	r1, [r0, r3]
}
     ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce4:	20000446 	.word	0x20000446
     ce8:	20000448 	.word	0x20000448
     cec:	00000cb5 	.word	0x00000cb5
     cf0:	20004138 	.word	0x20004138

00000cf4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     cf4:	b500      	push	{lr}
     cf6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     cf8:	2309      	movs	r3, #9
     cfa:	466a      	mov	r2, sp
     cfc:	7013      	strb	r3, [r2, #0]
     cfe:	3301      	adds	r3, #1
     d00:	7053      	strb	r3, [r2, #1]
     d02:	3301      	adds	r3, #1
     d04:	7093      	strb	r3, [r2, #2]
     d06:	3301      	adds	r3, #1
     d08:	70d3      	strb	r3, [r2, #3]
     d0a:	3301      	adds	r3, #1
     d0c:	7113      	strb	r3, [r2, #4]
     d0e:	3301      	adds	r3, #1
     d10:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     d12:	4b03      	ldr	r3, [pc, #12]	; (d20 <_sercom_get_interrupt_vector+0x2c>)
     d14:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     d16:	466b      	mov	r3, sp
     d18:	5618      	ldrsb	r0, [r3, r0]
}
     d1a:	b003      	add	sp, #12
     d1c:	bd00      	pop	{pc}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	00000c7d 	.word	0x00000c7d

00000d24 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d24:	b510      	push	{r4, lr}
     d26:	4b02      	ldr	r3, [pc, #8]	; (d30 <SERCOM0_Handler+0xc>)
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	2000      	movs	r0, #0
     d2c:	4798      	blx	r3
     d2e:	bd10      	pop	{r4, pc}
     d30:	20000448 	.word	0x20000448

00000d34 <SERCOM1_Handler>:
     d34:	b510      	push	{r4, lr}
     d36:	4b02      	ldr	r3, [pc, #8]	; (d40 <SERCOM1_Handler+0xc>)
     d38:	685b      	ldr	r3, [r3, #4]
     d3a:	2001      	movs	r0, #1
     d3c:	4798      	blx	r3
     d3e:	bd10      	pop	{r4, pc}
     d40:	20000448 	.word	0x20000448

00000d44 <SERCOM2_Handler>:
     d44:	b510      	push	{r4, lr}
     d46:	4b02      	ldr	r3, [pc, #8]	; (d50 <SERCOM2_Handler+0xc>)
     d48:	689b      	ldr	r3, [r3, #8]
     d4a:	2002      	movs	r0, #2
     d4c:	4798      	blx	r3
     d4e:	bd10      	pop	{r4, pc}
     d50:	20000448 	.word	0x20000448

00000d54 <SERCOM3_Handler>:
     d54:	b510      	push	{r4, lr}
     d56:	4b02      	ldr	r3, [pc, #8]	; (d60 <SERCOM3_Handler+0xc>)
     d58:	68db      	ldr	r3, [r3, #12]
     d5a:	2003      	movs	r0, #3
     d5c:	4798      	blx	r3
     d5e:	bd10      	pop	{r4, pc}
     d60:	20000448 	.word	0x20000448

00000d64 <SERCOM4_Handler>:
     d64:	b510      	push	{r4, lr}
     d66:	4b02      	ldr	r3, [pc, #8]	; (d70 <SERCOM4_Handler+0xc>)
     d68:	691b      	ldr	r3, [r3, #16]
     d6a:	2004      	movs	r0, #4
     d6c:	4798      	blx	r3
     d6e:	bd10      	pop	{r4, pc}
     d70:	20000448 	.word	0x20000448

00000d74 <SERCOM5_Handler>:
     d74:	b510      	push	{r4, lr}
     d76:	4b02      	ldr	r3, [pc, #8]	; (d80 <SERCOM5_Handler+0xc>)
     d78:	695b      	ldr	r3, [r3, #20]
     d7a:	2005      	movs	r0, #5
     d7c:	4798      	blx	r3
     d7e:	bd10      	pop	{r4, pc}
     d80:	20000448 	.word	0x20000448

00000d84 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d84:	b5f0      	push	{r4, r5, r6, r7, lr}
     d86:	b08b      	sub	sp, #44	; 0x2c
     d88:	0005      	movs	r5, r0
     d8a:	000c      	movs	r4, r1
     d8c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     d8e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d90:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     d92:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d94:	079b      	lsls	r3, r3, #30
     d96:	d501      	bpl.n	d9c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     d98:	b00b      	add	sp, #44	; 0x2c
     d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d9c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     d9e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     da0:	07db      	lsls	r3, r3, #31
     da2:	d4f9      	bmi.n	d98 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     da4:	0008      	movs	r0, r1
     da6:	4b60      	ldr	r3, [pc, #384]	; (f28 <spi_init+0x1a4>)
     da8:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     daa:	4a60      	ldr	r2, [pc, #384]	; (f2c <spi_init+0x1a8>)
     dac:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     dae:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     db0:	2301      	movs	r3, #1
     db2:	40bb      	lsls	r3, r7
     db4:	430b      	orrs	r3, r1
     db6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     db8:	a909      	add	r1, sp, #36	; 0x24
     dba:	2724      	movs	r7, #36	; 0x24
     dbc:	5df3      	ldrb	r3, [r6, r7]
     dbe:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dc0:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     dc2:	b2c3      	uxtb	r3, r0
     dc4:	9301      	str	r3, [sp, #4]
     dc6:	0018      	movs	r0, r3
     dc8:	4b59      	ldr	r3, [pc, #356]	; (f30 <spi_init+0x1ac>)
     dca:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     dcc:	9801      	ldr	r0, [sp, #4]
     dce:	4b59      	ldr	r3, [pc, #356]	; (f34 <spi_init+0x1b0>)
     dd0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     dd2:	5df0      	ldrb	r0, [r6, r7]
     dd4:	2100      	movs	r1, #0
     dd6:	4b58      	ldr	r3, [pc, #352]	; (f38 <spi_init+0x1b4>)
     dd8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     dda:	7833      	ldrb	r3, [r6, #0]
     ddc:	2b01      	cmp	r3, #1
     dde:	d038      	beq.n	e52 <spi_init+0xce>
     de0:	002b      	movs	r3, r5
     de2:	330c      	adds	r3, #12
     de4:	0029      	movs	r1, r5
     de6:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     de8:	2200      	movs	r2, #0
     dea:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     dec:	428b      	cmp	r3, r1
     dee:	d1fc      	bne.n	dea <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
     df0:	2300      	movs	r3, #0
     df2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     df4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     df6:	2400      	movs	r4, #0
     df8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     dfa:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     dfc:	3336      	adds	r3, #54	; 0x36
     dfe:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     e00:	3301      	adds	r3, #1
     e02:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     e04:	3301      	adds	r3, #1
     e06:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     e08:	3b35      	subs	r3, #53	; 0x35
     e0a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     e0c:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     e0e:	6828      	ldr	r0, [r5, #0]
     e10:	4b45      	ldr	r3, [pc, #276]	; (f28 <spi_init+0x1a4>)
     e12:	4798      	blx	r3
     e14:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     e16:	4949      	ldr	r1, [pc, #292]	; (f3c <spi_init+0x1b8>)
     e18:	4b49      	ldr	r3, [pc, #292]	; (f40 <spi_init+0x1bc>)
     e1a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e1c:	00bf      	lsls	r7, r7, #2
     e1e:	4b49      	ldr	r3, [pc, #292]	; (f44 <spi_init+0x1c0>)
     e20:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     e22:	682f      	ldr	r7, [r5, #0]
     e24:	ab04      	add	r3, sp, #16
     e26:	2280      	movs	r2, #128	; 0x80
     e28:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e2a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e2c:	3a7f      	subs	r2, #127	; 0x7f
     e2e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e30:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     e32:	7833      	ldrb	r3, [r6, #0]
     e34:	2b00      	cmp	r3, #0
     e36:	d102      	bne.n	e3e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     e38:	2200      	movs	r2, #0
     e3a:	ab04      	add	r3, sp, #16
     e3c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     e3e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     e40:	9305      	str	r3, [sp, #20]
     e42:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     e44:	9306      	str	r3, [sp, #24]
     e46:	6b33      	ldr	r3, [r6, #48]	; 0x30
     e48:	9307      	str	r3, [sp, #28]
     e4a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     e4c:	9308      	str	r3, [sp, #32]
     e4e:	2400      	movs	r4, #0
     e50:	e00b      	b.n	e6a <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     e52:	6823      	ldr	r3, [r4, #0]
     e54:	220c      	movs	r2, #12
     e56:	4313      	orrs	r3, r2
     e58:	6023      	str	r3, [r4, #0]
     e5a:	e7c1      	b.n	de0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e5c:	0038      	movs	r0, r7
     e5e:	4b3a      	ldr	r3, [pc, #232]	; (f48 <spi_init+0x1c4>)
     e60:	4798      	blx	r3
     e62:	e00a      	b.n	e7a <spi_init+0xf6>
     e64:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     e66:	2c04      	cmp	r4, #4
     e68:	d010      	beq.n	e8c <spi_init+0x108>
     e6a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e6c:	00a3      	lsls	r3, r4, #2
     e6e:	aa02      	add	r2, sp, #8
     e70:	200c      	movs	r0, #12
     e72:	1812      	adds	r2, r2, r0
     e74:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
     e76:	2800      	cmp	r0, #0
     e78:	d0f0      	beq.n	e5c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
     e7a:	1c43      	adds	r3, r0, #1
     e7c:	d0f2      	beq.n	e64 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e7e:	a904      	add	r1, sp, #16
     e80:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e82:	0c00      	lsrs	r0, r0, #16
     e84:	b2c0      	uxtb	r0, r0
     e86:	4b31      	ldr	r3, [pc, #196]	; (f4c <spi_init+0x1c8>)
     e88:	4798      	blx	r3
     e8a:	e7eb      	b.n	e64 <spi_init+0xe0>
	module->mode             = config->mode;
     e8c:	7833      	ldrb	r3, [r6, #0]
     e8e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     e90:	7c33      	ldrb	r3, [r6, #16]
     e92:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     e94:	7cb3      	ldrb	r3, [r6, #18]
     e96:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     e98:	7d33      	ldrb	r3, [r6, #20]
     e9a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     e9c:	2200      	movs	r2, #0
     e9e:	ab02      	add	r3, sp, #8
     ea0:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     ea2:	7833      	ldrb	r3, [r6, #0]
     ea4:	2b01      	cmp	r3, #1
     ea6:	d028      	beq.n	efa <spi_init+0x176>
	ctrla |= config->transfer_mode;
     ea8:	6873      	ldr	r3, [r6, #4]
     eaa:	68b2      	ldr	r2, [r6, #8]
     eac:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
     eae:	68f2      	ldr	r2, [r6, #12]
     eb0:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
     eb2:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
     eb4:	7c72      	ldrb	r2, [r6, #17]
     eb6:	2a00      	cmp	r2, #0
     eb8:	d103      	bne.n	ec2 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     eba:	4a25      	ldr	r2, [pc, #148]	; (f50 <spi_init+0x1cc>)
     ebc:	7892      	ldrb	r2, [r2, #2]
     ebe:	0792      	lsls	r2, r2, #30
     ec0:	d501      	bpl.n	ec6 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ec2:	2280      	movs	r2, #128	; 0x80
     ec4:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
     ec6:	7cb2      	ldrb	r2, [r6, #18]
     ec8:	2a00      	cmp	r2, #0
     eca:	d002      	beq.n	ed2 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ecc:	2280      	movs	r2, #128	; 0x80
     ece:	0292      	lsls	r2, r2, #10
     ed0:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
     ed2:	7cf2      	ldrb	r2, [r6, #19]
     ed4:	2a00      	cmp	r2, #0
     ed6:	d002      	beq.n	ede <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ed8:	2280      	movs	r2, #128	; 0x80
     eda:	0092      	lsls	r2, r2, #2
     edc:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
     ede:	7d32      	ldrb	r2, [r6, #20]
     ee0:	2a00      	cmp	r2, #0
     ee2:	d002      	beq.n	eea <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ee4:	2280      	movs	r2, #128	; 0x80
     ee6:	0192      	lsls	r2, r2, #6
     ee8:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
     eea:	683a      	ldr	r2, [r7, #0]
     eec:	4313      	orrs	r3, r2
     eee:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     ef0:	687b      	ldr	r3, [r7, #4]
     ef2:	430b      	orrs	r3, r1
     ef4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
     ef6:	2000      	movs	r0, #0
     ef8:	e74e      	b.n	d98 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     efa:	6828      	ldr	r0, [r5, #0]
     efc:	4b0a      	ldr	r3, [pc, #40]	; (f28 <spi_init+0x1a4>)
     efe:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f00:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     f02:	b2c0      	uxtb	r0, r0
     f04:	4b13      	ldr	r3, [pc, #76]	; (f54 <spi_init+0x1d0>)
     f06:	4798      	blx	r3
     f08:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     f0a:	ab02      	add	r3, sp, #8
     f0c:	1d9a      	adds	r2, r3, #6
     f0e:	69b0      	ldr	r0, [r6, #24]
     f10:	4b11      	ldr	r3, [pc, #68]	; (f58 <spi_init+0x1d4>)
     f12:	4798      	blx	r3
     f14:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     f16:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     f18:	2b00      	cmp	r3, #0
     f1a:	d000      	beq.n	f1e <spi_init+0x19a>
     f1c:	e73c      	b.n	d98 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
     f1e:	ab02      	add	r3, sp, #8
     f20:	3306      	adds	r3, #6
     f22:	781b      	ldrb	r3, [r3, #0]
     f24:	733b      	strb	r3, [r7, #12]
     f26:	e7bf      	b.n	ea8 <spi_init+0x124>
     f28:	00000c7d 	.word	0x00000c7d
     f2c:	40000400 	.word	0x40000400
     f30:	00001c2d 	.word	0x00001c2d
     f34:	00001ba1 	.word	0x00001ba1
     f38:	00000ab9 	.word	0x00000ab9
     f3c:	0000111d 	.word	0x0000111d
     f40:	00000cb9 	.word	0x00000cb9
     f44:	20004138 	.word	0x20004138
     f48:	00000b05 	.word	0x00000b05
     f4c:	00001d25 	.word	0x00001d25
     f50:	41002000 	.word	0x41002000
     f54:	00001c49 	.word	0x00001c49
     f58:	000009fb 	.word	0x000009fb

00000f5c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     f5c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     f5e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     f60:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     f62:	2c01      	cmp	r4, #1
     f64:	d001      	beq.n	f6a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     f66:	0018      	movs	r0, r3
     f68:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     f6a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     f6c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     f6e:	2c00      	cmp	r4, #0
     f70:	d1f9      	bne.n	f66 <spi_select_slave+0xa>
		if (select) {
     f72:	2a00      	cmp	r2, #0
     f74:	d058      	beq.n	1028 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     f76:	784b      	ldrb	r3, [r1, #1]
     f78:	2b00      	cmp	r3, #0
     f7a:	d044      	beq.n	1006 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f7c:	6803      	ldr	r3, [r0, #0]
     f7e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     f80:	07db      	lsls	r3, r3, #31
     f82:	d410      	bmi.n	fa6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     f84:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     f86:	09d1      	lsrs	r1, r2, #7
		return NULL;
     f88:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     f8a:	2900      	cmp	r1, #0
     f8c:	d104      	bne.n	f98 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     f8e:	0953      	lsrs	r3, r2, #5
     f90:	01db      	lsls	r3, r3, #7
     f92:	492e      	ldr	r1, [pc, #184]	; (104c <spi_select_slave+0xf0>)
     f94:	468c      	mov	ip, r1
     f96:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f98:	211f      	movs	r1, #31
     f9a:	4011      	ands	r1, r2
     f9c:	2201      	movs	r2, #1
     f9e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     fa0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     fa2:	2305      	movs	r3, #5
     fa4:	e7df      	b.n	f66 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     fa6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     fa8:	09d4      	lsrs	r4, r2, #7
		return NULL;
     faa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     fac:	2c00      	cmp	r4, #0
     fae:	d104      	bne.n	fba <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     fb0:	0953      	lsrs	r3, r2, #5
     fb2:	01db      	lsls	r3, r3, #7
     fb4:	4c25      	ldr	r4, [pc, #148]	; (104c <spi_select_slave+0xf0>)
     fb6:	46a4      	mov	ip, r4
     fb8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     fba:	241f      	movs	r4, #31
     fbc:	4014      	ands	r4, r2
     fbe:	2201      	movs	r2, #1
     fc0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
     fc2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     fc4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fc6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     fc8:	07d2      	lsls	r2, r2, #31
     fca:	d501      	bpl.n	fd0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fcc:	788a      	ldrb	r2, [r1, #2]
     fce:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     fd0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     fd2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     fd4:	2a00      	cmp	r2, #0
     fd6:	d1c6      	bne.n	f66 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fd8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     fda:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fdc:	7e13      	ldrb	r3, [r2, #24]
     fde:	420b      	tst	r3, r1
     fe0:	d0fc      	beq.n	fdc <spi_select_slave+0x80>
     fe2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     fe4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     fe6:	0749      	lsls	r1, r1, #29
     fe8:	d5bd      	bpl.n	f66 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fea:	8b53      	ldrh	r3, [r2, #26]
     fec:	075b      	lsls	r3, r3, #29
     fee:	d501      	bpl.n	ff4 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     ff0:	2304      	movs	r3, #4
     ff2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ff4:	7983      	ldrb	r3, [r0, #6]
     ff6:	2b01      	cmp	r3, #1
     ff8:	d002      	beq.n	1000 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ffa:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ffc:	2300      	movs	r3, #0
     ffe:	e7b2      	b.n	f66 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1000:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1002:	2300      	movs	r3, #0
    1004:	e7af      	b.n	f66 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1006:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1008:	09d1      	lsrs	r1, r2, #7
		return NULL;
    100a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    100c:	2900      	cmp	r1, #0
    100e:	d104      	bne.n	101a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1010:	0953      	lsrs	r3, r2, #5
    1012:	01db      	lsls	r3, r3, #7
    1014:	490d      	ldr	r1, [pc, #52]	; (104c <spi_select_slave+0xf0>)
    1016:	468c      	mov	ip, r1
    1018:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    101a:	211f      	movs	r1, #31
    101c:	4011      	ands	r1, r2
    101e:	2201      	movs	r2, #1
    1020:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1022:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1024:	2300      	movs	r3, #0
    1026:	e79e      	b.n	f66 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1028:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    102a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    102c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    102e:	2900      	cmp	r1, #0
    1030:	d104      	bne.n	103c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1032:	0953      	lsrs	r3, r2, #5
    1034:	01db      	lsls	r3, r3, #7
    1036:	4905      	ldr	r1, [pc, #20]	; (104c <spi_select_slave+0xf0>)
    1038:	468c      	mov	ip, r1
    103a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    103c:	211f      	movs	r1, #31
    103e:	4011      	ands	r1, r2
    1040:	2201      	movs	r2, #1
    1042:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1044:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1046:	2300      	movs	r3, #0
    1048:	e78d      	b.n	f66 <spi_select_slave+0xa>
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	41004400 	.word	0x41004400

00001050 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1050:	b5f0      	push	{r4, r5, r6, r7, lr}
    1052:	46de      	mov	lr, fp
    1054:	4657      	mov	r7, sl
    1056:	464e      	mov	r6, r9
    1058:	4645      	mov	r5, r8
    105a:	b5e0      	push	{r5, r6, r7, lr}
    105c:	b083      	sub	sp, #12
    105e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1060:	2338      	movs	r3, #56	; 0x38
    1062:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1064:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1066:	2c05      	cmp	r4, #5
    1068:	d002      	beq.n	1070 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    106a:	3312      	adds	r3, #18
	if (length == 0) {
    106c:	2a00      	cmp	r2, #0
    106e:	d14b      	bne.n	1108 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    1070:	0018      	movs	r0, r3
    1072:	b003      	add	sp, #12
    1074:	bc3c      	pop	{r2, r3, r4, r5}
    1076:	4690      	mov	r8, r2
    1078:	4699      	mov	r9, r3
    107a:	46a2      	mov	sl, r4
    107c:	46ab      	mov	fp, r5
    107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    1080:	3702      	adds	r7, #2
    1082:	b2bf      	uxth	r7, r7
    1084:	4641      	mov	r1, r8
    1086:	4653      	mov	r3, sl
    1088:	5c59      	ldrb	r1, [r3, r1]
    108a:	0209      	lsls	r1, r1, #8
    108c:	465b      	mov	r3, fp
    108e:	430b      	orrs	r3, r1
    1090:	e018      	b.n	10c4 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1092:	7983      	ldrb	r3, [r0, #6]
    1094:	2b01      	cmp	r3, #1
    1096:	d02a      	beq.n	10ee <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1098:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    109a:	3e01      	subs	r6, #1
    109c:	b2b6      	uxth	r6, r6
    109e:	4566      	cmp	r6, ip
    10a0:	d027      	beq.n	10f2 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10a2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10a4:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    10a6:	4223      	tst	r3, r4
    10a8:	d0fc      	beq.n	10a4 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    10aa:	1c7b      	adds	r3, r7, #1
    10ac:	b29b      	uxth	r3, r3
    10ae:	4698      	mov	r8, r3
    10b0:	4653      	mov	r3, sl
    10b2:	5ddb      	ldrb	r3, [r3, r7]
    10b4:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10b6:	7981      	ldrb	r1, [r0, #6]
    10b8:	2901      	cmp	r1, #1
    10ba:	d0e1      	beq.n	1080 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    10bc:	4669      	mov	r1, sp
    10be:	80cb      	strh	r3, [r1, #6]
    10c0:	88cb      	ldrh	r3, [r1, #6]
    10c2:	4647      	mov	r7, r8
    10c4:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    10c6:	4221      	tst	r1, r4
    10c8:	d002      	beq.n	10d0 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    10ca:	05db      	lsls	r3, r3, #23
    10cc:	0ddb      	lsrs	r3, r3, #23
    10ce:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    10d0:	79c3      	ldrb	r3, [r0, #7]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d0e1      	beq.n	109a <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10d6:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10d8:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    10da:	422b      	tst	r3, r5
    10dc:	d0fc      	beq.n	10d8 <spi_write_buffer_wait+0x88>
    10de:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    10e0:	422b      	tst	r3, r5
    10e2:	d0da      	beq.n	109a <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    10e4:	8b53      	ldrh	r3, [r2, #26]
    10e6:	422b      	tst	r3, r5
    10e8:	d0d3      	beq.n	1092 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    10ea:	8355      	strh	r5, [r2, #26]
    10ec:	e7d1      	b.n	1092 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    10ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    10f0:	e7d3      	b.n	109a <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    10f2:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    10f4:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    10f6:	2a01      	cmp	r2, #1
    10f8:	d1ba      	bne.n	1070 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10fa:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    10fc:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10fe:	7e0b      	ldrb	r3, [r1, #24]
    1100:	4213      	tst	r3, r2
    1102:	d0fc      	beq.n	10fe <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    1104:	2300      	movs	r3, #0
    1106:	e7b3      	b.n	1070 <spi_write_buffer_wait+0x20>
	while (length--) {
    1108:	3a01      	subs	r2, #1
    110a:	b296      	uxth	r6, r2
    110c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    110e:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    1110:	2504      	movs	r5, #4
	while (length--) {
    1112:	4b01      	ldr	r3, [pc, #4]	; (1118 <spi_write_buffer_wait+0xc8>)
    1114:	469c      	mov	ip, r3
    1116:	e7c4      	b.n	10a2 <spi_write_buffer_wait+0x52>
    1118:	0000ffff 	.word	0x0000ffff

0000111c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    111e:	0080      	lsls	r0, r0, #2
    1120:	4b70      	ldr	r3, [pc, #448]	; (12e4 <_spi_interrupt_handler+0x1c8>)
    1122:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1124:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1126:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1128:	5ce7      	ldrb	r7, [r4, r3]
    112a:	2236      	movs	r2, #54	; 0x36
    112c:	5ca2      	ldrb	r2, [r4, r2]
    112e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1130:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1132:	7db5      	ldrb	r5, [r6, #22]
    1134:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1136:	07eb      	lsls	r3, r5, #31
    1138:	d502      	bpl.n	1140 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    113a:	7963      	ldrb	r3, [r4, #5]
    113c:	2b01      	cmp	r3, #1
    113e:	d01e      	beq.n	117e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1140:	076b      	lsls	r3, r5, #29
    1142:	d511      	bpl.n	1168 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1144:	8b73      	ldrh	r3, [r6, #26]
    1146:	075b      	lsls	r3, r3, #29
    1148:	d55a      	bpl.n	1200 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    114a:	7a63      	ldrb	r3, [r4, #9]
    114c:	2b01      	cmp	r3, #1
    114e:	d008      	beq.n	1162 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1150:	221e      	movs	r2, #30
    1152:	2338      	movs	r3, #56	; 0x38
    1154:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1156:	3b35      	subs	r3, #53	; 0x35
    1158:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    115a:	3302      	adds	r3, #2
    115c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    115e:	073b      	lsls	r3, r7, #28
    1160:	d44a      	bmi.n	11f8 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1162:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1164:	2304      	movs	r3, #4
    1166:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1168:	07ab      	lsls	r3, r5, #30
    116a:	d503      	bpl.n	1174 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    116c:	7963      	ldrb	r3, [r4, #5]
    116e:	2b01      	cmp	r3, #1
    1170:	d100      	bne.n	1174 <_spi_interrupt_handler+0x58>
    1172:	e097      	b.n	12a4 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1174:	b26d      	sxtb	r5, r5
    1176:	2d00      	cmp	r5, #0
    1178:	da00      	bge.n	117c <_spi_interrupt_handler+0x60>
    117a:	e0a9      	b.n	12d0 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    117c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    117e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1180:	2b00      	cmp	r3, #0
    1182:	d022      	beq.n	11ca <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    1184:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1186:	2b00      	cmp	r3, #0
    1188:	d0da      	beq.n	1140 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    118a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    118c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    118e:	7813      	ldrb	r3, [r2, #0]
    1190:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1192:	1c50      	adds	r0, r2, #1
    1194:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1196:	79a0      	ldrb	r0, [r4, #6]
    1198:	2801      	cmp	r0, #1
    119a:	d027      	beq.n	11ec <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    119c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    119e:	05db      	lsls	r3, r3, #23
    11a0:	0ddb      	lsrs	r3, r3, #23
    11a2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    11a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    11a6:	3b01      	subs	r3, #1
    11a8:	b29b      	uxth	r3, r3
    11aa:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    11ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    11ae:	b29b      	uxth	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d1c5      	bne.n	1140 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    11b4:	3301      	adds	r3, #1
    11b6:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    11b8:	7a63      	ldrb	r3, [r4, #9]
    11ba:	2b01      	cmp	r3, #1
    11bc:	d1c0      	bne.n	1140 <_spi_interrupt_handler+0x24>
    11be:	79e3      	ldrb	r3, [r4, #7]
    11c0:	2b00      	cmp	r3, #0
    11c2:	d1bd      	bne.n	1140 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    11c4:	3302      	adds	r3, #2
    11c6:	75b3      	strb	r3, [r6, #22]
    11c8:	e7ba      	b.n	1140 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    11ca:	4b47      	ldr	r3, [pc, #284]	; (12e8 <_spi_interrupt_handler+0x1cc>)
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    11d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    11d2:	3b01      	subs	r3, #1
    11d4:	b29b      	uxth	r3, r3
    11d6:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    11d8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    11da:	b29b      	uxth	r3, r3
    11dc:	2b00      	cmp	r3, #0
    11de:	d101      	bne.n	11e4 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    11e0:	3301      	adds	r3, #1
    11e2:	7533      	strb	r3, [r6, #20]
		if (0
    11e4:	7963      	ldrb	r3, [r4, #5]
    11e6:	2b01      	cmp	r3, #1
    11e8:	d0cc      	beq.n	1184 <_spi_interrupt_handler+0x68>
    11ea:	e7a9      	b.n	1140 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    11ec:	7850      	ldrb	r0, [r2, #1]
    11ee:	0200      	lsls	r0, r0, #8
    11f0:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    11f2:	3202      	adds	r2, #2
    11f4:	62e2      	str	r2, [r4, #44]	; 0x2c
    11f6:	e7d2      	b.n	119e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    11f8:	0020      	movs	r0, r4
    11fa:	69a3      	ldr	r3, [r4, #24]
    11fc:	4798      	blx	r3
    11fe:	e7b0      	b.n	1162 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1200:	7a63      	ldrb	r3, [r4, #9]
    1202:	2b01      	cmp	r3, #1
    1204:	d028      	beq.n	1258 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1206:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    120a:	05db      	lsls	r3, r3, #23
    120c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    120e:	b2da      	uxtb	r2, r3
    1210:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1212:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1214:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1216:	1c51      	adds	r1, r2, #1
    1218:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    121a:	79a1      	ldrb	r1, [r4, #6]
    121c:	2901      	cmp	r1, #1
    121e:	d034      	beq.n	128a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    1220:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1222:	3b01      	subs	r3, #1
    1224:	b29b      	uxth	r3, r3
    1226:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1228:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    122a:	b29b      	uxth	r3, r3
    122c:	2b00      	cmp	r3, #0
    122e:	d000      	beq.n	1232 <_spi_interrupt_handler+0x116>
    1230:	e79a      	b.n	1168 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    1232:	2200      	movs	r2, #0
    1234:	3338      	adds	r3, #56	; 0x38
    1236:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1238:	3b34      	subs	r3, #52	; 0x34
    123a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    123c:	7a63      	ldrb	r3, [r4, #9]
    123e:	2b02      	cmp	r3, #2
    1240:	d029      	beq.n	1296 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1242:	7a63      	ldrb	r3, [r4, #9]
    1244:	2b00      	cmp	r3, #0
    1246:	d000      	beq.n	124a <_spi_interrupt_handler+0x12e>
    1248:	e78e      	b.n	1168 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    124a:	07bb      	lsls	r3, r7, #30
    124c:	d400      	bmi.n	1250 <_spi_interrupt_handler+0x134>
    124e:	e78b      	b.n	1168 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1250:	0020      	movs	r0, r4
    1252:	6923      	ldr	r3, [r4, #16]
    1254:	4798      	blx	r3
    1256:	e787      	b.n	1168 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1258:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    125c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    125e:	3b01      	subs	r3, #1
    1260:	b29b      	uxth	r3, r3
    1262:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1264:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1266:	b29b      	uxth	r3, r3
    1268:	2b00      	cmp	r3, #0
    126a:	d000      	beq.n	126e <_spi_interrupt_handler+0x152>
    126c:	e77c      	b.n	1168 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    126e:	3304      	adds	r3, #4
    1270:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1272:	2200      	movs	r2, #0
    1274:	3334      	adds	r3, #52	; 0x34
    1276:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1278:	3b35      	subs	r3, #53	; 0x35
    127a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    127c:	07fb      	lsls	r3, r7, #31
    127e:	d400      	bmi.n	1282 <_spi_interrupt_handler+0x166>
    1280:	e772      	b.n	1168 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1282:	0020      	movs	r0, r4
    1284:	68e3      	ldr	r3, [r4, #12]
    1286:	4798      	blx	r3
    1288:	e76e      	b.n	1168 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    128a:	0a1b      	lsrs	r3, r3, #8
    128c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    128e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1290:	3301      	adds	r3, #1
    1292:	62a3      	str	r3, [r4, #40]	; 0x28
    1294:	e7c4      	b.n	1220 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1296:	077b      	lsls	r3, r7, #29
    1298:	d400      	bmi.n	129c <_spi_interrupt_handler+0x180>
    129a:	e765      	b.n	1168 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    129c:	0020      	movs	r0, r4
    129e:	6963      	ldr	r3, [r4, #20]
    12a0:	4798      	blx	r3
    12a2:	e761      	b.n	1168 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    12a4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    12a6:	2b01      	cmp	r3, #1
    12a8:	d000      	beq.n	12ac <_spi_interrupt_handler+0x190>
    12aa:	e763      	b.n	1174 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    12ac:	79e3      	ldrb	r3, [r4, #7]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d000      	beq.n	12b4 <_spi_interrupt_handler+0x198>
    12b2:	e75f      	b.n	1174 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12b4:	3302      	adds	r3, #2
    12b6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    12b8:	3301      	adds	r3, #1
    12ba:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    12bc:	2200      	movs	r2, #0
    12be:	3335      	adds	r3, #53	; 0x35
    12c0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    12c2:	07fb      	lsls	r3, r7, #31
    12c4:	d400      	bmi.n	12c8 <_spi_interrupt_handler+0x1ac>
    12c6:	e755      	b.n	1174 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    12c8:	0020      	movs	r0, r4
    12ca:	68e3      	ldr	r3, [r4, #12]
    12cc:	4798      	blx	r3
    12ce:	e751      	b.n	1174 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    12d0:	2380      	movs	r3, #128	; 0x80
    12d2:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    12d4:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    12d6:	067b      	lsls	r3, r7, #25
    12d8:	d400      	bmi.n	12dc <_spi_interrupt_handler+0x1c0>
    12da:	e74f      	b.n	117c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    12dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12de:	0020      	movs	r0, r4
    12e0:	4798      	blx	r3
}
    12e2:	e74b      	b.n	117c <_spi_interrupt_handler+0x60>
    12e4:	20004138 	.word	0x20004138
    12e8:	20004150 	.word	0x20004150

000012ec <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    12ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ee:	46de      	mov	lr, fp
    12f0:	4657      	mov	r7, sl
    12f2:	464e      	mov	r6, r9
    12f4:	4645      	mov	r5, r8
    12f6:	b5e0      	push	{r5, r6, r7, lr}
    12f8:	b091      	sub	sp, #68	; 0x44
    12fa:	0005      	movs	r5, r0
    12fc:	000c      	movs	r4, r1
    12fe:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1300:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1302:	0008      	movs	r0, r1
    1304:	4bbc      	ldr	r3, [pc, #752]	; (15f8 <usart_init+0x30c>)
    1306:	4798      	blx	r3
    1308:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    130a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    130c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    130e:	07db      	lsls	r3, r3, #31
    1310:	d506      	bpl.n	1320 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1312:	b011      	add	sp, #68	; 0x44
    1314:	bc3c      	pop	{r2, r3, r4, r5}
    1316:	4690      	mov	r8, r2
    1318:	4699      	mov	r9, r3
    131a:	46a2      	mov	sl, r4
    131c:	46ab      	mov	fp, r5
    131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1320:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1322:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1324:	079b      	lsls	r3, r3, #30
    1326:	d4f4      	bmi.n	1312 <usart_init+0x26>
    1328:	49b4      	ldr	r1, [pc, #720]	; (15fc <usart_init+0x310>)
    132a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    132c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    132e:	2301      	movs	r3, #1
    1330:	40bb      	lsls	r3, r7
    1332:	4303      	orrs	r3, r0
    1334:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1336:	a90f      	add	r1, sp, #60	; 0x3c
    1338:	272d      	movs	r7, #45	; 0x2d
    133a:	5df3      	ldrb	r3, [r6, r7]
    133c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    133e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1340:	b2d3      	uxtb	r3, r2
    1342:	9302      	str	r3, [sp, #8]
    1344:	0018      	movs	r0, r3
    1346:	4bae      	ldr	r3, [pc, #696]	; (1600 <usart_init+0x314>)
    1348:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    134a:	9802      	ldr	r0, [sp, #8]
    134c:	4bad      	ldr	r3, [pc, #692]	; (1604 <usart_init+0x318>)
    134e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1350:	5df0      	ldrb	r0, [r6, r7]
    1352:	2100      	movs	r1, #0
    1354:	4bac      	ldr	r3, [pc, #688]	; (1608 <usart_init+0x31c>)
    1356:	4798      	blx	r3
	module->character_size = config->character_size;
    1358:	7af3      	ldrb	r3, [r6, #11]
    135a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    135c:	2324      	movs	r3, #36	; 0x24
    135e:	5cf3      	ldrb	r3, [r6, r3]
    1360:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1362:	2325      	movs	r3, #37	; 0x25
    1364:	5cf3      	ldrb	r3, [r6, r3]
    1366:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1368:	7ef3      	ldrb	r3, [r6, #27]
    136a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    136c:	7f33      	ldrb	r3, [r6, #28]
    136e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1370:	682b      	ldr	r3, [r5, #0]
    1372:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1374:	0018      	movs	r0, r3
    1376:	4ba0      	ldr	r3, [pc, #640]	; (15f8 <usart_init+0x30c>)
    1378:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    137a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    137c:	2200      	movs	r2, #0
    137e:	230e      	movs	r3, #14
    1380:	a906      	add	r1, sp, #24
    1382:	468c      	mov	ip, r1
    1384:	4463      	add	r3, ip
    1386:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1388:	8a32      	ldrh	r2, [r6, #16]
    138a:	9202      	str	r2, [sp, #8]
    138c:	2380      	movs	r3, #128	; 0x80
    138e:	01db      	lsls	r3, r3, #7
    1390:	429a      	cmp	r2, r3
    1392:	d100      	bne.n	1396 <usart_init+0xaa>
    1394:	e09e      	b.n	14d4 <usart_init+0x1e8>
    1396:	d90f      	bls.n	13b8 <usart_init+0xcc>
    1398:	23c0      	movs	r3, #192	; 0xc0
    139a:	01db      	lsls	r3, r3, #7
    139c:	9a02      	ldr	r2, [sp, #8]
    139e:	429a      	cmp	r2, r3
    13a0:	d100      	bne.n	13a4 <usart_init+0xb8>
    13a2:	e092      	b.n	14ca <usart_init+0x1de>
    13a4:	2380      	movs	r3, #128	; 0x80
    13a6:	021b      	lsls	r3, r3, #8
    13a8:	429a      	cmp	r2, r3
    13aa:	d000      	beq.n	13ae <usart_init+0xc2>
    13ac:	e11f      	b.n	15ee <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    13ae:	2303      	movs	r3, #3
    13b0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13b2:	2300      	movs	r3, #0
    13b4:	9307      	str	r3, [sp, #28]
    13b6:	e008      	b.n	13ca <usart_init+0xde>
	switch (config->sample_rate) {
    13b8:	2380      	movs	r3, #128	; 0x80
    13ba:	019b      	lsls	r3, r3, #6
    13bc:	429a      	cmp	r2, r3
    13be:	d000      	beq.n	13c2 <usart_init+0xd6>
    13c0:	e115      	b.n	15ee <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13c2:	2310      	movs	r3, #16
    13c4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13c6:	3b0f      	subs	r3, #15
    13c8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    13ca:	6833      	ldr	r3, [r6, #0]
    13cc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    13ce:	68f3      	ldr	r3, [r6, #12]
    13d0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    13d2:	6973      	ldr	r3, [r6, #20]
    13d4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    13d6:	7e33      	ldrb	r3, [r6, #24]
    13d8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    13da:	2326      	movs	r3, #38	; 0x26
    13dc:	5cf3      	ldrb	r3, [r6, r3]
    13de:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    13e0:	6873      	ldr	r3, [r6, #4]
    13e2:	4699      	mov	r9, r3
	switch (transfer_mode)
    13e4:	2b00      	cmp	r3, #0
    13e6:	d100      	bne.n	13ea <usart_init+0xfe>
    13e8:	e0a0      	b.n	152c <usart_init+0x240>
    13ea:	2380      	movs	r3, #128	; 0x80
    13ec:	055b      	lsls	r3, r3, #21
    13ee:	4599      	cmp	r9, r3
    13f0:	d100      	bne.n	13f4 <usart_init+0x108>
    13f2:	e084      	b.n	14fe <usart_init+0x212>
	if(config->encoding_format_enable) {
    13f4:	7e73      	ldrb	r3, [r6, #25]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d002      	beq.n	1400 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    13fa:	7eb3      	ldrb	r3, [r6, #26]
    13fc:	4642      	mov	r2, r8
    13fe:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1400:	682a      	ldr	r2, [r5, #0]
    1402:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1404:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1406:	2b00      	cmp	r3, #0
    1408:	d1fc      	bne.n	1404 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    140a:	330e      	adds	r3, #14
    140c:	aa06      	add	r2, sp, #24
    140e:	4694      	mov	ip, r2
    1410:	4463      	add	r3, ip
    1412:	881b      	ldrh	r3, [r3, #0]
    1414:	4642      	mov	r2, r8
    1416:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1418:	9b05      	ldr	r3, [sp, #20]
    141a:	9a03      	ldr	r2, [sp, #12]
    141c:	4313      	orrs	r3, r2
    141e:	9a04      	ldr	r2, [sp, #16]
    1420:	4313      	orrs	r3, r2
    1422:	464a      	mov	r2, r9
    1424:	4313      	orrs	r3, r2
    1426:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1428:	465b      	mov	r3, fp
    142a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    142c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    142e:	4653      	mov	r3, sl
    1430:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1432:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1434:	2327      	movs	r3, #39	; 0x27
    1436:	5cf3      	ldrb	r3, [r6, r3]
    1438:	2b00      	cmp	r3, #0
    143a:	d101      	bne.n	1440 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    143c:	3304      	adds	r3, #4
    143e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1440:	7e73      	ldrb	r3, [r6, #25]
    1442:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1444:	7f32      	ldrb	r2, [r6, #28]
    1446:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1448:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    144a:	7f72      	ldrb	r2, [r6, #29]
    144c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    144e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1450:	2224      	movs	r2, #36	; 0x24
    1452:	5cb2      	ldrb	r2, [r6, r2]
    1454:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1456:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1458:	2225      	movs	r2, #37	; 0x25
    145a:	5cb2      	ldrb	r2, [r6, r2]
    145c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    145e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1460:	7ab1      	ldrb	r1, [r6, #10]
    1462:	7af2      	ldrb	r2, [r6, #11]
    1464:	4311      	orrs	r1, r2
    1466:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1468:	8933      	ldrh	r3, [r6, #8]
    146a:	2bff      	cmp	r3, #255	; 0xff
    146c:	d100      	bne.n	1470 <usart_init+0x184>
    146e:	e081      	b.n	1574 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1470:	2280      	movs	r2, #128	; 0x80
    1472:	0452      	lsls	r2, r2, #17
    1474:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1476:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1478:	232c      	movs	r3, #44	; 0x2c
    147a:	5cf3      	ldrb	r3, [r6, r3]
    147c:	2b00      	cmp	r3, #0
    147e:	d103      	bne.n	1488 <usart_init+0x19c>
    1480:	4b62      	ldr	r3, [pc, #392]	; (160c <usart_init+0x320>)
    1482:	789b      	ldrb	r3, [r3, #2]
    1484:	079b      	lsls	r3, r3, #30
    1486:	d501      	bpl.n	148c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1488:	2380      	movs	r3, #128	; 0x80
    148a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    148c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    148e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1490:	2b00      	cmp	r3, #0
    1492:	d1fc      	bne.n	148e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1494:	4643      	mov	r3, r8
    1496:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1498:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    149a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    149c:	2b00      	cmp	r3, #0
    149e:	d1fc      	bne.n	149a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    14a0:	4643      	mov	r3, r8
    14a2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14a4:	ab0e      	add	r3, sp, #56	; 0x38
    14a6:	2280      	movs	r2, #128	; 0x80
    14a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14aa:	2200      	movs	r2, #0
    14ac:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    14ae:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14b0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    14b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    14b4:	930a      	str	r3, [sp, #40]	; 0x28
    14b6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    14b8:	930b      	str	r3, [sp, #44]	; 0x2c
    14ba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    14bc:	930c      	str	r3, [sp, #48]	; 0x30
    14be:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    14c0:	9302      	str	r3, [sp, #8]
    14c2:	930d      	str	r3, [sp, #52]	; 0x34
    14c4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14c6:	ae0a      	add	r6, sp, #40	; 0x28
    14c8:	e063      	b.n	1592 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    14ca:	2308      	movs	r3, #8
    14cc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    14ce:	3b07      	subs	r3, #7
    14d0:	9307      	str	r3, [sp, #28]
    14d2:	e77a      	b.n	13ca <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    14d4:	6833      	ldr	r3, [r6, #0]
    14d6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    14d8:	68f3      	ldr	r3, [r6, #12]
    14da:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    14dc:	6973      	ldr	r3, [r6, #20]
    14de:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14e0:	7e33      	ldrb	r3, [r6, #24]
    14e2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14e4:	2326      	movs	r3, #38	; 0x26
    14e6:	5cf3      	ldrb	r3, [r6, r3]
    14e8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    14ea:	6873      	ldr	r3, [r6, #4]
    14ec:	4699      	mov	r9, r3
	switch (transfer_mode)
    14ee:	2b00      	cmp	r3, #0
    14f0:	d018      	beq.n	1524 <usart_init+0x238>
    14f2:	2380      	movs	r3, #128	; 0x80
    14f4:	055b      	lsls	r3, r3, #21
    14f6:	4599      	cmp	r9, r3
    14f8:	d001      	beq.n	14fe <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    14fa:	2000      	movs	r0, #0
    14fc:	e025      	b.n	154a <usart_init+0x25e>
			if (!config->use_external_clock) {
    14fe:	2327      	movs	r3, #39	; 0x27
    1500:	5cf3      	ldrb	r3, [r6, r3]
    1502:	2b00      	cmp	r3, #0
    1504:	d000      	beq.n	1508 <usart_init+0x21c>
    1506:	e775      	b.n	13f4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1508:	6a33      	ldr	r3, [r6, #32]
    150a:	001f      	movs	r7, r3
    150c:	b2c0      	uxtb	r0, r0
    150e:	4b40      	ldr	r3, [pc, #256]	; (1610 <usart_init+0x324>)
    1510:	4798      	blx	r3
    1512:	0001      	movs	r1, r0
    1514:	220e      	movs	r2, #14
    1516:	ab06      	add	r3, sp, #24
    1518:	469c      	mov	ip, r3
    151a:	4462      	add	r2, ip
    151c:	0038      	movs	r0, r7
    151e:	4b3d      	ldr	r3, [pc, #244]	; (1614 <usart_init+0x328>)
    1520:	4798      	blx	r3
    1522:	e012      	b.n	154a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1524:	2308      	movs	r3, #8
    1526:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1528:	2300      	movs	r3, #0
    152a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    152c:	2327      	movs	r3, #39	; 0x27
    152e:	5cf3      	ldrb	r3, [r6, r3]
    1530:	2b00      	cmp	r3, #0
    1532:	d00e      	beq.n	1552 <usart_init+0x266>
				status_code =
    1534:	9b06      	ldr	r3, [sp, #24]
    1536:	9300      	str	r3, [sp, #0]
    1538:	9b07      	ldr	r3, [sp, #28]
    153a:	220e      	movs	r2, #14
    153c:	a906      	add	r1, sp, #24
    153e:	468c      	mov	ip, r1
    1540:	4462      	add	r2, ip
    1542:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1544:	6a30      	ldr	r0, [r6, #32]
    1546:	4f34      	ldr	r7, [pc, #208]	; (1618 <usart_init+0x32c>)
    1548:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    154a:	2800      	cmp	r0, #0
    154c:	d000      	beq.n	1550 <usart_init+0x264>
    154e:	e6e0      	b.n	1312 <usart_init+0x26>
    1550:	e750      	b.n	13f4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1552:	6a33      	ldr	r3, [r6, #32]
    1554:	001f      	movs	r7, r3
    1556:	b2c0      	uxtb	r0, r0
    1558:	4b2d      	ldr	r3, [pc, #180]	; (1610 <usart_init+0x324>)
    155a:	4798      	blx	r3
    155c:	0001      	movs	r1, r0
				status_code =
    155e:	9b06      	ldr	r3, [sp, #24]
    1560:	9300      	str	r3, [sp, #0]
    1562:	9b07      	ldr	r3, [sp, #28]
    1564:	220e      	movs	r2, #14
    1566:	a806      	add	r0, sp, #24
    1568:	4684      	mov	ip, r0
    156a:	4462      	add	r2, ip
    156c:	0038      	movs	r0, r7
    156e:	4f2a      	ldr	r7, [pc, #168]	; (1618 <usart_init+0x32c>)
    1570:	47b8      	blx	r7
    1572:	e7ea      	b.n	154a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1574:	7ef3      	ldrb	r3, [r6, #27]
    1576:	2b00      	cmp	r3, #0
    1578:	d100      	bne.n	157c <usart_init+0x290>
    157a:	e77d      	b.n	1478 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    157c:	2380      	movs	r3, #128	; 0x80
    157e:	04db      	lsls	r3, r3, #19
    1580:	431f      	orrs	r7, r3
    1582:	e779      	b.n	1478 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1584:	0020      	movs	r0, r4
    1586:	4b25      	ldr	r3, [pc, #148]	; (161c <usart_init+0x330>)
    1588:	4798      	blx	r3
    158a:	e007      	b.n	159c <usart_init+0x2b0>
    158c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    158e:	2f04      	cmp	r7, #4
    1590:	d00d      	beq.n	15ae <usart_init+0x2c2>
    1592:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1594:	00bb      	lsls	r3, r7, #2
    1596:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1598:	2800      	cmp	r0, #0
    159a:	d0f3      	beq.n	1584 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    159c:	1c43      	adds	r3, r0, #1
    159e:	d0f5      	beq.n	158c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15a0:	a90e      	add	r1, sp, #56	; 0x38
    15a2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15a4:	0c00      	lsrs	r0, r0, #16
    15a6:	b2c0      	uxtb	r0, r0
    15a8:	4b1d      	ldr	r3, [pc, #116]	; (1620 <usart_init+0x334>)
    15aa:	4798      	blx	r3
    15ac:	e7ee      	b.n	158c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    15ae:	2300      	movs	r3, #0
    15b0:	60eb      	str	r3, [r5, #12]
    15b2:	612b      	str	r3, [r5, #16]
    15b4:	616b      	str	r3, [r5, #20]
    15b6:	61ab      	str	r3, [r5, #24]
    15b8:	61eb      	str	r3, [r5, #28]
    15ba:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    15bc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    15be:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    15c0:	2200      	movs	r2, #0
    15c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    15c4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    15c6:	3330      	adds	r3, #48	; 0x30
    15c8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    15ca:	3301      	adds	r3, #1
    15cc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    15ce:	3301      	adds	r3, #1
    15d0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    15d2:	3301      	adds	r3, #1
    15d4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    15d6:	6828      	ldr	r0, [r5, #0]
    15d8:	4b07      	ldr	r3, [pc, #28]	; (15f8 <usart_init+0x30c>)
    15da:	4798      	blx	r3
    15dc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    15de:	4911      	ldr	r1, [pc, #68]	; (1624 <usart_init+0x338>)
    15e0:	4b11      	ldr	r3, [pc, #68]	; (1628 <usart_init+0x33c>)
    15e2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    15e4:	00a4      	lsls	r4, r4, #2
    15e6:	4b11      	ldr	r3, [pc, #68]	; (162c <usart_init+0x340>)
    15e8:	50e5      	str	r5, [r4, r3]
	return status_code;
    15ea:	2000      	movs	r0, #0
    15ec:	e691      	b.n	1312 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    15ee:	2310      	movs	r3, #16
    15f0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15f2:	2300      	movs	r3, #0
    15f4:	9307      	str	r3, [sp, #28]
    15f6:	e6e8      	b.n	13ca <usart_init+0xde>
    15f8:	00000c7d 	.word	0x00000c7d
    15fc:	40000400 	.word	0x40000400
    1600:	00001c2d 	.word	0x00001c2d
    1604:	00001ba1 	.word	0x00001ba1
    1608:	00000ab9 	.word	0x00000ab9
    160c:	41002000 	.word	0x41002000
    1610:	00001c49 	.word	0x00001c49
    1614:	000009fb 	.word	0x000009fb
    1618:	00000a25 	.word	0x00000a25
    161c:	00000b05 	.word	0x00000b05
    1620:	00001d25 	.word	0x00001d25
    1624:	00001631 	.word	0x00001631
    1628:	00000cb9 	.word	0x00000cb9
    162c:	20004138 	.word	0x20004138

00001630 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1632:	0080      	lsls	r0, r0, #2
    1634:	4b62      	ldr	r3, [pc, #392]	; (17c0 <_usart_interrupt_handler+0x190>)
    1636:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1638:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    163a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    163c:	2b00      	cmp	r3, #0
    163e:	d1fc      	bne.n	163a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1640:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1642:	7da6      	ldrb	r6, [r4, #22]
    1644:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1646:	2330      	movs	r3, #48	; 0x30
    1648:	5ceb      	ldrb	r3, [r5, r3]
    164a:	2231      	movs	r2, #49	; 0x31
    164c:	5caf      	ldrb	r7, [r5, r2]
    164e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1650:	07f3      	lsls	r3, r6, #31
    1652:	d522      	bpl.n	169a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1654:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1656:	b29b      	uxth	r3, r3
    1658:	2b00      	cmp	r3, #0
    165a:	d01c      	beq.n	1696 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    165c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    165e:	7813      	ldrb	r3, [r2, #0]
    1660:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1662:	1c51      	adds	r1, r2, #1
    1664:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1666:	7969      	ldrb	r1, [r5, #5]
    1668:	2901      	cmp	r1, #1
    166a:	d00e      	beq.n	168a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    166c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    166e:	05db      	lsls	r3, r3, #23
    1670:	0ddb      	lsrs	r3, r3, #23
    1672:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1674:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1676:	3b01      	subs	r3, #1
    1678:	b29b      	uxth	r3, r3
    167a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    167c:	2b00      	cmp	r3, #0
    167e:	d10c      	bne.n	169a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1680:	3301      	adds	r3, #1
    1682:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1684:	3301      	adds	r3, #1
    1686:	75a3      	strb	r3, [r4, #22]
    1688:	e007      	b.n	169a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    168a:	7851      	ldrb	r1, [r2, #1]
    168c:	0209      	lsls	r1, r1, #8
    168e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1690:	3202      	adds	r2, #2
    1692:	62aa      	str	r2, [r5, #40]	; 0x28
    1694:	e7eb      	b.n	166e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1696:	2301      	movs	r3, #1
    1698:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    169a:	07b3      	lsls	r3, r6, #30
    169c:	d506      	bpl.n	16ac <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    169e:	2302      	movs	r3, #2
    16a0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    16a2:	2200      	movs	r2, #0
    16a4:	3331      	adds	r3, #49	; 0x31
    16a6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    16a8:	07fb      	lsls	r3, r7, #31
    16aa:	d41a      	bmi.n	16e2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    16ac:	0773      	lsls	r3, r6, #29
    16ae:	d565      	bpl.n	177c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    16b0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    16b2:	b29b      	uxth	r3, r3
    16b4:	2b00      	cmp	r3, #0
    16b6:	d05f      	beq.n	1778 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16b8:	8b63      	ldrh	r3, [r4, #26]
    16ba:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    16bc:	071a      	lsls	r2, r3, #28
    16be:	d414      	bmi.n	16ea <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16c0:	223f      	movs	r2, #63	; 0x3f
    16c2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    16c4:	2b00      	cmp	r3, #0
    16c6:	d034      	beq.n	1732 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    16c8:	079a      	lsls	r2, r3, #30
    16ca:	d511      	bpl.n	16f0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    16cc:	221a      	movs	r2, #26
    16ce:	2332      	movs	r3, #50	; 0x32
    16d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    16d2:	3b30      	subs	r3, #48	; 0x30
    16d4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    16d6:	077b      	lsls	r3, r7, #29
    16d8:	d550      	bpl.n	177c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    16da:	0028      	movs	r0, r5
    16dc:	696b      	ldr	r3, [r5, #20]
    16de:	4798      	blx	r3
    16e0:	e04c      	b.n	177c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    16e2:	0028      	movs	r0, r5
    16e4:	68eb      	ldr	r3, [r5, #12]
    16e6:	4798      	blx	r3
    16e8:	e7e0      	b.n	16ac <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    16ea:	2237      	movs	r2, #55	; 0x37
    16ec:	4013      	ands	r3, r2
    16ee:	e7e9      	b.n	16c4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16f0:	075a      	lsls	r2, r3, #29
    16f2:	d505      	bpl.n	1700 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    16f4:	221e      	movs	r2, #30
    16f6:	2332      	movs	r3, #50	; 0x32
    16f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    16fa:	3b2e      	subs	r3, #46	; 0x2e
    16fc:	8363      	strh	r3, [r4, #26]
    16fe:	e7ea      	b.n	16d6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1700:	07da      	lsls	r2, r3, #31
    1702:	d505      	bpl.n	1710 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1704:	2213      	movs	r2, #19
    1706:	2332      	movs	r3, #50	; 0x32
    1708:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    170a:	3b31      	subs	r3, #49	; 0x31
    170c:	8363      	strh	r3, [r4, #26]
    170e:	e7e2      	b.n	16d6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1710:	06da      	lsls	r2, r3, #27
    1712:	d505      	bpl.n	1720 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1714:	2242      	movs	r2, #66	; 0x42
    1716:	2332      	movs	r3, #50	; 0x32
    1718:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    171a:	3b22      	subs	r3, #34	; 0x22
    171c:	8363      	strh	r3, [r4, #26]
    171e:	e7da      	b.n	16d6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1720:	2220      	movs	r2, #32
    1722:	421a      	tst	r2, r3
    1724:	d0d7      	beq.n	16d6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1726:	3221      	adds	r2, #33	; 0x21
    1728:	2332      	movs	r3, #50	; 0x32
    172a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    172c:	3b12      	subs	r3, #18
    172e:	8363      	strh	r3, [r4, #26]
    1730:	e7d1      	b.n	16d6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1732:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1734:	05db      	lsls	r3, r3, #23
    1736:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1738:	b2da      	uxtb	r2, r3
    173a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    173c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    173e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1740:	1c51      	adds	r1, r2, #1
    1742:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1744:	7969      	ldrb	r1, [r5, #5]
    1746:	2901      	cmp	r1, #1
    1748:	d010      	beq.n	176c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    174a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    174c:	3b01      	subs	r3, #1
    174e:	b29b      	uxth	r3, r3
    1750:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1752:	2b00      	cmp	r3, #0
    1754:	d112      	bne.n	177c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1756:	3304      	adds	r3, #4
    1758:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    175a:	2200      	movs	r2, #0
    175c:	332e      	adds	r3, #46	; 0x2e
    175e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1760:	07bb      	lsls	r3, r7, #30
    1762:	d50b      	bpl.n	177c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1764:	0028      	movs	r0, r5
    1766:	692b      	ldr	r3, [r5, #16]
    1768:	4798      	blx	r3
    176a:	e007      	b.n	177c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    176c:	0a1b      	lsrs	r3, r3, #8
    176e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1770:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1772:	3301      	adds	r3, #1
    1774:	626b      	str	r3, [r5, #36]	; 0x24
    1776:	e7e8      	b.n	174a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1778:	2304      	movs	r3, #4
    177a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    177c:	06f3      	lsls	r3, r6, #27
    177e:	d504      	bpl.n	178a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1780:	2310      	movs	r3, #16
    1782:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1784:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1786:	06fb      	lsls	r3, r7, #27
    1788:	d40e      	bmi.n	17a8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    178a:	06b3      	lsls	r3, r6, #26
    178c:	d504      	bpl.n	1798 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    178e:	2320      	movs	r3, #32
    1790:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1792:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1794:	073b      	lsls	r3, r7, #28
    1796:	d40b      	bmi.n	17b0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1798:	0733      	lsls	r3, r6, #28
    179a:	d504      	bpl.n	17a6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    179c:	2308      	movs	r3, #8
    179e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    17a0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    17a2:	06bb      	lsls	r3, r7, #26
    17a4:	d408      	bmi.n	17b8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    17a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    17a8:	0028      	movs	r0, r5
    17aa:	69eb      	ldr	r3, [r5, #28]
    17ac:	4798      	blx	r3
    17ae:	e7ec      	b.n	178a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    17b0:	0028      	movs	r0, r5
    17b2:	69ab      	ldr	r3, [r5, #24]
    17b4:	4798      	blx	r3
    17b6:	e7ef      	b.n	1798 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    17b8:	6a2b      	ldr	r3, [r5, #32]
    17ba:	0028      	movs	r0, r5
    17bc:	4798      	blx	r3
}
    17be:	e7f2      	b.n	17a6 <_usart_interrupt_handler+0x176>
    17c0:	20004138 	.word	0x20004138

000017c4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    17c4:	b510      	push	{r4, lr}
	switch (clock_source) {
    17c6:	2808      	cmp	r0, #8
    17c8:	d803      	bhi.n	17d2 <system_clock_source_get_hz+0xe>
    17ca:	0080      	lsls	r0, r0, #2
    17cc:	4b1c      	ldr	r3, [pc, #112]	; (1840 <system_clock_source_get_hz+0x7c>)
    17ce:	581b      	ldr	r3, [r3, r0]
    17d0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    17d2:	2000      	movs	r0, #0
    17d4:	e032      	b.n	183c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    17d6:	4b1b      	ldr	r3, [pc, #108]	; (1844 <system_clock_source_get_hz+0x80>)
    17d8:	6918      	ldr	r0, [r3, #16]
    17da:	e02f      	b.n	183c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    17dc:	4b1a      	ldr	r3, [pc, #104]	; (1848 <system_clock_source_get_hz+0x84>)
    17de:	6a1b      	ldr	r3, [r3, #32]
    17e0:	059b      	lsls	r3, r3, #22
    17e2:	0f9b      	lsrs	r3, r3, #30
    17e4:	4819      	ldr	r0, [pc, #100]	; (184c <system_clock_source_get_hz+0x88>)
    17e6:	40d8      	lsrs	r0, r3
    17e8:	e028      	b.n	183c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    17ea:	4b16      	ldr	r3, [pc, #88]	; (1844 <system_clock_source_get_hz+0x80>)
    17ec:	6958      	ldr	r0, [r3, #20]
    17ee:	e025      	b.n	183c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    17f0:	4b14      	ldr	r3, [pc, #80]	; (1844 <system_clock_source_get_hz+0x80>)
    17f2:	681b      	ldr	r3, [r3, #0]
			return 0;
    17f4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    17f6:	079b      	lsls	r3, r3, #30
    17f8:	d520      	bpl.n	183c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    17fa:	4913      	ldr	r1, [pc, #76]	; (1848 <system_clock_source_get_hz+0x84>)
    17fc:	2210      	movs	r2, #16
    17fe:	68cb      	ldr	r3, [r1, #12]
    1800:	421a      	tst	r2, r3
    1802:	d0fc      	beq.n	17fe <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1804:	4b0f      	ldr	r3, [pc, #60]	; (1844 <system_clock_source_get_hz+0x80>)
    1806:	681a      	ldr	r2, [r3, #0]
    1808:	2324      	movs	r3, #36	; 0x24
    180a:	4013      	ands	r3, r2
    180c:	2b04      	cmp	r3, #4
    180e:	d001      	beq.n	1814 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1810:	480f      	ldr	r0, [pc, #60]	; (1850 <system_clock_source_get_hz+0x8c>)
    1812:	e013      	b.n	183c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1814:	2000      	movs	r0, #0
    1816:	4b0f      	ldr	r3, [pc, #60]	; (1854 <system_clock_source_get_hz+0x90>)
    1818:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    181a:	4b0a      	ldr	r3, [pc, #40]	; (1844 <system_clock_source_get_hz+0x80>)
    181c:	689b      	ldr	r3, [r3, #8]
    181e:	041b      	lsls	r3, r3, #16
    1820:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1822:	4358      	muls	r0, r3
    1824:	e00a      	b.n	183c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1826:	2350      	movs	r3, #80	; 0x50
    1828:	4a07      	ldr	r2, [pc, #28]	; (1848 <system_clock_source_get_hz+0x84>)
    182a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    182c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    182e:	075b      	lsls	r3, r3, #29
    1830:	d504      	bpl.n	183c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1832:	4b04      	ldr	r3, [pc, #16]	; (1844 <system_clock_source_get_hz+0x80>)
    1834:	68d8      	ldr	r0, [r3, #12]
    1836:	e001      	b.n	183c <system_clock_source_get_hz+0x78>
		return 32768UL;
    1838:	2080      	movs	r0, #128	; 0x80
    183a:	0200      	lsls	r0, r0, #8
	}
}
    183c:	bd10      	pop	{r4, pc}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	00004408 	.word	0x00004408
    1844:	20000460 	.word	0x20000460
    1848:	40000800 	.word	0x40000800
    184c:	007a1200 	.word	0x007a1200
    1850:	02dc6c00 	.word	0x02dc6c00
    1854:	00001c49 	.word	0x00001c49

00001858 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1858:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    185a:	490c      	ldr	r1, [pc, #48]	; (188c <system_clock_source_osc8m_set_config+0x34>)
    185c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    185e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1860:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1862:	7840      	ldrb	r0, [r0, #1]
    1864:	2201      	movs	r2, #1
    1866:	4010      	ands	r0, r2
    1868:	0180      	lsls	r0, r0, #6
    186a:	2640      	movs	r6, #64	; 0x40
    186c:	43b3      	bics	r3, r6
    186e:	4303      	orrs	r3, r0
    1870:	402a      	ands	r2, r5
    1872:	01d2      	lsls	r2, r2, #7
    1874:	2080      	movs	r0, #128	; 0x80
    1876:	4383      	bics	r3, r0
    1878:	4313      	orrs	r3, r2
    187a:	2203      	movs	r2, #3
    187c:	4022      	ands	r2, r4
    187e:	0212      	lsls	r2, r2, #8
    1880:	4803      	ldr	r0, [pc, #12]	; (1890 <system_clock_source_osc8m_set_config+0x38>)
    1882:	4003      	ands	r3, r0
    1884:	4313      	orrs	r3, r2
    1886:	620b      	str	r3, [r1, #32]
}
    1888:	bd70      	pop	{r4, r5, r6, pc}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	40000800 	.word	0x40000800
    1890:	fffffcff 	.word	0xfffffcff

00001894 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1894:	2808      	cmp	r0, #8
    1896:	d803      	bhi.n	18a0 <system_clock_source_enable+0xc>
    1898:	0080      	lsls	r0, r0, #2
    189a:	4b25      	ldr	r3, [pc, #148]	; (1930 <system_clock_source_enable+0x9c>)
    189c:	581b      	ldr	r3, [r3, r0]
    189e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    18a0:	2017      	movs	r0, #23
    18a2:	e044      	b.n	192e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    18a4:	4a23      	ldr	r2, [pc, #140]	; (1934 <system_clock_source_enable+0xa0>)
    18a6:	6a13      	ldr	r3, [r2, #32]
    18a8:	2102      	movs	r1, #2
    18aa:	430b      	orrs	r3, r1
    18ac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    18ae:	2000      	movs	r0, #0
    18b0:	e03d      	b.n	192e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18b2:	4a20      	ldr	r2, [pc, #128]	; (1934 <system_clock_source_enable+0xa0>)
    18b4:	6993      	ldr	r3, [r2, #24]
    18b6:	2102      	movs	r1, #2
    18b8:	430b      	orrs	r3, r1
    18ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    18bc:	2000      	movs	r0, #0
		break;
    18be:	e036      	b.n	192e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    18c0:	4a1c      	ldr	r2, [pc, #112]	; (1934 <system_clock_source_enable+0xa0>)
    18c2:	8a13      	ldrh	r3, [r2, #16]
    18c4:	2102      	movs	r1, #2
    18c6:	430b      	orrs	r3, r1
    18c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    18ca:	2000      	movs	r0, #0
		break;
    18cc:	e02f      	b.n	192e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    18ce:	4a19      	ldr	r2, [pc, #100]	; (1934 <system_clock_source_enable+0xa0>)
    18d0:	8a93      	ldrh	r3, [r2, #20]
    18d2:	2102      	movs	r1, #2
    18d4:	430b      	orrs	r3, r1
    18d6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    18d8:	2000      	movs	r0, #0
		break;
    18da:	e028      	b.n	192e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    18dc:	4916      	ldr	r1, [pc, #88]	; (1938 <system_clock_source_enable+0xa4>)
    18de:	680b      	ldr	r3, [r1, #0]
    18e0:	2202      	movs	r2, #2
    18e2:	4313      	orrs	r3, r2
    18e4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    18e6:	4b13      	ldr	r3, [pc, #76]	; (1934 <system_clock_source_enable+0xa0>)
    18e8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    18ea:	0019      	movs	r1, r3
    18ec:	320e      	adds	r2, #14
    18ee:	68cb      	ldr	r3, [r1, #12]
    18f0:	421a      	tst	r2, r3
    18f2:	d0fc      	beq.n	18ee <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    18f4:	4a10      	ldr	r2, [pc, #64]	; (1938 <system_clock_source_enable+0xa4>)
    18f6:	6891      	ldr	r1, [r2, #8]
    18f8:	4b0e      	ldr	r3, [pc, #56]	; (1934 <system_clock_source_enable+0xa0>)
    18fa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    18fc:	6852      	ldr	r2, [r2, #4]
    18fe:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1900:	2200      	movs	r2, #0
    1902:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1904:	0019      	movs	r1, r3
    1906:	3210      	adds	r2, #16
    1908:	68cb      	ldr	r3, [r1, #12]
    190a:	421a      	tst	r2, r3
    190c:	d0fc      	beq.n	1908 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    190e:	4b0a      	ldr	r3, [pc, #40]	; (1938 <system_clock_source_enable+0xa4>)
    1910:	681b      	ldr	r3, [r3, #0]
    1912:	b29b      	uxth	r3, r3
    1914:	4a07      	ldr	r2, [pc, #28]	; (1934 <system_clock_source_enable+0xa0>)
    1916:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1918:	2000      	movs	r0, #0
    191a:	e008      	b.n	192e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    191c:	4905      	ldr	r1, [pc, #20]	; (1934 <system_clock_source_enable+0xa0>)
    191e:	2244      	movs	r2, #68	; 0x44
    1920:	5c8b      	ldrb	r3, [r1, r2]
    1922:	2002      	movs	r0, #2
    1924:	4303      	orrs	r3, r0
    1926:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1928:	2000      	movs	r0, #0
		break;
    192a:	e000      	b.n	192e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    192c:	2000      	movs	r0, #0
}
    192e:	4770      	bx	lr
    1930:	0000442c 	.word	0x0000442c
    1934:	40000800 	.word	0x40000800
    1938:	20000460 	.word	0x20000460

0000193c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    193c:	b5f0      	push	{r4, r5, r6, r7, lr}
    193e:	46c6      	mov	lr, r8
    1940:	b500      	push	{lr}
    1942:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1944:	22c2      	movs	r2, #194	; 0xc2
    1946:	00d2      	lsls	r2, r2, #3
    1948:	4b21      	ldr	r3, [pc, #132]	; (19d0 <system_clock_init+0x94>)
    194a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    194c:	4a21      	ldr	r2, [pc, #132]	; (19d4 <system_clock_init+0x98>)
    194e:	6853      	ldr	r3, [r2, #4]
    1950:	211e      	movs	r1, #30
    1952:	438b      	bics	r3, r1
    1954:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1956:	2301      	movs	r3, #1
    1958:	466a      	mov	r2, sp
    195a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    195c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    195e:	4d1e      	ldr	r5, [pc, #120]	; (19d8 <system_clock_init+0x9c>)
    1960:	b2e0      	uxtb	r0, r4
    1962:	4669      	mov	r1, sp
    1964:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1966:	3401      	adds	r4, #1
    1968:	2c25      	cmp	r4, #37	; 0x25
    196a:	d1f9      	bne.n	1960 <system_clock_init+0x24>
	config->run_in_standby  = false;
    196c:	a803      	add	r0, sp, #12
    196e:	2400      	movs	r4, #0
    1970:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1972:	2301      	movs	r3, #1
    1974:	4698      	mov	r8, r3
    1976:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1978:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    197a:	4b18      	ldr	r3, [pc, #96]	; (19dc <system_clock_init+0xa0>)
    197c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    197e:	2006      	movs	r0, #6
    1980:	4b17      	ldr	r3, [pc, #92]	; (19e0 <system_clock_init+0xa4>)
    1982:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1984:	4b17      	ldr	r3, [pc, #92]	; (19e4 <system_clock_init+0xa8>)
    1986:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1988:	466b      	mov	r3, sp
    198a:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    198c:	2706      	movs	r7, #6
    198e:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    1990:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1992:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1994:	2310      	movs	r3, #16
    1996:	9301      	str	r3, [sp, #4]
    1998:	4669      	mov	r1, sp
    199a:	2003      	movs	r0, #3
    199c:	4e12      	ldr	r6, [pc, #72]	; (19e8 <system_clock_init+0xac>)
    199e:	47b0      	blx	r6
    19a0:	2003      	movs	r0, #3
    19a2:	4d12      	ldr	r5, [pc, #72]	; (19ec <system_clock_init+0xb0>)
    19a4:	47a8      	blx	r5
	PM->CPUSEL.reg = (uint32_t)divider;
    19a6:	4b12      	ldr	r3, [pc, #72]	; (19f0 <system_clock_init+0xb4>)
    19a8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    19aa:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    19ac:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    19ae:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    19b0:	4643      	mov	r3, r8
    19b2:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    19b4:	466b      	mov	r3, sp
    19b6:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    19b8:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
    19ba:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    19bc:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19be:	4669      	mov	r1, sp
    19c0:	2000      	movs	r0, #0
    19c2:	47b0      	blx	r6
    19c4:	2000      	movs	r0, #0
    19c6:	47a8      	blx	r5
#endif
}
    19c8:	b004      	add	sp, #16
    19ca:	bc04      	pop	{r2}
    19cc:	4690      	mov	r8, r2
    19ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19d0:	40000800 	.word	0x40000800
    19d4:	41004000 	.word	0x41004000
    19d8:	00001c2d 	.word	0x00001c2d
    19dc:	00001859 	.word	0x00001859
    19e0:	00001895 	.word	0x00001895
    19e4:	000019f5 	.word	0x000019f5
    19e8:	00001a19 	.word	0x00001a19
    19ec:	00001ad1 	.word	0x00001ad1
    19f0:	40000400 	.word	0x40000400

000019f4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    19f4:	4a06      	ldr	r2, [pc, #24]	; (1a10 <system_gclk_init+0x1c>)
    19f6:	6993      	ldr	r3, [r2, #24]
    19f8:	2108      	movs	r1, #8
    19fa:	430b      	orrs	r3, r1
    19fc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    19fe:	2201      	movs	r2, #1
    1a00:	4b04      	ldr	r3, [pc, #16]	; (1a14 <system_gclk_init+0x20>)
    1a02:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a04:	0019      	movs	r1, r3
    1a06:	780b      	ldrb	r3, [r1, #0]
    1a08:	4213      	tst	r3, r2
    1a0a:	d1fc      	bne.n	1a06 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a0c:	4770      	bx	lr
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	40000400 	.word	0x40000400
    1a14:	40000c00 	.word	0x40000c00

00001a18 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a18:	b570      	push	{r4, r5, r6, lr}
    1a1a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a1c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a1e:	780d      	ldrb	r5, [r1, #0]
    1a20:	022d      	lsls	r5, r5, #8
    1a22:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a24:	784b      	ldrb	r3, [r1, #1]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d002      	beq.n	1a30 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a2a:	2380      	movs	r3, #128	; 0x80
    1a2c:	02db      	lsls	r3, r3, #11
    1a2e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a30:	7a4b      	ldrb	r3, [r1, #9]
    1a32:	2b00      	cmp	r3, #0
    1a34:	d002      	beq.n	1a3c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a36:	2380      	movs	r3, #128	; 0x80
    1a38:	031b      	lsls	r3, r3, #12
    1a3a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a3c:	6848      	ldr	r0, [r1, #4]
    1a3e:	2801      	cmp	r0, #1
    1a40:	d910      	bls.n	1a64 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a42:	1e43      	subs	r3, r0, #1
    1a44:	4218      	tst	r0, r3
    1a46:	d134      	bne.n	1ab2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a48:	2802      	cmp	r0, #2
    1a4a:	d930      	bls.n	1aae <system_gclk_gen_set_config+0x96>
    1a4c:	2302      	movs	r3, #2
    1a4e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a50:	3201      	adds	r2, #1
						mask <<= 1) {
    1a52:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1a54:	4298      	cmp	r0, r3
    1a56:	d8fb      	bhi.n	1a50 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a58:	0212      	lsls	r2, r2, #8
    1a5a:	4332      	orrs	r2, r6
    1a5c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a5e:	2380      	movs	r3, #128	; 0x80
    1a60:	035b      	lsls	r3, r3, #13
    1a62:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a64:	7a0b      	ldrb	r3, [r1, #8]
    1a66:	2b00      	cmp	r3, #0
    1a68:	d002      	beq.n	1a70 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a6a:	2380      	movs	r3, #128	; 0x80
    1a6c:	039b      	lsls	r3, r3, #14
    1a6e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a70:	4a13      	ldr	r2, [pc, #76]	; (1ac0 <system_gclk_gen_set_config+0xa8>)
    1a72:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1a74:	b25b      	sxtb	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	dbfb      	blt.n	1a72 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1a7a:	4b12      	ldr	r3, [pc, #72]	; (1ac4 <system_gclk_gen_set_config+0xac>)
    1a7c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a7e:	4b12      	ldr	r3, [pc, #72]	; (1ac8 <system_gclk_gen_set_config+0xb0>)
    1a80:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a82:	4a0f      	ldr	r2, [pc, #60]	; (1ac0 <system_gclk_gen_set_config+0xa8>)
    1a84:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a86:	b25b      	sxtb	r3, r3
    1a88:	2b00      	cmp	r3, #0
    1a8a:	dbfb      	blt.n	1a84 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1a8c:	4b0c      	ldr	r3, [pc, #48]	; (1ac0 <system_gclk_gen_set_config+0xa8>)
    1a8e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a90:	001a      	movs	r2, r3
    1a92:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1a94:	b25b      	sxtb	r3, r3
    1a96:	2b00      	cmp	r3, #0
    1a98:	dbfb      	blt.n	1a92 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1a9a:	4a09      	ldr	r2, [pc, #36]	; (1ac0 <system_gclk_gen_set_config+0xa8>)
    1a9c:	6853      	ldr	r3, [r2, #4]
    1a9e:	2180      	movs	r1, #128	; 0x80
    1aa0:	0249      	lsls	r1, r1, #9
    1aa2:	400b      	ands	r3, r1
    1aa4:	431d      	orrs	r5, r3
    1aa6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1aa8:	4b08      	ldr	r3, [pc, #32]	; (1acc <system_gclk_gen_set_config+0xb4>)
    1aaa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1aac:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1aae:	2200      	movs	r2, #0
    1ab0:	e7d2      	b.n	1a58 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ab2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1ab4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1ab6:	2380      	movs	r3, #128	; 0x80
    1ab8:	029b      	lsls	r3, r3, #10
    1aba:	431d      	orrs	r5, r3
    1abc:	e7d2      	b.n	1a64 <system_gclk_gen_set_config+0x4c>
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	40000c00 	.word	0x40000c00
    1ac4:	00000875 	.word	0x00000875
    1ac8:	40000c08 	.word	0x40000c08
    1acc:	000008b5 	.word	0x000008b5

00001ad0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ad0:	b510      	push	{r4, lr}
    1ad2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ad4:	4a0b      	ldr	r2, [pc, #44]	; (1b04 <system_gclk_gen_enable+0x34>)
    1ad6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ad8:	b25b      	sxtb	r3, r3
    1ada:	2b00      	cmp	r3, #0
    1adc:	dbfb      	blt.n	1ad6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1ade:	4b0a      	ldr	r3, [pc, #40]	; (1b08 <system_gclk_gen_enable+0x38>)
    1ae0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ae2:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <system_gclk_gen_enable+0x3c>)
    1ae4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ae6:	4a07      	ldr	r2, [pc, #28]	; (1b04 <system_gclk_gen_enable+0x34>)
    1ae8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1aea:	b25b      	sxtb	r3, r3
    1aec:	2b00      	cmp	r3, #0
    1aee:	dbfb      	blt.n	1ae8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1af0:	4a04      	ldr	r2, [pc, #16]	; (1b04 <system_gclk_gen_enable+0x34>)
    1af2:	6851      	ldr	r1, [r2, #4]
    1af4:	2380      	movs	r3, #128	; 0x80
    1af6:	025b      	lsls	r3, r3, #9
    1af8:	430b      	orrs	r3, r1
    1afa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1afc:	4b04      	ldr	r3, [pc, #16]	; (1b10 <system_gclk_gen_enable+0x40>)
    1afe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b00:	bd10      	pop	{r4, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	40000c00 	.word	0x40000c00
    1b08:	00000875 	.word	0x00000875
    1b0c:	40000c04 	.word	0x40000c04
    1b10:	000008b5 	.word	0x000008b5

00001b14 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b18:	4a1a      	ldr	r2, [pc, #104]	; (1b84 <system_gclk_gen_get_hz+0x70>)
    1b1a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b1c:	b25b      	sxtb	r3, r3
    1b1e:	2b00      	cmp	r3, #0
    1b20:	dbfb      	blt.n	1b1a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b22:	4b19      	ldr	r3, [pc, #100]	; (1b88 <system_gclk_gen_get_hz+0x74>)
    1b24:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b26:	4b19      	ldr	r3, [pc, #100]	; (1b8c <system_gclk_gen_get_hz+0x78>)
    1b28:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b2a:	4a16      	ldr	r2, [pc, #88]	; (1b84 <system_gclk_gen_get_hz+0x70>)
    1b2c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b2e:	b25b      	sxtb	r3, r3
    1b30:	2b00      	cmp	r3, #0
    1b32:	dbfb      	blt.n	1b2c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b34:	4e13      	ldr	r6, [pc, #76]	; (1b84 <system_gclk_gen_get_hz+0x70>)
    1b36:	6870      	ldr	r0, [r6, #4]
    1b38:	04c0      	lsls	r0, r0, #19
    1b3a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b3c:	4b14      	ldr	r3, [pc, #80]	; (1b90 <system_gclk_gen_get_hz+0x7c>)
    1b3e:	4798      	blx	r3
    1b40:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b42:	4b12      	ldr	r3, [pc, #72]	; (1b8c <system_gclk_gen_get_hz+0x78>)
    1b44:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b46:	6876      	ldr	r6, [r6, #4]
    1b48:	02f6      	lsls	r6, r6, #11
    1b4a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b4c:	4b11      	ldr	r3, [pc, #68]	; (1b94 <system_gclk_gen_get_hz+0x80>)
    1b4e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b50:	4a0c      	ldr	r2, [pc, #48]	; (1b84 <system_gclk_gen_get_hz+0x70>)
    1b52:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b54:	b25b      	sxtb	r3, r3
    1b56:	2b00      	cmp	r3, #0
    1b58:	dbfb      	blt.n	1b52 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b5a:	4b0a      	ldr	r3, [pc, #40]	; (1b84 <system_gclk_gen_get_hz+0x70>)
    1b5c:	689c      	ldr	r4, [r3, #8]
    1b5e:	0224      	lsls	r4, r4, #8
    1b60:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1b62:	4b0d      	ldr	r3, [pc, #52]	; (1b98 <system_gclk_gen_get_hz+0x84>)
    1b64:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b66:	2e00      	cmp	r6, #0
    1b68:	d107      	bne.n	1b7a <system_gclk_gen_get_hz+0x66>
    1b6a:	2c01      	cmp	r4, #1
    1b6c:	d907      	bls.n	1b7e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1b6e:	0021      	movs	r1, r4
    1b70:	0028      	movs	r0, r5
    1b72:	4b0a      	ldr	r3, [pc, #40]	; (1b9c <system_gclk_gen_get_hz+0x88>)
    1b74:	4798      	blx	r3
    1b76:	0005      	movs	r5, r0
    1b78:	e001      	b.n	1b7e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1b7a:	3401      	adds	r4, #1
    1b7c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1b7e:	0028      	movs	r0, r5
    1b80:	bd70      	pop	{r4, r5, r6, pc}
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	40000c00 	.word	0x40000c00
    1b88:	00000875 	.word	0x00000875
    1b8c:	40000c04 	.word	0x40000c04
    1b90:	000017c5 	.word	0x000017c5
    1b94:	40000c08 	.word	0x40000c08
    1b98:	000008b5 	.word	0x000008b5
    1b9c:	00003f85 	.word	0x00003f85

00001ba0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1ba0:	b510      	push	{r4, lr}
    1ba2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ba4:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <system_gclk_chan_enable+0x20>)
    1ba6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ba8:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <system_gclk_chan_enable+0x24>)
    1baa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1bac:	4a06      	ldr	r2, [pc, #24]	; (1bc8 <system_gclk_chan_enable+0x28>)
    1bae:	8853      	ldrh	r3, [r2, #2]
    1bb0:	2180      	movs	r1, #128	; 0x80
    1bb2:	01c9      	lsls	r1, r1, #7
    1bb4:	430b      	orrs	r3, r1
    1bb6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1bb8:	4b04      	ldr	r3, [pc, #16]	; (1bcc <system_gclk_chan_enable+0x2c>)
    1bba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bbc:	bd10      	pop	{r4, pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	00000875 	.word	0x00000875
    1bc4:	40000c02 	.word	0x40000c02
    1bc8:	40000c00 	.word	0x40000c00
    1bcc:	000008b5 	.word	0x000008b5

00001bd0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1bd0:	b510      	push	{r4, lr}
    1bd2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1bd4:	4b0f      	ldr	r3, [pc, #60]	; (1c14 <system_gclk_chan_disable+0x44>)
    1bd6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bd8:	4b0f      	ldr	r3, [pc, #60]	; (1c18 <system_gclk_chan_disable+0x48>)
    1bda:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1bdc:	4a0f      	ldr	r2, [pc, #60]	; (1c1c <system_gclk_chan_disable+0x4c>)
    1bde:	8853      	ldrh	r3, [r2, #2]
    1be0:	051b      	lsls	r3, r3, #20
    1be2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1be4:	8853      	ldrh	r3, [r2, #2]
    1be6:	490e      	ldr	r1, [pc, #56]	; (1c20 <system_gclk_chan_disable+0x50>)
    1be8:	400b      	ands	r3, r1
    1bea:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1bec:	8853      	ldrh	r3, [r2, #2]
    1bee:	490d      	ldr	r1, [pc, #52]	; (1c24 <system_gclk_chan_disable+0x54>)
    1bf0:	400b      	ands	r3, r1
    1bf2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1bf4:	0011      	movs	r1, r2
    1bf6:	2280      	movs	r2, #128	; 0x80
    1bf8:	01d2      	lsls	r2, r2, #7
    1bfa:	884b      	ldrh	r3, [r1, #2]
    1bfc:	4213      	tst	r3, r2
    1bfe:	d1fc      	bne.n	1bfa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c00:	4906      	ldr	r1, [pc, #24]	; (1c1c <system_gclk_chan_disable+0x4c>)
    1c02:	884a      	ldrh	r2, [r1, #2]
    1c04:	0203      	lsls	r3, r0, #8
    1c06:	4806      	ldr	r0, [pc, #24]	; (1c20 <system_gclk_chan_disable+0x50>)
    1c08:	4002      	ands	r2, r0
    1c0a:	4313      	orrs	r3, r2
    1c0c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c0e:	4b06      	ldr	r3, [pc, #24]	; (1c28 <system_gclk_chan_disable+0x58>)
    1c10:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c12:	bd10      	pop	{r4, pc}
    1c14:	00000875 	.word	0x00000875
    1c18:	40000c02 	.word	0x40000c02
    1c1c:	40000c00 	.word	0x40000c00
    1c20:	fffff0ff 	.word	0xfffff0ff
    1c24:	ffffbfff 	.word	0xffffbfff
    1c28:	000008b5 	.word	0x000008b5

00001c2c <system_gclk_chan_set_config>:
{
    1c2c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c2e:	780c      	ldrb	r4, [r1, #0]
    1c30:	0224      	lsls	r4, r4, #8
    1c32:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c34:	4b02      	ldr	r3, [pc, #8]	; (1c40 <system_gclk_chan_set_config+0x14>)
    1c36:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c38:	b2a4      	uxth	r4, r4
    1c3a:	4b02      	ldr	r3, [pc, #8]	; (1c44 <system_gclk_chan_set_config+0x18>)
    1c3c:	805c      	strh	r4, [r3, #2]
}
    1c3e:	bd10      	pop	{r4, pc}
    1c40:	00001bd1 	.word	0x00001bd1
    1c44:	40000c00 	.word	0x40000c00

00001c48 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c48:	b510      	push	{r4, lr}
    1c4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c4c:	4b06      	ldr	r3, [pc, #24]	; (1c68 <system_gclk_chan_get_hz+0x20>)
    1c4e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c50:	4b06      	ldr	r3, [pc, #24]	; (1c6c <system_gclk_chan_get_hz+0x24>)
    1c52:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c54:	4b06      	ldr	r3, [pc, #24]	; (1c70 <system_gclk_chan_get_hz+0x28>)
    1c56:	885c      	ldrh	r4, [r3, #2]
    1c58:	0524      	lsls	r4, r4, #20
    1c5a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1c5c:	4b05      	ldr	r3, [pc, #20]	; (1c74 <system_gclk_chan_get_hz+0x2c>)
    1c5e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c60:	0020      	movs	r0, r4
    1c62:	4b05      	ldr	r3, [pc, #20]	; (1c78 <system_gclk_chan_get_hz+0x30>)
    1c64:	4798      	blx	r3
}
    1c66:	bd10      	pop	{r4, pc}
    1c68:	00000875 	.word	0x00000875
    1c6c:	40000c02 	.word	0x40000c02
    1c70:	40000c00 	.word	0x40000c00
    1c74:	000008b5 	.word	0x000008b5
    1c78:	00001b15 	.word	0x00001b15

00001c7c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c7c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c7e:	78d3      	ldrb	r3, [r2, #3]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d135      	bne.n	1cf0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1c84:	7813      	ldrb	r3, [r2, #0]
    1c86:	2b80      	cmp	r3, #128	; 0x80
    1c88:	d029      	beq.n	1cde <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1c8a:	061b      	lsls	r3, r3, #24
    1c8c:	2480      	movs	r4, #128	; 0x80
    1c8e:	0264      	lsls	r4, r4, #9
    1c90:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1c92:	7854      	ldrb	r4, [r2, #1]
    1c94:	2502      	movs	r5, #2
    1c96:	43ac      	bics	r4, r5
    1c98:	d106      	bne.n	1ca8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1c9a:	7894      	ldrb	r4, [r2, #2]
    1c9c:	2c00      	cmp	r4, #0
    1c9e:	d120      	bne.n	1ce2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ca0:	2480      	movs	r4, #128	; 0x80
    1ca2:	02a4      	lsls	r4, r4, #10
    1ca4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ca6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ca8:	7854      	ldrb	r4, [r2, #1]
    1caa:	3c01      	subs	r4, #1
    1cac:	2c01      	cmp	r4, #1
    1cae:	d91c      	bls.n	1cea <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1cb0:	040d      	lsls	r5, r1, #16
    1cb2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cb4:	24a0      	movs	r4, #160	; 0xa0
    1cb6:	05e4      	lsls	r4, r4, #23
    1cb8:	432c      	orrs	r4, r5
    1cba:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cbc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cbe:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cc0:	24d0      	movs	r4, #208	; 0xd0
    1cc2:	0624      	lsls	r4, r4, #24
    1cc4:	432c      	orrs	r4, r5
    1cc6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cc8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1cca:	78d4      	ldrb	r4, [r2, #3]
    1ccc:	2c00      	cmp	r4, #0
    1cce:	d122      	bne.n	1d16 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1cd0:	035b      	lsls	r3, r3, #13
    1cd2:	d51c      	bpl.n	1d0e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1cd4:	7893      	ldrb	r3, [r2, #2]
    1cd6:	2b01      	cmp	r3, #1
    1cd8:	d01e      	beq.n	1d18 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1cda:	6141      	str	r1, [r0, #20]
    1cdc:	e017      	b.n	1d0e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1cde:	2300      	movs	r3, #0
    1ce0:	e7d7      	b.n	1c92 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ce2:	24c0      	movs	r4, #192	; 0xc0
    1ce4:	02e4      	lsls	r4, r4, #11
    1ce6:	4323      	orrs	r3, r4
    1ce8:	e7dd      	b.n	1ca6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1cea:	4c0d      	ldr	r4, [pc, #52]	; (1d20 <_system_pinmux_config+0xa4>)
    1cec:	4023      	ands	r3, r4
    1cee:	e7df      	b.n	1cb0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1cf0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1cf2:	040c      	lsls	r4, r1, #16
    1cf4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cf6:	23a0      	movs	r3, #160	; 0xa0
    1cf8:	05db      	lsls	r3, r3, #23
    1cfa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cfc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cfe:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d00:	23d0      	movs	r3, #208	; 0xd0
    1d02:	061b      	lsls	r3, r3, #24
    1d04:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d06:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1d08:	78d3      	ldrb	r3, [r2, #3]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d103      	bne.n	1d16 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d0e:	7853      	ldrb	r3, [r2, #1]
    1d10:	3b01      	subs	r3, #1
    1d12:	2b01      	cmp	r3, #1
    1d14:	d902      	bls.n	1d1c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d16:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d18:	6181      	str	r1, [r0, #24]
    1d1a:	e7f8      	b.n	1d0e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d1c:	6081      	str	r1, [r0, #8]
}
    1d1e:	e7fa      	b.n	1d16 <_system_pinmux_config+0x9a>
    1d20:	fffbffff 	.word	0xfffbffff

00001d24 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d24:	b510      	push	{r4, lr}
    1d26:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1d28:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1d2a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d2c:	2900      	cmp	r1, #0
    1d2e:	d104      	bne.n	1d3a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d30:	0943      	lsrs	r3, r0, #5
    1d32:	01db      	lsls	r3, r3, #7
    1d34:	4905      	ldr	r1, [pc, #20]	; (1d4c <system_pinmux_pin_set_config+0x28>)
    1d36:	468c      	mov	ip, r1
    1d38:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d3a:	241f      	movs	r4, #31
    1d3c:	4020      	ands	r0, r4
    1d3e:	2101      	movs	r1, #1
    1d40:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d42:	0018      	movs	r0, r3
    1d44:	4b02      	ldr	r3, [pc, #8]	; (1d50 <system_pinmux_pin_set_config+0x2c>)
    1d46:	4798      	blx	r3
}
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	41004400 	.word	0x41004400
    1d50:	00001c7d 	.word	0x00001c7d

00001d54 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d54:	4770      	bx	lr
	...

00001d58 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d58:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d5a:	4b05      	ldr	r3, [pc, #20]	; (1d70 <system_init+0x18>)
    1d5c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <system_init+0x1c>)
    1d60:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d62:	4b05      	ldr	r3, [pc, #20]	; (1d78 <system_init+0x20>)
    1d64:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d66:	4b05      	ldr	r3, [pc, #20]	; (1d7c <system_init+0x24>)
    1d68:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d6a:	4b05      	ldr	r3, [pc, #20]	; (1d80 <system_init+0x28>)
    1d6c:	4798      	blx	r3
}
    1d6e:	bd10      	pop	{r4, pc}
    1d70:	0000193d 	.word	0x0000193d
    1d74:	000008e5 	.word	0x000008e5
    1d78:	00001d55 	.word	0x00001d55
    1d7c:	00001d55 	.word	0x00001d55
    1d80:	00001d55 	.word	0x00001d55

00001d84 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1d84:	e7fe      	b.n	1d84 <Dummy_Handler>
	...

00001d88 <Reset_Handler>:
{
    1d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1d8a:	4a2a      	ldr	r2, [pc, #168]	; (1e34 <Reset_Handler+0xac>)
    1d8c:	4b2a      	ldr	r3, [pc, #168]	; (1e38 <Reset_Handler+0xb0>)
    1d8e:	429a      	cmp	r2, r3
    1d90:	d011      	beq.n	1db6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1d92:	001a      	movs	r2, r3
    1d94:	4b29      	ldr	r3, [pc, #164]	; (1e3c <Reset_Handler+0xb4>)
    1d96:	429a      	cmp	r2, r3
    1d98:	d20d      	bcs.n	1db6 <Reset_Handler+0x2e>
    1d9a:	4a29      	ldr	r2, [pc, #164]	; (1e40 <Reset_Handler+0xb8>)
    1d9c:	3303      	adds	r3, #3
    1d9e:	1a9b      	subs	r3, r3, r2
    1da0:	089b      	lsrs	r3, r3, #2
    1da2:	3301      	adds	r3, #1
    1da4:	009b      	lsls	r3, r3, #2
    1da6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1da8:	4823      	ldr	r0, [pc, #140]	; (1e38 <Reset_Handler+0xb0>)
    1daa:	4922      	ldr	r1, [pc, #136]	; (1e34 <Reset_Handler+0xac>)
    1dac:	588c      	ldr	r4, [r1, r2]
    1dae:	5084      	str	r4, [r0, r2]
    1db0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1db2:	429a      	cmp	r2, r3
    1db4:	d1fa      	bne.n	1dac <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1db6:	4a23      	ldr	r2, [pc, #140]	; (1e44 <Reset_Handler+0xbc>)
    1db8:	4b23      	ldr	r3, [pc, #140]	; (1e48 <Reset_Handler+0xc0>)
    1dba:	429a      	cmp	r2, r3
    1dbc:	d20a      	bcs.n	1dd4 <Reset_Handler+0x4c>
    1dbe:	43d3      	mvns	r3, r2
    1dc0:	4921      	ldr	r1, [pc, #132]	; (1e48 <Reset_Handler+0xc0>)
    1dc2:	185b      	adds	r3, r3, r1
    1dc4:	2103      	movs	r1, #3
    1dc6:	438b      	bics	r3, r1
    1dc8:	3304      	adds	r3, #4
    1dca:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1dcc:	2100      	movs	r1, #0
    1dce:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1dd0:	4293      	cmp	r3, r2
    1dd2:	d1fc      	bne.n	1dce <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1dd4:	4a1d      	ldr	r2, [pc, #116]	; (1e4c <Reset_Handler+0xc4>)
    1dd6:	21ff      	movs	r1, #255	; 0xff
    1dd8:	4b1d      	ldr	r3, [pc, #116]	; (1e50 <Reset_Handler+0xc8>)
    1dda:	438b      	bics	r3, r1
    1ddc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1dde:	39fd      	subs	r1, #253	; 0xfd
    1de0:	2390      	movs	r3, #144	; 0x90
    1de2:	005b      	lsls	r3, r3, #1
    1de4:	4a1b      	ldr	r2, [pc, #108]	; (1e54 <Reset_Handler+0xcc>)
    1de6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1de8:	4a1b      	ldr	r2, [pc, #108]	; (1e58 <Reset_Handler+0xd0>)
    1dea:	78d3      	ldrb	r3, [r2, #3]
    1dec:	2503      	movs	r5, #3
    1dee:	43ab      	bics	r3, r5
    1df0:	2402      	movs	r4, #2
    1df2:	4323      	orrs	r3, r4
    1df4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1df6:	78d3      	ldrb	r3, [r2, #3]
    1df8:	270c      	movs	r7, #12
    1dfa:	43bb      	bics	r3, r7
    1dfc:	2608      	movs	r6, #8
    1dfe:	4333      	orrs	r3, r6
    1e00:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e02:	4b16      	ldr	r3, [pc, #88]	; (1e5c <Reset_Handler+0xd4>)
    1e04:	7b98      	ldrb	r0, [r3, #14]
    1e06:	2230      	movs	r2, #48	; 0x30
    1e08:	4390      	bics	r0, r2
    1e0a:	2220      	movs	r2, #32
    1e0c:	4310      	orrs	r0, r2
    1e0e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e10:	7b99      	ldrb	r1, [r3, #14]
    1e12:	43b9      	bics	r1, r7
    1e14:	4331      	orrs	r1, r6
    1e16:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e18:	7b9a      	ldrb	r2, [r3, #14]
    1e1a:	43aa      	bics	r2, r5
    1e1c:	4322      	orrs	r2, r4
    1e1e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e20:	4a0f      	ldr	r2, [pc, #60]	; (1e60 <Reset_Handler+0xd8>)
    1e22:	6853      	ldr	r3, [r2, #4]
    1e24:	2180      	movs	r1, #128	; 0x80
    1e26:	430b      	orrs	r3, r1
    1e28:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e2a:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <Reset_Handler+0xdc>)
    1e2c:	4798      	blx	r3
        main();
    1e2e:	4b0e      	ldr	r3, [pc, #56]	; (1e68 <Reset_Handler+0xe0>)
    1e30:	4798      	blx	r3
    1e32:	e7fe      	b.n	1e32 <Reset_Handler+0xaa>
    1e34:	0000457c 	.word	0x0000457c
    1e38:	20000000 	.word	0x20000000
    1e3c:	2000001c 	.word	0x2000001c
    1e40:	20000004 	.word	0x20000004
    1e44:	2000001c 	.word	0x2000001c
    1e48:	20004154 	.word	0x20004154
    1e4c:	e000ed00 	.word	0xe000ed00
    1e50:	00000000 	.word	0x00000000
    1e54:	41007000 	.word	0x41007000
    1e58:	41005000 	.word	0x41005000
    1e5c:	41004800 	.word	0x41004800
    1e60:	41004000 	.word	0x41004000
    1e64:	000040f1 	.word	0x000040f1
    1e68:	00003f61 	.word	0x00003f61

00001e6c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e6c:	0003      	movs	r3, r0
    1e6e:	3308      	adds	r3, #8
    1e70:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1e72:	2201      	movs	r2, #1
    1e74:	4252      	negs	r2, r2
    1e76:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e78:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e7a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1e7c:	2300      	movs	r3, #0
    1e7e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1e80:	4770      	bx	lr

00001e82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1e82:	2300      	movs	r3, #0
    1e84:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1e86:	4770      	bx	lr

00001e88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1e88:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1e8a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1e8c:	689a      	ldr	r2, [r3, #8]
    1e8e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1e90:	689a      	ldr	r2, [r3, #8]
    1e92:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1e94:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1e96:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1e98:	6803      	ldr	r3, [r0, #0]
    1e9a:	3301      	adds	r3, #1
    1e9c:	6003      	str	r3, [r0, #0]
}
    1e9e:	4770      	bx	lr

00001ea0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ea0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1ea2:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ea4:	0002      	movs	r2, r0
    1ea6:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    1ea8:	1c63      	adds	r3, r4, #1
    1eaa:	d102      	bne.n	1eb2 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    1eac:	6902      	ldr	r2, [r0, #16]
    1eae:	e004      	b.n	1eba <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1eb0:	001a      	movs	r2, r3
    1eb2:	6853      	ldr	r3, [r2, #4]
    1eb4:	681d      	ldr	r5, [r3, #0]
    1eb6:	42ac      	cmp	r4, r5
    1eb8:	d2fa      	bcs.n	1eb0 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1eba:	6853      	ldr	r3, [r2, #4]
    1ebc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1ebe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1ec0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    1ec2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1ec4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1ec6:	6803      	ldr	r3, [r0, #0]
    1ec8:	3301      	adds	r3, #1
    1eca:	6003      	str	r3, [r0, #0]
}
    1ecc:	bd30      	pop	{r4, r5, pc}

00001ece <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1ece:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1ed0:	6842      	ldr	r2, [r0, #4]
    1ed2:	6881      	ldr	r1, [r0, #8]
    1ed4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1ed6:	6882      	ldr	r2, [r0, #8]
    1ed8:	6841      	ldr	r1, [r0, #4]
    1eda:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1edc:	685a      	ldr	r2, [r3, #4]
    1ede:	4290      	cmp	r0, r2
    1ee0:	d006      	beq.n	1ef0 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1ee2:	2200      	movs	r2, #0
    1ee4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1ee6:	681a      	ldr	r2, [r3, #0]
    1ee8:	3a01      	subs	r2, #1
    1eea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1eec:	6818      	ldr	r0, [r3, #0]
}
    1eee:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1ef0:	6882      	ldr	r2, [r0, #8]
    1ef2:	605a      	str	r2, [r3, #4]
    1ef4:	e7f5      	b.n	1ee2 <uxListRemove+0x14>
	...

00001ef8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    1ef8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    1efa:	2300      	movs	r3, #0
    1efc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1efe:	4b06      	ldr	r3, [pc, #24]	; (1f18 <prvTaskExitError+0x20>)
    1f00:	681b      	ldr	r3, [r3, #0]
    1f02:	3301      	adds	r3, #1
    1f04:	d001      	beq.n	1f0a <prvTaskExitError+0x12>
    1f06:	b672      	cpsid	i
    1f08:	e7fe      	b.n	1f08 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    1f0a:	b672      	cpsid	i
	while( ulDummy == 0 )
    1f0c:	9b01      	ldr	r3, [sp, #4]
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d0fc      	beq.n	1f0c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1f12:	b002      	add	sp, #8
    1f14:	4770      	bx	lr
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	20000018 	.word	0x20000018
    1f1c:	00000000 	.word	0x00000000

00001f20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1f20:	4a0b      	ldr	r2, [pc, #44]	; (1f50 <pxCurrentTCBConst2>)
    1f22:	6813      	ldr	r3, [r2, #0]
    1f24:	6818      	ldr	r0, [r3, #0]
    1f26:	3020      	adds	r0, #32
    1f28:	f380 8809 	msr	PSP, r0
    1f2c:	2002      	movs	r0, #2
    1f2e:	f380 8814 	msr	CONTROL, r0
    1f32:	f3bf 8f6f 	isb	sy
    1f36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1f38:	46ae      	mov	lr, r5
    1f3a:	bc08      	pop	{r3}
    1f3c:	bc04      	pop	{r2}
    1f3e:	b662      	cpsie	i
    1f40:	4718      	bx	r3
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	46c0      	nop			; (mov r8, r8)
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	46c0      	nop			; (mov r8, r8)
    1f4e:	46c0      	nop			; (mov r8, r8)

00001f50 <pxCurrentTCBConst2>:
    1f50:	20003f18 	.word	0x20003f18

00001f54 <pxPortInitialiseStack>:
{
    1f54:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1f56:	1f03      	subs	r3, r0, #4
    1f58:	2480      	movs	r4, #128	; 0x80
    1f5a:	0464      	lsls	r4, r4, #17
    1f5c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1f5e:	3b04      	subs	r3, #4
    1f60:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1f62:	3b04      	subs	r3, #4
    1f64:	4902      	ldr	r1, [pc, #8]	; (1f70 <pxPortInitialiseStack+0x1c>)
    1f66:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1f68:	3b14      	subs	r3, #20
    1f6a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    1f6c:	3840      	subs	r0, #64	; 0x40
}
    1f6e:	bd10      	pop	{r4, pc}
    1f70:	00001ef9 	.word	0x00001ef9

00001f74 <SVC_Handler>:
}
    1f74:	4770      	bx	lr
	...

00001f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1f78:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1f7a:	4b12      	ldr	r3, [pc, #72]	; (1fc4 <xPortStartScheduler+0x4c>)
    1f7c:	6819      	ldr	r1, [r3, #0]
    1f7e:	22ff      	movs	r2, #255	; 0xff
    1f80:	0412      	lsls	r2, r2, #16
    1f82:	430a      	orrs	r2, r1
    1f84:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1f86:	6819      	ldr	r1, [r3, #0]
    1f88:	22ff      	movs	r2, #255	; 0xff
    1f8a:	0612      	lsls	r2, r2, #24
    1f8c:	430a      	orrs	r2, r1
    1f8e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    1f90:	4d0d      	ldr	r5, [pc, #52]	; (1fc8 <xPortStartScheduler+0x50>)
    1f92:	2400      	movs	r4, #0
    1f94:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    1f96:	4b0d      	ldr	r3, [pc, #52]	; (1fcc <xPortStartScheduler+0x54>)
    1f98:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1f9a:	2000      	movs	r0, #0
    1f9c:	4b0c      	ldr	r3, [pc, #48]	; (1fd0 <xPortStartScheduler+0x58>)
    1f9e:	4798      	blx	r3
    1fa0:	21c8      	movs	r1, #200	; 0xc8
    1fa2:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <xPortStartScheduler+0x5c>)
    1fa4:	4798      	blx	r3
    1fa6:	3801      	subs	r0, #1
    1fa8:	4b0b      	ldr	r3, [pc, #44]	; (1fd8 <xPortStartScheduler+0x60>)
    1faa:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1fac:	2307      	movs	r3, #7
    1fae:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    1fb0:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <xPortStartScheduler+0x64>)
    1fb2:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    1fb4:	4b0a      	ldr	r3, [pc, #40]	; (1fe0 <xPortStartScheduler+0x68>)
    1fb6:	4798      	blx	r3
	vTaskSwitchContext();
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <xPortStartScheduler+0x6c>)
    1fba:	4798      	blx	r3
	prvTaskExitError();
    1fbc:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <xPortStartScheduler+0x70>)
    1fbe:	4798      	blx	r3
}
    1fc0:	2000      	movs	r0, #0
    1fc2:	bd70      	pop	{r4, r5, r6, pc}
    1fc4:	e000ed20 	.word	0xe000ed20
    1fc8:	e000e010 	.word	0xe000e010
    1fcc:	e000e018 	.word	0xe000e018
    1fd0:	00001b15 	.word	0x00001b15
    1fd4:	00003f85 	.word	0x00003f85
    1fd8:	e000e014 	.word	0xe000e014
    1fdc:	20000018 	.word	0x20000018
    1fe0:	00001f21 	.word	0x00001f21
    1fe4:	00003059 	.word	0x00003059
    1fe8:	00001ef9 	.word	0x00001ef9

00001fec <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1fec:	2280      	movs	r2, #128	; 0x80
    1fee:	0552      	lsls	r2, r2, #21
    1ff0:	4b03      	ldr	r3, [pc, #12]	; (2000 <STACK_SIZE>)
    1ff2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    1ff4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1ff8:	f3bf 8f6f 	isb	sy
}
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	e000ed04 	.word	0xe000ed04

00002004 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    2004:	b672      	cpsid	i
    uxCriticalNesting++;
    2006:	4a04      	ldr	r2, [pc, #16]	; (2018 <vPortEnterCritical+0x14>)
    2008:	6813      	ldr	r3, [r2, #0]
    200a:	3301      	adds	r3, #1
    200c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    200e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2012:	f3bf 8f6f 	isb	sy
}
    2016:	4770      	bx	lr
    2018:	20000018 	.word	0x20000018

0000201c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    201c:	4b06      	ldr	r3, [pc, #24]	; (2038 <vPortExitCritical+0x1c>)
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	2b00      	cmp	r3, #0
    2022:	d101      	bne.n	2028 <vPortExitCritical+0xc>
    2024:	b672      	cpsid	i
    2026:	e7fe      	b.n	2026 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    2028:	3b01      	subs	r3, #1
    202a:	4a03      	ldr	r2, [pc, #12]	; (2038 <vPortExitCritical+0x1c>)
    202c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    202e:	2b00      	cmp	r3, #0
    2030:	d100      	bne.n	2034 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    2032:	b662      	cpsie	i
}
    2034:	4770      	bx	lr
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	20000018 	.word	0x20000018

0000203c <ulSetInterruptMaskFromISR>:
	__asm volatile(
    203c:	f3ef 8010 	mrs	r0, PRIMASK
    2040:	b672      	cpsid	i
    2042:	4770      	bx	lr

00002044 <vClearInterruptMaskFromISR>:
	__asm volatile(
    2044:	f380 8810 	msr	PRIMASK, r0
    2048:	4770      	bx	lr
    204a:	0000      	movs	r0, r0
    204c:	0000      	movs	r0, r0
	...

00002050 <PendSV_Handler>:
	__asm volatile
    2050:	f3ef 8009 	mrs	r0, PSP
    2054:	4b0e      	ldr	r3, [pc, #56]	; (2090 <pxCurrentTCBConst>)
    2056:	681a      	ldr	r2, [r3, #0]
    2058:	3820      	subs	r0, #32
    205a:	6010      	str	r0, [r2, #0]
    205c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    205e:	4644      	mov	r4, r8
    2060:	464d      	mov	r5, r9
    2062:	4656      	mov	r6, sl
    2064:	465f      	mov	r7, fp
    2066:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2068:	b508      	push	{r3, lr}
    206a:	b672      	cpsid	i
    206c:	f000 fff4 	bl	3058 <vTaskSwitchContext>
    2070:	b662      	cpsie	i
    2072:	bc0c      	pop	{r2, r3}
    2074:	6811      	ldr	r1, [r2, #0]
    2076:	6808      	ldr	r0, [r1, #0]
    2078:	3010      	adds	r0, #16
    207a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    207c:	46a0      	mov	r8, r4
    207e:	46a9      	mov	r9, r5
    2080:	46b2      	mov	sl, r6
    2082:	46bb      	mov	fp, r7
    2084:	f380 8809 	msr	PSP, r0
    2088:	3820      	subs	r0, #32
    208a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    208c:	4718      	bx	r3
    208e:	46c0      	nop			; (mov r8, r8)

00002090 <pxCurrentTCBConst>:
    2090:	20003f18 	.word	0x20003f18

00002094 <SysTick_Handler>:
{
    2094:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2096:	4b07      	ldr	r3, [pc, #28]	; (20b4 <SysTick_Handler+0x20>)
    2098:	4798      	blx	r3
    209a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    209c:	4b06      	ldr	r3, [pc, #24]	; (20b8 <SysTick_Handler+0x24>)
    209e:	4798      	blx	r3
    20a0:	2800      	cmp	r0, #0
    20a2:	d003      	beq.n	20ac <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    20a4:	2280      	movs	r2, #128	; 0x80
    20a6:	0552      	lsls	r2, r2, #21
    20a8:	4b04      	ldr	r3, [pc, #16]	; (20bc <SysTick_Handler+0x28>)
    20aa:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    20ac:	0020      	movs	r0, r4
    20ae:	4b04      	ldr	r3, [pc, #16]	; (20c0 <SysTick_Handler+0x2c>)
    20b0:	4798      	blx	r3
}
    20b2:	bd10      	pop	{r4, pc}
    20b4:	0000203d 	.word	0x0000203d
    20b8:	00002df9 	.word	0x00002df9
    20bc:	e000ed04 	.word	0xe000ed04
    20c0:	00002045 	.word	0x00002045

000020c4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    20c4:	b570      	push	{r4, r5, r6, lr}
    20c6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    20c8:	0743      	lsls	r3, r0, #29
    20ca:	d002      	beq.n	20d2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    20cc:	2307      	movs	r3, #7
    20ce:	439c      	bics	r4, r3
    20d0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    20d2:	4b11      	ldr	r3, [pc, #68]	; (2118 <pvPortMalloc+0x54>)
    20d4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    20d6:	4b11      	ldr	r3, [pc, #68]	; (211c <pvPortMalloc+0x58>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	2b00      	cmp	r3, #0
    20dc:	d010      	beq.n	2100 <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    20de:	4b10      	ldr	r3, [pc, #64]	; (2120 <pvPortMalloc+0x5c>)
    20e0:	681b      	ldr	r3, [r3, #0]
    20e2:	18e4      	adds	r4, r4, r3
    20e4:	4a0f      	ldr	r2, [pc, #60]	; (2124 <pvPortMalloc+0x60>)
    20e6:	4294      	cmp	r4, r2
    20e8:	d811      	bhi.n	210e <pvPortMalloc+0x4a>
    20ea:	42a3      	cmp	r3, r4
    20ec:	d211      	bcs.n	2112 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    20ee:	4a0b      	ldr	r2, [pc, #44]	; (211c <pvPortMalloc+0x58>)
    20f0:	6815      	ldr	r5, [r2, #0]
    20f2:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    20f4:	4b0a      	ldr	r3, [pc, #40]	; (2120 <pvPortMalloc+0x5c>)
    20f6:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    20f8:	4b0b      	ldr	r3, [pc, #44]	; (2128 <pvPortMalloc+0x64>)
    20fa:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    20fc:	0028      	movs	r0, r5
    20fe:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2100:	2207      	movs	r2, #7
    2102:	4b0a      	ldr	r3, [pc, #40]	; (212c <pvPortMalloc+0x68>)
    2104:	3308      	adds	r3, #8
    2106:	4393      	bics	r3, r2
    2108:	4a04      	ldr	r2, [pc, #16]	; (211c <pvPortMalloc+0x58>)
    210a:	6013      	str	r3, [r2, #0]
    210c:	e7e7      	b.n	20de <pvPortMalloc+0x1a>
void *pvReturn = NULL;
    210e:	2500      	movs	r5, #0
    2110:	e7f2      	b.n	20f8 <pvPortMalloc+0x34>
    2112:	2500      	movs	r5, #0
    2114:	e7f0      	b.n	20f8 <pvPortMalloc+0x34>
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	00002ddd 	.word	0x00002ddd
    211c:	20000478 	.word	0x20000478
    2120:	20003f14 	.word	0x20003f14
    2124:	00003a8f 	.word	0x00003a8f
    2128:	00002f19 	.word	0x00002f19
    212c:	2000047c 	.word	0x2000047c

00002130 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    2130:	2800      	cmp	r0, #0
    2132:	d001      	beq.n	2138 <vPortFree+0x8>
    2134:	b672      	cpsid	i
    2136:	e7fe      	b.n	2136 <vPortFree+0x6>
}
    2138:	4770      	bx	lr
	...

0000213c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    213c:	b510      	push	{r4, lr}
    213e:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2140:	4b03      	ldr	r3, [pc, #12]	; (2150 <prvIsQueueEmpty+0x14>)
    2142:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2144:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2146:	4b03      	ldr	r3, [pc, #12]	; (2154 <prvIsQueueEmpty+0x18>)
    2148:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    214a:	4260      	negs	r0, r4
    214c:	4160      	adcs	r0, r4

	return xReturn;
}
    214e:	bd10      	pop	{r4, pc}
    2150:	00002005 	.word	0x00002005
    2154:	0000201d 	.word	0x0000201d

00002158 <prvCopyDataToQueue>:
{
    2158:	b570      	push	{r4, r5, r6, lr}
    215a:	0004      	movs	r4, r0
    215c:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    215e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2160:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2162:	2a00      	cmp	r2, #0
    2164:	d10b      	bne.n	217e <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    2166:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2168:	6823      	ldr	r3, [r4, #0]
    216a:	4283      	cmp	r3, r0
    216c:	d104      	bne.n	2178 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    216e:	6860      	ldr	r0, [r4, #4]
    2170:	4b16      	ldr	r3, [pc, #88]	; (21cc <prvCopyDataToQueue+0x74>)
    2172:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2174:	2300      	movs	r3, #0
    2176:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    2178:	3501      	adds	r5, #1
    217a:	63a5      	str	r5, [r4, #56]	; 0x38
}
    217c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    217e:	2e00      	cmp	r6, #0
    2180:	d10e      	bne.n	21a0 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2182:	6880      	ldr	r0, [r0, #8]
    2184:	4b12      	ldr	r3, [pc, #72]	; (21d0 <prvCopyDataToQueue+0x78>)
    2186:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2188:	68a3      	ldr	r3, [r4, #8]
    218a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    218c:	4694      	mov	ip, r2
    218e:	4463      	add	r3, ip
    2190:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    2192:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2194:	6862      	ldr	r2, [r4, #4]
    2196:	4293      	cmp	r3, r2
    2198:	d3ee      	bcc.n	2178 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    219a:	6823      	ldr	r3, [r4, #0]
    219c:	60a3      	str	r3, [r4, #8]
    219e:	e7eb      	b.n	2178 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21a0:	68c0      	ldr	r0, [r0, #12]
    21a2:	4b0b      	ldr	r3, [pc, #44]	; (21d0 <prvCopyDataToQueue+0x78>)
    21a4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    21a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    21a8:	425b      	negs	r3, r3
    21aa:	68e2      	ldr	r2, [r4, #12]
    21ac:	18d2      	adds	r2, r2, r3
    21ae:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    21b0:	6821      	ldr	r1, [r4, #0]
    21b2:	428a      	cmp	r2, r1
    21b4:	d203      	bcs.n	21be <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    21b6:	6862      	ldr	r2, [r4, #4]
    21b8:	4694      	mov	ip, r2
    21ba:	4463      	add	r3, ip
    21bc:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    21be:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    21c0:	2e02      	cmp	r6, #2
    21c2:	d1d9      	bne.n	2178 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    21c4:	4285      	cmp	r5, r0
    21c6:	d0d7      	beq.n	2178 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    21c8:	3d01      	subs	r5, #1
    21ca:	e7d5      	b.n	2178 <prvCopyDataToQueue+0x20>
    21cc:	000033f5 	.word	0x000033f5
    21d0:	00004139 	.word	0x00004139

000021d4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    21d4:	b570      	push	{r4, r5, r6, lr}
    21d6:	b082      	sub	sp, #8
    21d8:	9001      	str	r0, [sp, #4]
    21da:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    21dc:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    21de:	2c00      	cmp	r4, #0
    21e0:	d005      	beq.n	21ee <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    21e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    21e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    21e6:	4299      	cmp	r1, r3
    21e8:	d303      	bcc.n	21f2 <prvNotifyQueueSetContainer+0x1e>
    21ea:	b672      	cpsid	i
    21ec:	e7fe      	b.n	21ec <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    21ee:	b672      	cpsid	i
    21f0:	e7fe      	b.n	21f0 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    21f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    21f4:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    21f6:	428b      	cmp	r3, r1
    21f8:	d802      	bhi.n	2200 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    21fa:	0030      	movs	r0, r6
    21fc:	b002      	add	sp, #8
    21fe:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    2200:	2345      	movs	r3, #69	; 0x45
    2202:	5ce5      	ldrb	r5, [r4, r3]
    2204:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    2206:	a901      	add	r1, sp, #4
    2208:	0020      	movs	r0, r4
    220a:	4b0a      	ldr	r3, [pc, #40]	; (2234 <prvNotifyQueueSetContainer+0x60>)
    220c:	4798      	blx	r3
    220e:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    2210:	1c6b      	adds	r3, r5, #1
    2212:	d10a      	bne.n	222a <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    2214:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2216:	2b00      	cmp	r3, #0
    2218:	d0ef      	beq.n	21fa <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    221a:	0020      	movs	r0, r4
    221c:	3024      	adds	r0, #36	; 0x24
    221e:	4b06      	ldr	r3, [pc, #24]	; (2238 <prvNotifyQueueSetContainer+0x64>)
    2220:	4798      	blx	r3
    2222:	2800      	cmp	r0, #0
    2224:	d0e9      	beq.n	21fa <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    2226:	2601      	movs	r6, #1
    2228:	e7e7      	b.n	21fa <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    222a:	3501      	adds	r5, #1
    222c:	b26d      	sxtb	r5, r5
    222e:	2345      	movs	r3, #69	; 0x45
    2230:	54e5      	strb	r5, [r4, r3]
    2232:	e7e2      	b.n	21fa <prvNotifyQueueSetContainer+0x26>
    2234:	00002159 	.word	0x00002159
    2238:	00003221 	.word	0x00003221

0000223c <prvCopyDataFromQueue>:
{
    223c:	b510      	push	{r4, lr}
    223e:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2240:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2242:	2a00      	cmp	r2, #0
    2244:	d00b      	beq.n	225e <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2246:	68c3      	ldr	r3, [r0, #12]
    2248:	189b      	adds	r3, r3, r2
    224a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    224c:	6841      	ldr	r1, [r0, #4]
    224e:	428b      	cmp	r3, r1
    2250:	d301      	bcc.n	2256 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2252:	6803      	ldr	r3, [r0, #0]
    2254:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2256:	68c1      	ldr	r1, [r0, #12]
    2258:	0020      	movs	r0, r4
    225a:	4b01      	ldr	r3, [pc, #4]	; (2260 <prvCopyDataFromQueue+0x24>)
    225c:	4798      	blx	r3
}
    225e:	bd10      	pop	{r4, pc}
    2260:	00004139 	.word	0x00004139

00002264 <prvUnlockQueue>:
{
    2264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2266:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    2268:	4b25      	ldr	r3, [pc, #148]	; (2300 <prvUnlockQueue+0x9c>)
    226a:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    226c:	2345      	movs	r3, #69	; 0x45
    226e:	5cfc      	ldrb	r4, [r7, r3]
    2270:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    2272:	2c00      	cmp	r4, #0
    2274:	dd1c      	ble.n	22b0 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    2276:	4e23      	ldr	r6, [pc, #140]	; (2304 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2278:	4d23      	ldr	r5, [pc, #140]	; (2308 <prvUnlockQueue+0xa4>)
    227a:	e00b      	b.n	2294 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    227e:	2b00      	cmp	r3, #0
    2280:	d016      	beq.n	22b0 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2282:	0038      	movs	r0, r7
    2284:	3024      	adds	r0, #36	; 0x24
    2286:	47a8      	blx	r5
    2288:	2800      	cmp	r0, #0
    228a:	d10e      	bne.n	22aa <prvUnlockQueue+0x46>
    228c:	3c01      	subs	r4, #1
    228e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    2290:	2c00      	cmp	r4, #0
    2292:	d00d      	beq.n	22b0 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    2294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2296:	2b00      	cmp	r3, #0
    2298:	d0f0      	beq.n	227c <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    229a:	2100      	movs	r1, #0
    229c:	0038      	movs	r0, r7
    229e:	47b0      	blx	r6
    22a0:	2800      	cmp	r0, #0
    22a2:	d0f3      	beq.n	228c <prvUnlockQueue+0x28>
						vTaskMissedYield();
    22a4:	4b19      	ldr	r3, [pc, #100]	; (230c <prvUnlockQueue+0xa8>)
    22a6:	4798      	blx	r3
    22a8:	e7f0      	b.n	228c <prvUnlockQueue+0x28>
							vTaskMissedYield();
    22aa:	4b18      	ldr	r3, [pc, #96]	; (230c <prvUnlockQueue+0xa8>)
    22ac:	4798      	blx	r3
    22ae:	e7ed      	b.n	228c <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    22b0:	22ff      	movs	r2, #255	; 0xff
    22b2:	2345      	movs	r3, #69	; 0x45
    22b4:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    22b6:	4b16      	ldr	r3, [pc, #88]	; (2310 <prvUnlockQueue+0xac>)
    22b8:	4798      	blx	r3
	taskENTER_CRITICAL();
    22ba:	4b11      	ldr	r3, [pc, #68]	; (2300 <prvUnlockQueue+0x9c>)
    22bc:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    22be:	2344      	movs	r3, #68	; 0x44
    22c0:	5cfc      	ldrb	r4, [r7, r3]
    22c2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    22c4:	2c00      	cmp	r4, #0
    22c6:	dd14      	ble.n	22f2 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    22c8:	693b      	ldr	r3, [r7, #16]
    22ca:	2b00      	cmp	r3, #0
    22cc:	d011      	beq.n	22f2 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    22ce:	003d      	movs	r5, r7
    22d0:	3510      	adds	r5, #16
    22d2:	4e0d      	ldr	r6, [pc, #52]	; (2308 <prvUnlockQueue+0xa4>)
    22d4:	e006      	b.n	22e4 <prvUnlockQueue+0x80>
    22d6:	3c01      	subs	r4, #1
    22d8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    22da:	2c00      	cmp	r4, #0
    22dc:	d009      	beq.n	22f2 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    22de:	693b      	ldr	r3, [r7, #16]
    22e0:	2b00      	cmp	r3, #0
    22e2:	d006      	beq.n	22f2 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    22e4:	0028      	movs	r0, r5
    22e6:	47b0      	blx	r6
    22e8:	2800      	cmp	r0, #0
    22ea:	d0f4      	beq.n	22d6 <prvUnlockQueue+0x72>
					vTaskMissedYield();
    22ec:	4b07      	ldr	r3, [pc, #28]	; (230c <prvUnlockQueue+0xa8>)
    22ee:	4798      	blx	r3
    22f0:	e7f1      	b.n	22d6 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    22f2:	22ff      	movs	r2, #255	; 0xff
    22f4:	2344      	movs	r3, #68	; 0x44
    22f6:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    22f8:	4b05      	ldr	r3, [pc, #20]	; (2310 <prvUnlockQueue+0xac>)
    22fa:	4798      	blx	r3
}
    22fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	00002005 	.word	0x00002005
    2304:	000021d5 	.word	0x000021d5
    2308:	00003221 	.word	0x00003221
    230c:	00003331 	.word	0x00003331
    2310:	0000201d 	.word	0x0000201d

00002314 <xQueueGenericReset>:
{
    2314:	b570      	push	{r4, r5, r6, lr}
    2316:	0004      	movs	r4, r0
    2318:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    231a:	2800      	cmp	r0, #0
    231c:	d021      	beq.n	2362 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    231e:	4b17      	ldr	r3, [pc, #92]	; (237c <xQueueGenericReset+0x68>)
    2320:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2322:	6822      	ldr	r2, [r4, #0]
    2324:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2326:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2328:	434b      	muls	r3, r1
    232a:	18d0      	adds	r0, r2, r3
    232c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    232e:	2000      	movs	r0, #0
    2330:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2332:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    2334:	1a5b      	subs	r3, r3, r1
    2336:	18d3      	adds	r3, r2, r3
    2338:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    233a:	23ff      	movs	r3, #255	; 0xff
    233c:	2244      	movs	r2, #68	; 0x44
    233e:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    2340:	3201      	adds	r2, #1
    2342:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    2344:	2d00      	cmp	r5, #0
    2346:	d111      	bne.n	236c <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2348:	6923      	ldr	r3, [r4, #16]
    234a:	2b00      	cmp	r3, #0
    234c:	d005      	beq.n	235a <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    234e:	0020      	movs	r0, r4
    2350:	3010      	adds	r0, #16
    2352:	4b0b      	ldr	r3, [pc, #44]	; (2380 <xQueueGenericReset+0x6c>)
    2354:	4798      	blx	r3
    2356:	2800      	cmp	r0, #0
    2358:	d105      	bne.n	2366 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    235a:	4b0a      	ldr	r3, [pc, #40]	; (2384 <xQueueGenericReset+0x70>)
    235c:	4798      	blx	r3
}
    235e:	2001      	movs	r0, #1
    2360:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    2362:	b672      	cpsid	i
    2364:	e7fe      	b.n	2364 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    2366:	4b08      	ldr	r3, [pc, #32]	; (2388 <xQueueGenericReset+0x74>)
    2368:	4798      	blx	r3
    236a:	e7f6      	b.n	235a <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    236c:	0020      	movs	r0, r4
    236e:	3010      	adds	r0, #16
    2370:	4d06      	ldr	r5, [pc, #24]	; (238c <xQueueGenericReset+0x78>)
    2372:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2374:	0020      	movs	r0, r4
    2376:	3024      	adds	r0, #36	; 0x24
    2378:	47a8      	blx	r5
    237a:	e7ee      	b.n	235a <xQueueGenericReset+0x46>
    237c:	00002005 	.word	0x00002005
    2380:	00003221 	.word	0x00003221
    2384:	0000201d 	.word	0x0000201d
    2388:	00001fed 	.word	0x00001fed
    238c:	00001e6d 	.word	0x00001e6d

00002390 <xQueueGenericCreate>:
	{
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	0006      	movs	r6, r0
    2394:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    2396:	2800      	cmp	r0, #0
    2398:	d101      	bne.n	239e <xQueueGenericCreate+0xe>
    239a:	b672      	cpsid	i
    239c:	e7fe      	b.n	239c <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    239e:	0008      	movs	r0, r1
    23a0:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    23a2:	304c      	adds	r0, #76	; 0x4c
    23a4:	4b0a      	ldr	r3, [pc, #40]	; (23d0 <xQueueGenericCreate+0x40>)
    23a6:	4798      	blx	r3
    23a8:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    23aa:	d00e      	beq.n	23ca <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
    23ac:	2d00      	cmp	r5, #0
    23ae:	d003      	beq.n	23b8 <xQueueGenericCreate+0x28>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    23b0:	0003      	movs	r3, r0
    23b2:	334c      	adds	r3, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    23b4:	6003      	str	r3, [r0, #0]
    23b6:	e000      	b.n	23ba <xQueueGenericCreate+0x2a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    23b8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    23ba:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    23bc:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    23be:	2101      	movs	r1, #1
    23c0:	0020      	movs	r0, r4
    23c2:	4b04      	ldr	r3, [pc, #16]	; (23d4 <xQueueGenericCreate+0x44>)
    23c4:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
    23c6:	2300      	movs	r3, #0
    23c8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    23ca:	0020      	movs	r0, r4
    23cc:	bd70      	pop	{r4, r5, r6, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	000020c5 	.word	0x000020c5
    23d4:	00002315 	.word	0x00002315

000023d8 <xQueueGenericSend>:
{
    23d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23da:	46ce      	mov	lr, r9
    23dc:	4647      	mov	r7, r8
    23de:	b580      	push	{r7, lr}
    23e0:	b085      	sub	sp, #20
    23e2:	0004      	movs	r4, r0
    23e4:	000f      	movs	r7, r1
    23e6:	9201      	str	r2, [sp, #4]
    23e8:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    23ea:	2800      	cmp	r0, #0
    23ec:	d00c      	beq.n	2408 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    23ee:	2900      	cmp	r1, #0
    23f0:	d00c      	beq.n	240c <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    23f2:	2d02      	cmp	r5, #2
    23f4:	d00f      	beq.n	2416 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    23f6:	4b4e      	ldr	r3, [pc, #312]	; (2530 <xQueueGenericSend+0x158>)
    23f8:	4798      	blx	r3
    23fa:	2800      	cmp	r0, #0
    23fc:	d110      	bne.n	2420 <xQueueGenericSend+0x48>
    23fe:	9b01      	ldr	r3, [sp, #4]
    2400:	2b00      	cmp	r3, #0
    2402:	d011      	beq.n	2428 <xQueueGenericSend+0x50>
    2404:	b672      	cpsid	i
    2406:	e7fe      	b.n	2406 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    2408:	b672      	cpsid	i
    240a:	e7fe      	b.n	240a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    240c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    240e:	2b00      	cmp	r3, #0
    2410:	d0ef      	beq.n	23f2 <xQueueGenericSend+0x1a>
    2412:	b672      	cpsid	i
    2414:	e7fe      	b.n	2414 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2416:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2418:	2b01      	cmp	r3, #1
    241a:	d0ec      	beq.n	23f6 <xQueueGenericSend+0x1e>
    241c:	b672      	cpsid	i
    241e:	e7fe      	b.n	241e <xQueueGenericSend+0x46>
    2420:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    2422:	4b44      	ldr	r3, [pc, #272]	; (2534 <xQueueGenericSend+0x15c>)
    2424:	4698      	mov	r8, r3
    2426:	e04c      	b.n	24c2 <xQueueGenericSend+0xea>
    2428:	2600      	movs	r6, #0
    242a:	e7fa      	b.n	2422 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    242c:	002a      	movs	r2, r5
    242e:	0039      	movs	r1, r7
    2430:	0020      	movs	r0, r4
    2432:	4b41      	ldr	r3, [pc, #260]	; (2538 <xQueueGenericSend+0x160>)
    2434:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    2436:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2438:	2b00      	cmp	r3, #0
    243a:	d00f      	beq.n	245c <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    243c:	0029      	movs	r1, r5
    243e:	0020      	movs	r0, r4
    2440:	4b3e      	ldr	r3, [pc, #248]	; (253c <xQueueGenericSend+0x164>)
    2442:	4798      	blx	r3
    2444:	2800      	cmp	r0, #0
    2446:	d001      	beq.n	244c <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    2448:	4b3d      	ldr	r3, [pc, #244]	; (2540 <xQueueGenericSend+0x168>)
    244a:	4798      	blx	r3
				taskEXIT_CRITICAL();
    244c:	4b3d      	ldr	r3, [pc, #244]	; (2544 <xQueueGenericSend+0x16c>)
    244e:	4798      	blx	r3
				return pdPASS;
    2450:	2001      	movs	r0, #1
}
    2452:	b005      	add	sp, #20
    2454:	bc0c      	pop	{r2, r3}
    2456:	4690      	mov	r8, r2
    2458:	4699      	mov	r9, r3
    245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    245c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    245e:	2b00      	cmp	r3, #0
    2460:	d008      	beq.n	2474 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2462:	0020      	movs	r0, r4
    2464:	3024      	adds	r0, #36	; 0x24
    2466:	4b38      	ldr	r3, [pc, #224]	; (2548 <xQueueGenericSend+0x170>)
    2468:	4798      	blx	r3
    246a:	2800      	cmp	r0, #0
    246c:	d0ee      	beq.n	244c <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    246e:	4b34      	ldr	r3, [pc, #208]	; (2540 <xQueueGenericSend+0x168>)
    2470:	4798      	blx	r3
    2472:	e7eb      	b.n	244c <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    2474:	2800      	cmp	r0, #0
    2476:	d0e9      	beq.n	244c <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    2478:	4b31      	ldr	r3, [pc, #196]	; (2540 <xQueueGenericSend+0x168>)
    247a:	4798      	blx	r3
    247c:	e7e6      	b.n	244c <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    247e:	4b31      	ldr	r3, [pc, #196]	; (2544 <xQueueGenericSend+0x16c>)
    2480:	4798      	blx	r3
					return errQUEUE_FULL;
    2482:	2000      	movs	r0, #0
    2484:	e7e5      	b.n	2452 <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    2486:	4b2f      	ldr	r3, [pc, #188]	; (2544 <xQueueGenericSend+0x16c>)
    2488:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    248a:	a901      	add	r1, sp, #4
    248c:	a802      	add	r0, sp, #8
    248e:	4b2f      	ldr	r3, [pc, #188]	; (254c <xQueueGenericSend+0x174>)
    2490:	4798      	blx	r3
    2492:	2800      	cmp	r0, #0
    2494:	d144      	bne.n	2520 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    2496:	4b27      	ldr	r3, [pc, #156]	; (2534 <xQueueGenericSend+0x15c>)
    2498:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    249a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    249c:	4699      	mov	r9, r3
    249e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    24a0:	4b28      	ldr	r3, [pc, #160]	; (2544 <xQueueGenericSend+0x16c>)
    24a2:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    24a4:	45b1      	cmp	r9, r6
    24a6:	d135      	bne.n	2514 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    24a8:	0020      	movs	r0, r4
    24aa:	3010      	adds	r0, #16
    24ac:	9901      	ldr	r1, [sp, #4]
    24ae:	4b28      	ldr	r3, [pc, #160]	; (2550 <xQueueGenericSend+0x178>)
    24b0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    24b2:	0020      	movs	r0, r4
    24b4:	4b27      	ldr	r3, [pc, #156]	; (2554 <xQueueGenericSend+0x17c>)
    24b6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    24b8:	4b27      	ldr	r3, [pc, #156]	; (2558 <xQueueGenericSend+0x180>)
    24ba:	4798      	blx	r3
    24bc:	2800      	cmp	r0, #0
    24be:	d026      	beq.n	250e <xQueueGenericSend+0x136>
    24c0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    24c2:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    24c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    24c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    24c8:	4293      	cmp	r3, r2
    24ca:	d3af      	bcc.n	242c <xQueueGenericSend+0x54>
    24cc:	2d02      	cmp	r5, #2
    24ce:	d0ad      	beq.n	242c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    24d0:	9b01      	ldr	r3, [sp, #4]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d0d3      	beq.n	247e <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    24d6:	2e00      	cmp	r6, #0
    24d8:	d102      	bne.n	24e0 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    24da:	a802      	add	r0, sp, #8
    24dc:	4b1f      	ldr	r3, [pc, #124]	; (255c <xQueueGenericSend+0x184>)
    24de:	4798      	blx	r3
		taskEXIT_CRITICAL();
    24e0:	4b18      	ldr	r3, [pc, #96]	; (2544 <xQueueGenericSend+0x16c>)
    24e2:	4798      	blx	r3
		vTaskSuspendAll();
    24e4:	4b1e      	ldr	r3, [pc, #120]	; (2560 <xQueueGenericSend+0x188>)
    24e6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    24e8:	4b12      	ldr	r3, [pc, #72]	; (2534 <xQueueGenericSend+0x15c>)
    24ea:	4798      	blx	r3
    24ec:	2344      	movs	r3, #68	; 0x44
    24ee:	5ce3      	ldrb	r3, [r4, r3]
    24f0:	b25b      	sxtb	r3, r3
    24f2:	3301      	adds	r3, #1
    24f4:	d102      	bne.n	24fc <xQueueGenericSend+0x124>
    24f6:	2200      	movs	r2, #0
    24f8:	2344      	movs	r3, #68	; 0x44
    24fa:	54e2      	strb	r2, [r4, r3]
    24fc:	2345      	movs	r3, #69	; 0x45
    24fe:	5ce3      	ldrb	r3, [r4, r3]
    2500:	b25b      	sxtb	r3, r3
    2502:	3301      	adds	r3, #1
    2504:	d1bf      	bne.n	2486 <xQueueGenericSend+0xae>
    2506:	2200      	movs	r2, #0
    2508:	2345      	movs	r3, #69	; 0x45
    250a:	54e2      	strb	r2, [r4, r3]
    250c:	e7bb      	b.n	2486 <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    250e:	4b0c      	ldr	r3, [pc, #48]	; (2540 <xQueueGenericSend+0x168>)
    2510:	4798      	blx	r3
    2512:	e7d5      	b.n	24c0 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    2514:	0020      	movs	r0, r4
    2516:	4b0f      	ldr	r3, [pc, #60]	; (2554 <xQueueGenericSend+0x17c>)
    2518:	4798      	blx	r3
				( void ) xTaskResumeAll();
    251a:	4b0f      	ldr	r3, [pc, #60]	; (2558 <xQueueGenericSend+0x180>)
    251c:	4798      	blx	r3
    251e:	e7cf      	b.n	24c0 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    2520:	0020      	movs	r0, r4
    2522:	4b0c      	ldr	r3, [pc, #48]	; (2554 <xQueueGenericSend+0x17c>)
    2524:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2526:	4b0c      	ldr	r3, [pc, #48]	; (2558 <xQueueGenericSend+0x180>)
    2528:	4798      	blx	r3
			return errQUEUE_FULL;
    252a:	2000      	movs	r0, #0
    252c:	e791      	b.n	2452 <xQueueGenericSend+0x7a>
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	0000333d 	.word	0x0000333d
    2534:	00002005 	.word	0x00002005
    2538:	00002159 	.word	0x00002159
    253c:	000021d5 	.word	0x000021d5
    2540:	00001fed 	.word	0x00001fed
    2544:	0000201d 	.word	0x0000201d
    2548:	00003221 	.word	0x00003221
    254c:	000032c1 	.word	0x000032c1
    2550:	000031bd 	.word	0x000031bd
    2554:	00002265 	.word	0x00002265
    2558:	00002f19 	.word	0x00002f19
    255c:	000032a9 	.word	0x000032a9
    2560:	00002ddd 	.word	0x00002ddd

00002564 <xQueueCreateMutex>:
	{
    2564:	b570      	push	{r4, r5, r6, lr}
    2566:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    2568:	2100      	movs	r1, #0
    256a:	2001      	movs	r0, #1
    256c:	4b06      	ldr	r3, [pc, #24]	; (2588 <xQueueCreateMutex+0x24>)
    256e:	4798      	blx	r3
    2570:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    2572:	d007      	beq.n	2584 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    2574:	2300      	movs	r3, #0
    2576:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2578:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    257a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    257c:	2200      	movs	r2, #0
    257e:	2100      	movs	r1, #0
    2580:	4d02      	ldr	r5, [pc, #8]	; (258c <xQueueCreateMutex+0x28>)
    2582:	47a8      	blx	r5
	}
    2584:	0020      	movs	r0, r4
    2586:	bd70      	pop	{r4, r5, r6, pc}
    2588:	00002391 	.word	0x00002391
    258c:	000023d9 	.word	0x000023d9

00002590 <xQueueGenericSendFromISR>:
{
    2590:	b5f0      	push	{r4, r5, r6, r7, lr}
    2592:	b083      	sub	sp, #12
    2594:	0004      	movs	r4, r0
    2596:	9101      	str	r1, [sp, #4]
    2598:	0016      	movs	r6, r2
    259a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    259c:	2800      	cmp	r0, #0
    259e:	d012      	beq.n	25c6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    25a0:	9b01      	ldr	r3, [sp, #4]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d011      	beq.n	25ca <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    25a6:	2d02      	cmp	r5, #2
    25a8:	d014      	beq.n	25d4 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    25aa:	4b28      	ldr	r3, [pc, #160]	; (264c <xQueueGenericSendFromISR+0xbc>)
    25ac:	4798      	blx	r3
    25ae:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    25b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    25b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    25b4:	429a      	cmp	r2, r3
    25b6:	d82f      	bhi.n	2618 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    25b8:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    25ba:	9800      	ldr	r0, [sp, #0]
    25bc:	4b24      	ldr	r3, [pc, #144]	; (2650 <xQueueGenericSendFromISR+0xc0>)
    25be:	4798      	blx	r3
}
    25c0:	0028      	movs	r0, r5
    25c2:	b003      	add	sp, #12
    25c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    25c6:	b672      	cpsid	i
    25c8:	e7fe      	b.n	25c8 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    25ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
    25cc:	2b00      	cmp	r3, #0
    25ce:	d0ea      	beq.n	25a6 <xQueueGenericSendFromISR+0x16>
    25d0:	b672      	cpsid	i
    25d2:	e7fe      	b.n	25d2 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    25d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    25d6:	2b01      	cmp	r3, #1
    25d8:	d01a      	beq.n	2610 <xQueueGenericSendFromISR+0x80>
    25da:	b672      	cpsid	i
    25dc:	e7fe      	b.n	25dc <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    25de:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    25e0:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    25e2:	2b00      	cmp	r3, #0
    25e4:	d0e9      	beq.n	25ba <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    25e6:	0020      	movs	r0, r4
    25e8:	3024      	adds	r0, #36	; 0x24
    25ea:	4b1a      	ldr	r3, [pc, #104]	; (2654 <xQueueGenericSendFromISR+0xc4>)
    25ec:	4798      	blx	r3
    25ee:	2800      	cmp	r0, #0
    25f0:	d0e3      	beq.n	25ba <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    25f2:	2e00      	cmp	r6, #0
    25f4:	d00a      	beq.n	260c <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    25f6:	2301      	movs	r3, #1
    25f8:	6033      	str	r3, [r6, #0]
    25fa:	e7de      	b.n	25ba <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    25fc:	1c7b      	adds	r3, r7, #1
    25fe:	b25b      	sxtb	r3, r3
    2600:	2245      	movs	r2, #69	; 0x45
    2602:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    2604:	2501      	movs	r5, #1
    2606:	e7d8      	b.n	25ba <xQueueGenericSendFromISR+0x2a>
    2608:	2501      	movs	r5, #1
    260a:	e7d6      	b.n	25ba <xQueueGenericSendFromISR+0x2a>
    260c:	2501      	movs	r5, #1
    260e:	e7d4      	b.n	25ba <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2610:	4b0e      	ldr	r3, [pc, #56]	; (264c <xQueueGenericSendFromISR+0xbc>)
    2612:	4798      	blx	r3
    2614:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    2618:	2345      	movs	r3, #69	; 0x45
    261a:	5ce7      	ldrb	r7, [r4, r3]
    261c:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    261e:	002a      	movs	r2, r5
    2620:	9901      	ldr	r1, [sp, #4]
    2622:	0020      	movs	r0, r4
    2624:	4b0c      	ldr	r3, [pc, #48]	; (2658 <xQueueGenericSendFromISR+0xc8>)
    2626:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    2628:	1c7b      	adds	r3, r7, #1
    262a:	d1e7      	bne.n	25fc <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    262c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    262e:	2b00      	cmp	r3, #0
    2630:	d0d5      	beq.n	25de <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2632:	0029      	movs	r1, r5
    2634:	0020      	movs	r0, r4
    2636:	4b09      	ldr	r3, [pc, #36]	; (265c <xQueueGenericSendFromISR+0xcc>)
    2638:	4798      	blx	r3
			xReturn = pdPASS;
    263a:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    263c:	2800      	cmp	r0, #0
    263e:	d0bc      	beq.n	25ba <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    2640:	2e00      	cmp	r6, #0
    2642:	d0e1      	beq.n	2608 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    2644:	2301      	movs	r3, #1
    2646:	6033      	str	r3, [r6, #0]
    2648:	e7b7      	b.n	25ba <xQueueGenericSendFromISR+0x2a>
    264a:	46c0      	nop			; (mov r8, r8)
    264c:	0000203d 	.word	0x0000203d
    2650:	00002045 	.word	0x00002045
    2654:	00003221 	.word	0x00003221
    2658:	00002159 	.word	0x00002159
    265c:	000021d5 	.word	0x000021d5

00002660 <xQueueReceive>:
{
    2660:	b5f0      	push	{r4, r5, r6, r7, lr}
    2662:	46c6      	mov	lr, r8
    2664:	b500      	push	{lr}
    2666:	b084      	sub	sp, #16
    2668:	0004      	movs	r4, r0
    266a:	000f      	movs	r7, r1
    266c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    266e:	2800      	cmp	r0, #0
    2670:	d00a      	beq.n	2688 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2672:	2900      	cmp	r1, #0
    2674:	d00a      	beq.n	268c <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2676:	4b42      	ldr	r3, [pc, #264]	; (2780 <xQueueReceive+0x120>)
    2678:	4798      	blx	r3
    267a:	2800      	cmp	r0, #0
    267c:	d10b      	bne.n	2696 <xQueueReceive+0x36>
    267e:	9b01      	ldr	r3, [sp, #4]
    2680:	2b00      	cmp	r3, #0
    2682:	d00c      	beq.n	269e <xQueueReceive+0x3e>
    2684:	b672      	cpsid	i
    2686:	e7fe      	b.n	2686 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    2688:	b672      	cpsid	i
    268a:	e7fe      	b.n	268a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    268c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    268e:	2b00      	cmp	r3, #0
    2690:	d0f1      	beq.n	2676 <xQueueReceive+0x16>
    2692:	b672      	cpsid	i
    2694:	e7fe      	b.n	2694 <xQueueReceive+0x34>
    2696:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    2698:	4b3a      	ldr	r3, [pc, #232]	; (2784 <xQueueReceive+0x124>)
    269a:	4698      	mov	r8, r3
    269c:	e02f      	b.n	26fe <xQueueReceive+0x9e>
    269e:	2600      	movs	r6, #0
    26a0:	e7fa      	b.n	2698 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    26a2:	0039      	movs	r1, r7
    26a4:	0020      	movs	r0, r4
    26a6:	4b38      	ldr	r3, [pc, #224]	; (2788 <xQueueReceive+0x128>)
    26a8:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    26aa:	3d01      	subs	r5, #1
    26ac:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    26ae:	6923      	ldr	r3, [r4, #16]
    26b0:	2b00      	cmp	r3, #0
    26b2:	d007      	beq.n	26c4 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    26b4:	0020      	movs	r0, r4
    26b6:	3010      	adds	r0, #16
    26b8:	4b34      	ldr	r3, [pc, #208]	; (278c <xQueueReceive+0x12c>)
    26ba:	4798      	blx	r3
    26bc:	2800      	cmp	r0, #0
    26be:	d001      	beq.n	26c4 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    26c0:	4b33      	ldr	r3, [pc, #204]	; (2790 <xQueueReceive+0x130>)
    26c2:	4798      	blx	r3
				taskEXIT_CRITICAL();
    26c4:	4b33      	ldr	r3, [pc, #204]	; (2794 <xQueueReceive+0x134>)
    26c6:	4798      	blx	r3
				return pdPASS;
    26c8:	2001      	movs	r0, #1
}
    26ca:	b004      	add	sp, #16
    26cc:	bc04      	pop	{r2}
    26ce:	4690      	mov	r8, r2
    26d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    26d2:	4b30      	ldr	r3, [pc, #192]	; (2794 <xQueueReceive+0x134>)
    26d4:	4798      	blx	r3
					return errQUEUE_EMPTY;
    26d6:	2000      	movs	r0, #0
    26d8:	e7f7      	b.n	26ca <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    26da:	a802      	add	r0, sp, #8
    26dc:	4b2e      	ldr	r3, [pc, #184]	; (2798 <xQueueReceive+0x138>)
    26de:	4798      	blx	r3
    26e0:	e016      	b.n	2710 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    26e2:	2200      	movs	r2, #0
    26e4:	2344      	movs	r3, #68	; 0x44
    26e6:	54e2      	strb	r2, [r4, r3]
    26e8:	e01d      	b.n	2726 <xQueueReceive+0xc6>
    26ea:	2200      	movs	r2, #0
    26ec:	2345      	movs	r3, #69	; 0x45
    26ee:	54e2      	strb	r2, [r4, r3]
    26f0:	e01e      	b.n	2730 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    26f2:	0020      	movs	r0, r4
    26f4:	4b29      	ldr	r3, [pc, #164]	; (279c <xQueueReceive+0x13c>)
    26f6:	4798      	blx	r3
				( void ) xTaskResumeAll();
    26f8:	4b29      	ldr	r3, [pc, #164]	; (27a0 <xQueueReceive+0x140>)
    26fa:	4798      	blx	r3
    26fc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    26fe:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2700:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2702:	2d00      	cmp	r5, #0
    2704:	d1cd      	bne.n	26a2 <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    2706:	9b01      	ldr	r3, [sp, #4]
    2708:	2b00      	cmp	r3, #0
    270a:	d0e2      	beq.n	26d2 <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    270c:	2e00      	cmp	r6, #0
    270e:	d0e4      	beq.n	26da <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    2710:	4b20      	ldr	r3, [pc, #128]	; (2794 <xQueueReceive+0x134>)
    2712:	4798      	blx	r3
		vTaskSuspendAll();
    2714:	4b23      	ldr	r3, [pc, #140]	; (27a4 <xQueueReceive+0x144>)
    2716:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2718:	4b1a      	ldr	r3, [pc, #104]	; (2784 <xQueueReceive+0x124>)
    271a:	4798      	blx	r3
    271c:	2344      	movs	r3, #68	; 0x44
    271e:	5ce3      	ldrb	r3, [r4, r3]
    2720:	b25b      	sxtb	r3, r3
    2722:	3301      	adds	r3, #1
    2724:	d0dd      	beq.n	26e2 <xQueueReceive+0x82>
    2726:	2345      	movs	r3, #69	; 0x45
    2728:	5ce3      	ldrb	r3, [r4, r3]
    272a:	b25b      	sxtb	r3, r3
    272c:	3301      	adds	r3, #1
    272e:	d0dc      	beq.n	26ea <xQueueReceive+0x8a>
    2730:	4b18      	ldr	r3, [pc, #96]	; (2794 <xQueueReceive+0x134>)
    2732:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2734:	a901      	add	r1, sp, #4
    2736:	a802      	add	r0, sp, #8
    2738:	4b1b      	ldr	r3, [pc, #108]	; (27a8 <xQueueReceive+0x148>)
    273a:	4798      	blx	r3
    273c:	2800      	cmp	r0, #0
    273e:	d113      	bne.n	2768 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2740:	0020      	movs	r0, r4
    2742:	4b1a      	ldr	r3, [pc, #104]	; (27ac <xQueueReceive+0x14c>)
    2744:	4798      	blx	r3
    2746:	2800      	cmp	r0, #0
    2748:	d0d3      	beq.n	26f2 <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    274a:	0020      	movs	r0, r4
    274c:	3024      	adds	r0, #36	; 0x24
    274e:	9901      	ldr	r1, [sp, #4]
    2750:	4b17      	ldr	r3, [pc, #92]	; (27b0 <xQueueReceive+0x150>)
    2752:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    2754:	0020      	movs	r0, r4
    2756:	4b11      	ldr	r3, [pc, #68]	; (279c <xQueueReceive+0x13c>)
    2758:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    275a:	4b11      	ldr	r3, [pc, #68]	; (27a0 <xQueueReceive+0x140>)
    275c:	4798      	blx	r3
    275e:	2800      	cmp	r0, #0
    2760:	d1cc      	bne.n	26fc <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    2762:	4b0b      	ldr	r3, [pc, #44]	; (2790 <xQueueReceive+0x130>)
    2764:	4798      	blx	r3
    2766:	e7c9      	b.n	26fc <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    2768:	0020      	movs	r0, r4
    276a:	4b0c      	ldr	r3, [pc, #48]	; (279c <xQueueReceive+0x13c>)
    276c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    276e:	4b0c      	ldr	r3, [pc, #48]	; (27a0 <xQueueReceive+0x140>)
    2770:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2772:	0020      	movs	r0, r4
    2774:	4b0d      	ldr	r3, [pc, #52]	; (27ac <xQueueReceive+0x14c>)
    2776:	4798      	blx	r3
    2778:	2800      	cmp	r0, #0
    277a:	d0bf      	beq.n	26fc <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    277c:	2000      	movs	r0, #0
    277e:	e7a4      	b.n	26ca <xQueueReceive+0x6a>
    2780:	0000333d 	.word	0x0000333d
    2784:	00002005 	.word	0x00002005
    2788:	0000223d 	.word	0x0000223d
    278c:	00003221 	.word	0x00003221
    2790:	00001fed 	.word	0x00001fed
    2794:	0000201d 	.word	0x0000201d
    2798:	000032a9 	.word	0x000032a9
    279c:	00002265 	.word	0x00002265
    27a0:	00002f19 	.word	0x00002f19
    27a4:	00002ddd 	.word	0x00002ddd
    27a8:	000032c1 	.word	0x000032c1
    27ac:	0000213d 	.word	0x0000213d
    27b0:	000031bd 	.word	0x000031bd

000027b4 <xQueueSemaphoreTake>:
{
    27b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27b6:	b085      	sub	sp, #20
    27b8:	1e04      	subs	r4, r0, #0
    27ba:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    27bc:	d004      	beq.n	27c8 <xQueueSemaphoreTake+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
    27be:	6c03      	ldr	r3, [r0, #64]	; 0x40
    27c0:	2b00      	cmp	r3, #0
    27c2:	d003      	beq.n	27cc <xQueueSemaphoreTake+0x18>
    27c4:	b672      	cpsid	i
    27c6:	e7fe      	b.n	27c6 <xQueueSemaphoreTake+0x12>
	configASSERT( ( pxQueue ) );
    27c8:	b672      	cpsid	i
    27ca:	e7fe      	b.n	27ca <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    27cc:	4b50      	ldr	r3, [pc, #320]	; (2910 <xQueueSemaphoreTake+0x15c>)
    27ce:	4798      	blx	r3
    27d0:	2800      	cmp	r0, #0
    27d2:	d104      	bne.n	27de <xQueueSemaphoreTake+0x2a>
    27d4:	9b01      	ldr	r3, [sp, #4]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d005      	beq.n	27e6 <xQueueSemaphoreTake+0x32>
    27da:	b672      	cpsid	i
    27dc:	e7fe      	b.n	27dc <xQueueSemaphoreTake+0x28>
    27de:	2500      	movs	r5, #0
    27e0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    27e2:	4f4c      	ldr	r7, [pc, #304]	; (2914 <xQueueSemaphoreTake+0x160>)
    27e4:	e048      	b.n	2878 <xQueueSemaphoreTake+0xc4>
    27e6:	2500      	movs	r5, #0
    27e8:	2600      	movs	r6, #0
    27ea:	e7fa      	b.n	27e2 <xQueueSemaphoreTake+0x2e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    27ec:	3b01      	subs	r3, #1
    27ee:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    27f0:	6823      	ldr	r3, [r4, #0]
    27f2:	2b00      	cmp	r3, #0
    27f4:	d102      	bne.n	27fc <xQueueSemaphoreTake+0x48>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    27f6:	4b48      	ldr	r3, [pc, #288]	; (2918 <xQueueSemaphoreTake+0x164>)
    27f8:	4798      	blx	r3
    27fa:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    27fc:	6923      	ldr	r3, [r4, #16]
    27fe:	2b00      	cmp	r3, #0
    2800:	d007      	beq.n	2812 <xQueueSemaphoreTake+0x5e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2802:	0020      	movs	r0, r4
    2804:	3010      	adds	r0, #16
    2806:	4b45      	ldr	r3, [pc, #276]	; (291c <xQueueSemaphoreTake+0x168>)
    2808:	4798      	blx	r3
    280a:	2800      	cmp	r0, #0
    280c:	d001      	beq.n	2812 <xQueueSemaphoreTake+0x5e>
						queueYIELD_IF_USING_PREEMPTION();
    280e:	4b44      	ldr	r3, [pc, #272]	; (2920 <xQueueSemaphoreTake+0x16c>)
    2810:	4798      	blx	r3
				taskEXIT_CRITICAL();
    2812:	4b44      	ldr	r3, [pc, #272]	; (2924 <xQueueSemaphoreTake+0x170>)
    2814:	4798      	blx	r3
				return pdPASS;
    2816:	2501      	movs	r5, #1
}
    2818:	0028      	movs	r0, r5
    281a:	b005      	add	sp, #20
    281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
    281e:	2d00      	cmp	r5, #0
    2820:	d001      	beq.n	2826 <xQueueSemaphoreTake+0x72>
    2822:	b672      	cpsid	i
    2824:	e7fe      	b.n	2824 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
    2826:	4b3f      	ldr	r3, [pc, #252]	; (2924 <xQueueSemaphoreTake+0x170>)
    2828:	4798      	blx	r3
					return errQUEUE_EMPTY;
    282a:	e7f5      	b.n	2818 <xQueueSemaphoreTake+0x64>
					vTaskInternalSetTimeOutState( &xTimeOut );
    282c:	a802      	add	r0, sp, #8
    282e:	4b3e      	ldr	r3, [pc, #248]	; (2928 <xQueueSemaphoreTake+0x174>)
    2830:	4798      	blx	r3
    2832:	e02a      	b.n	288a <xQueueSemaphoreTake+0xd6>
		prvLockQueue( pxQueue );
    2834:	2200      	movs	r2, #0
    2836:	2344      	movs	r3, #68	; 0x44
    2838:	54e2      	strb	r2, [r4, r3]
    283a:	e031      	b.n	28a0 <xQueueSemaphoreTake+0xec>
    283c:	2200      	movs	r2, #0
    283e:	2345      	movs	r3, #69	; 0x45
    2840:	54e2      	strb	r2, [r4, r3]
    2842:	e032      	b.n	28aa <xQueueSemaphoreTake+0xf6>
						taskENTER_CRITICAL();
    2844:	4b33      	ldr	r3, [pc, #204]	; (2914 <xQueueSemaphoreTake+0x160>)
    2846:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2848:	6860      	ldr	r0, [r4, #4]
    284a:	4b38      	ldr	r3, [pc, #224]	; (292c <xQueueSemaphoreTake+0x178>)
    284c:	4798      	blx	r3
    284e:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    2850:	4b34      	ldr	r3, [pc, #208]	; (2924 <xQueueSemaphoreTake+0x170>)
    2852:	4798      	blx	r3
    2854:	e039      	b.n	28ca <xQueueSemaphoreTake+0x116>
				prvUnlockQueue( pxQueue );
    2856:	0020      	movs	r0, r4
    2858:	4b35      	ldr	r3, [pc, #212]	; (2930 <xQueueSemaphoreTake+0x17c>)
    285a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    285c:	4b35      	ldr	r3, [pc, #212]	; (2934 <xQueueSemaphoreTake+0x180>)
    285e:	4798      	blx	r3
    2860:	e009      	b.n	2876 <xQueueSemaphoreTake+0xc2>
			prvUnlockQueue( pxQueue );
    2862:	0020      	movs	r0, r4
    2864:	4b32      	ldr	r3, [pc, #200]	; (2930 <xQueueSemaphoreTake+0x17c>)
    2866:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2868:	4b32      	ldr	r3, [pc, #200]	; (2934 <xQueueSemaphoreTake+0x180>)
    286a:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    286c:	0020      	movs	r0, r4
    286e:	4b32      	ldr	r3, [pc, #200]	; (2938 <xQueueSemaphoreTake+0x184>)
    2870:	4798      	blx	r3
    2872:	2800      	cmp	r0, #0
    2874:	d138      	bne.n	28e8 <xQueueSemaphoreTake+0x134>
    2876:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    2878:	47b8      	blx	r7
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    287a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    287c:	2b00      	cmp	r3, #0
    287e:	d1b5      	bne.n	27ec <xQueueSemaphoreTake+0x38>
				if( xTicksToWait == ( TickType_t ) 0 )
    2880:	9b01      	ldr	r3, [sp, #4]
    2882:	2b00      	cmp	r3, #0
    2884:	d0cb      	beq.n	281e <xQueueSemaphoreTake+0x6a>
				else if( xEntryTimeSet == pdFALSE )
    2886:	2e00      	cmp	r6, #0
    2888:	d0d0      	beq.n	282c <xQueueSemaphoreTake+0x78>
		taskEXIT_CRITICAL();
    288a:	4b26      	ldr	r3, [pc, #152]	; (2924 <xQueueSemaphoreTake+0x170>)
    288c:	4798      	blx	r3
		vTaskSuspendAll();
    288e:	4b2b      	ldr	r3, [pc, #172]	; (293c <xQueueSemaphoreTake+0x188>)
    2890:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2892:	4b20      	ldr	r3, [pc, #128]	; (2914 <xQueueSemaphoreTake+0x160>)
    2894:	4798      	blx	r3
    2896:	2344      	movs	r3, #68	; 0x44
    2898:	5ce3      	ldrb	r3, [r4, r3]
    289a:	b25b      	sxtb	r3, r3
    289c:	3301      	adds	r3, #1
    289e:	d0c9      	beq.n	2834 <xQueueSemaphoreTake+0x80>
    28a0:	2345      	movs	r3, #69	; 0x45
    28a2:	5ce3      	ldrb	r3, [r4, r3]
    28a4:	b25b      	sxtb	r3, r3
    28a6:	3301      	adds	r3, #1
    28a8:	d0c8      	beq.n	283c <xQueueSemaphoreTake+0x88>
    28aa:	4b1e      	ldr	r3, [pc, #120]	; (2924 <xQueueSemaphoreTake+0x170>)
    28ac:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    28ae:	a901      	add	r1, sp, #4
    28b0:	a802      	add	r0, sp, #8
    28b2:	4b23      	ldr	r3, [pc, #140]	; (2940 <xQueueSemaphoreTake+0x18c>)
    28b4:	4798      	blx	r3
    28b6:	2800      	cmp	r0, #0
    28b8:	d1d3      	bne.n	2862 <xQueueSemaphoreTake+0xae>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    28ba:	0020      	movs	r0, r4
    28bc:	4b1e      	ldr	r3, [pc, #120]	; (2938 <xQueueSemaphoreTake+0x184>)
    28be:	4798      	blx	r3
    28c0:	2800      	cmp	r0, #0
    28c2:	d0c8      	beq.n	2856 <xQueueSemaphoreTake+0xa2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    28c4:	6823      	ldr	r3, [r4, #0]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d0bc      	beq.n	2844 <xQueueSemaphoreTake+0x90>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    28ca:	0020      	movs	r0, r4
    28cc:	3024      	adds	r0, #36	; 0x24
    28ce:	9901      	ldr	r1, [sp, #4]
    28d0:	4b1c      	ldr	r3, [pc, #112]	; (2944 <xQueueSemaphoreTake+0x190>)
    28d2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    28d4:	0020      	movs	r0, r4
    28d6:	4b16      	ldr	r3, [pc, #88]	; (2930 <xQueueSemaphoreTake+0x17c>)
    28d8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    28da:	4b16      	ldr	r3, [pc, #88]	; (2934 <xQueueSemaphoreTake+0x180>)
    28dc:	4798      	blx	r3
    28de:	2800      	cmp	r0, #0
    28e0:	d1c9      	bne.n	2876 <xQueueSemaphoreTake+0xc2>
					portYIELD_WITHIN_API();
    28e2:	4b0f      	ldr	r3, [pc, #60]	; (2920 <xQueueSemaphoreTake+0x16c>)
    28e4:	4798      	blx	r3
    28e6:	e7c6      	b.n	2876 <xQueueSemaphoreTake+0xc2>
					if( xInheritanceOccurred != pdFALSE )
    28e8:	2d00      	cmp	r5, #0
    28ea:	d100      	bne.n	28ee <xQueueSemaphoreTake+0x13a>
    28ec:	e794      	b.n	2818 <xQueueSemaphoreTake+0x64>
						taskENTER_CRITICAL();
    28ee:	4b09      	ldr	r3, [pc, #36]	; (2914 <xQueueSemaphoreTake+0x160>)
    28f0:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    28f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    28f4:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    28f6:	2b00      	cmp	r3, #0
    28f8:	d003      	beq.n	2902 <xQueueSemaphoreTake+0x14e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    28fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    28fc:	681b      	ldr	r3, [r3, #0]
    28fe:	3105      	adds	r1, #5
    2900:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    2902:	6860      	ldr	r0, [r4, #4]
    2904:	4b10      	ldr	r3, [pc, #64]	; (2948 <xQueueSemaphoreTake+0x194>)
    2906:	4798      	blx	r3
						taskEXIT_CRITICAL();
    2908:	4b06      	ldr	r3, [pc, #24]	; (2924 <xQueueSemaphoreTake+0x170>)
    290a:	4798      	blx	r3
				return errQUEUE_EMPTY;
    290c:	2500      	movs	r5, #0
    290e:	e783      	b.n	2818 <xQueueSemaphoreTake+0x64>
    2910:	0000333d 	.word	0x0000333d
    2914:	00002005 	.word	0x00002005
    2918:	000034fd 	.word	0x000034fd
    291c:	00003221 	.word	0x00003221
    2920:	00001fed 	.word	0x00001fed
    2924:	0000201d 	.word	0x0000201d
    2928:	000032a9 	.word	0x000032a9
    292c:	0000335d 	.word	0x0000335d
    2930:	00002265 	.word	0x00002265
    2934:	00002f19 	.word	0x00002f19
    2938:	0000213d 	.word	0x0000213d
    293c:	00002ddd 	.word	0x00002ddd
    2940:	000032c1 	.word	0x000032c1
    2944:	000031bd 	.word	0x000031bd
    2948:	00003471 	.word	0x00003471

0000294c <vQueueWaitForMessageRestricted>:
	{
    294c:	b570      	push	{r4, r5, r6, lr}
    294e:	0004      	movs	r4, r0
    2950:	000d      	movs	r5, r1
    2952:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    2954:	4b11      	ldr	r3, [pc, #68]	; (299c <vQueueWaitForMessageRestricted+0x50>)
    2956:	4798      	blx	r3
    2958:	2344      	movs	r3, #68	; 0x44
    295a:	5ce3      	ldrb	r3, [r4, r3]
    295c:	b25b      	sxtb	r3, r3
    295e:	3301      	adds	r3, #1
    2960:	d00d      	beq.n	297e <vQueueWaitForMessageRestricted+0x32>
    2962:	2345      	movs	r3, #69	; 0x45
    2964:	5ce3      	ldrb	r3, [r4, r3]
    2966:	b25b      	sxtb	r3, r3
    2968:	3301      	adds	r3, #1
    296a:	d00c      	beq.n	2986 <vQueueWaitForMessageRestricted+0x3a>
    296c:	4b0c      	ldr	r3, [pc, #48]	; (29a0 <vQueueWaitForMessageRestricted+0x54>)
    296e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2972:	2b00      	cmp	r3, #0
    2974:	d00b      	beq.n	298e <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    2976:	0020      	movs	r0, r4
    2978:	4b0a      	ldr	r3, [pc, #40]	; (29a4 <vQueueWaitForMessageRestricted+0x58>)
    297a:	4798      	blx	r3
	}
    297c:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    297e:	2200      	movs	r2, #0
    2980:	2344      	movs	r3, #68	; 0x44
    2982:	54e2      	strb	r2, [r4, r3]
    2984:	e7ed      	b.n	2962 <vQueueWaitForMessageRestricted+0x16>
    2986:	2200      	movs	r2, #0
    2988:	2345      	movs	r3, #69	; 0x45
    298a:	54e2      	strb	r2, [r4, r3]
    298c:	e7ee      	b.n	296c <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    298e:	0020      	movs	r0, r4
    2990:	3024      	adds	r0, #36	; 0x24
    2992:	0032      	movs	r2, r6
    2994:	0029      	movs	r1, r5
    2996:	4b04      	ldr	r3, [pc, #16]	; (29a8 <vQueueWaitForMessageRestricted+0x5c>)
    2998:	4798      	blx	r3
    299a:	e7ec      	b.n	2976 <vQueueWaitForMessageRestricted+0x2a>
    299c:	00002005 	.word	0x00002005
    29a0:	0000201d 	.word	0x0000201d
    29a4:	00002265 	.word	0x00002265
    29a8:	000031e9 	.word	0x000031e9

000029ac <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    29ac:	2800      	cmp	r0, #0
    29ae:	d00c      	beq.n	29ca <prvTaskIsTaskSuspended+0x1e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    29b0:	4a08      	ldr	r2, [pc, #32]	; (29d4 <prvTaskIsTaskSuspended+0x28>)
	BaseType_t xReturn = pdFALSE;
    29b2:	2100      	movs	r1, #0
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    29b4:	6943      	ldr	r3, [r0, #20]
    29b6:	4293      	cmp	r3, r2
    29b8:	d105      	bne.n	29c6 <prvTaskIsTaskSuspended+0x1a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    29ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
    29bc:	4a06      	ldr	r2, [pc, #24]	; (29d8 <prvTaskIsTaskSuspended+0x2c>)
    29be:	4293      	cmp	r3, r2
    29c0:	d005      	beq.n	29ce <prvTaskIsTaskSuspended+0x22>
	BaseType_t xReturn = pdFALSE;
    29c2:	4259      	negs	r1, r3
    29c4:	4159      	adcs	r1, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    29c6:	0008      	movs	r0, r1
    29c8:	4770      	bx	lr
		configASSERT( xTask );
    29ca:	b672      	cpsid	i
    29cc:	e7fe      	b.n	29cc <prvTaskIsTaskSuspended+0x20>
	BaseType_t xReturn = pdFALSE;
    29ce:	2100      	movs	r1, #0
		return xReturn;
    29d0:	e7f9      	b.n	29c6 <prvTaskIsTaskSuspended+0x1a>
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	20003fec 	.word	0x20003fec
    29d8:	20003fd4 	.word	0x20003fd4

000029dc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    29dc:	4b08      	ldr	r3, [pc, #32]	; (2a00 <prvResetNextTaskUnblockTime+0x24>)
    29de:	681b      	ldr	r3, [r3, #0]
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d007      	beq.n	29f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    29e6:	4b06      	ldr	r3, [pc, #24]	; (2a00 <prvResetNextTaskUnblockTime+0x24>)
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    29ec:	68db      	ldr	r3, [r3, #12]
    29ee:	685a      	ldr	r2, [r3, #4]
    29f0:	4b04      	ldr	r3, [pc, #16]	; (2a04 <prvResetNextTaskUnblockTime+0x28>)
    29f2:	601a      	str	r2, [r3, #0]
	}
}
    29f4:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    29f6:	2201      	movs	r2, #1
    29f8:	4252      	negs	r2, r2
    29fa:	4b02      	ldr	r3, [pc, #8]	; (2a04 <prvResetNextTaskUnblockTime+0x28>)
    29fc:	601a      	str	r2, [r3, #0]
    29fe:	e7f9      	b.n	29f4 <prvResetNextTaskUnblockTime+0x18>
    2a00:	20003f1c 	.word	0x20003f1c
    2a04:	20003fcc 	.word	0x20003fcc

00002a08 <prvIdleTask>:
{
    2a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a0a:	46d6      	mov	lr, sl
    2a0c:	464f      	mov	r7, r9
    2a0e:	4646      	mov	r6, r8
    2a10:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2a12:	4b14      	ldr	r3, [pc, #80]	; (2a64 <prvIdleTask+0x5c>)
    2a14:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    2a16:	4b14      	ldr	r3, [pc, #80]	; (2a68 <prvIdleTask+0x60>)
    2a18:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2a1a:	4f14      	ldr	r7, [pc, #80]	; (2a6c <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2a1c:	4b14      	ldr	r3, [pc, #80]	; (2a70 <prvIdleTask+0x68>)
    2a1e:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2a20:	464b      	mov	r3, r9
    2a22:	681b      	ldr	r3, [r3, #0]
    2a24:	2b00      	cmp	r3, #0
    2a26:	d016      	beq.n	2a56 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    2a28:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2a2a:	68fb      	ldr	r3, [r7, #12]
    2a2c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2a2e:	1d28      	adds	r0, r5, #4
    2a30:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    2a32:	4a10      	ldr	r2, [pc, #64]	; (2a74 <prvIdleTask+0x6c>)
    2a34:	6813      	ldr	r3, [r2, #0]
    2a36:	3b01      	subs	r3, #1
    2a38:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    2a3a:	4c0a      	ldr	r4, [pc, #40]	; (2a64 <prvIdleTask+0x5c>)
    2a3c:	6823      	ldr	r3, [r4, #0]
    2a3e:	3b01      	subs	r3, #1
    2a40:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    2a42:	4b0d      	ldr	r3, [pc, #52]	; (2a78 <prvIdleTask+0x70>)
    2a44:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    2a46:	6b28      	ldr	r0, [r5, #48]	; 0x30
    2a48:	4e0c      	ldr	r6, [pc, #48]	; (2a7c <prvIdleTask+0x74>)
    2a4a:	47b0      	blx	r6
			vPortFree( pxTCB );
    2a4c:	0028      	movs	r0, r5
    2a4e:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2a50:	6823      	ldr	r3, [r4, #0]
    2a52:	2b00      	cmp	r3, #0
    2a54:	d1e8      	bne.n	2a28 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2a56:	4b0a      	ldr	r3, [pc, #40]	; (2a80 <prvIdleTask+0x78>)
    2a58:	681b      	ldr	r3, [r3, #0]
    2a5a:	2b01      	cmp	r3, #1
    2a5c:	d9e0      	bls.n	2a20 <prvIdleTask+0x18>
				taskYIELD();
    2a5e:	4b09      	ldr	r3, [pc, #36]	; (2a84 <prvIdleTask+0x7c>)
    2a60:	4798      	blx	r3
    2a62:	e7dd      	b.n	2a20 <prvIdleTask+0x18>
    2a64:	20003f8c 	.word	0x20003f8c
    2a68:	00002005 	.word	0x00002005
    2a6c:	20004000 	.word	0x20004000
    2a70:	00001ecf 	.word	0x00001ecf
    2a74:	20003f88 	.word	0x20003f88
    2a78:	0000201d 	.word	0x0000201d
    2a7c:	00002131 	.word	0x00002131
    2a80:	20003f24 	.word	0x20003f24
    2a84:	00001fed 	.word	0x00001fed

00002a88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2a88:	b570      	push	{r4, r5, r6, lr}
    2a8a:	0004      	movs	r4, r0
    2a8c:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2a8e:	4b17      	ldr	r3, [pc, #92]	; (2aec <prvAddCurrentTaskToDelayedList+0x64>)
    2a90:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2a92:	4b17      	ldr	r3, [pc, #92]	; (2af0 <prvAddCurrentTaskToDelayedList+0x68>)
    2a94:	6818      	ldr	r0, [r3, #0]
    2a96:	3004      	adds	r0, #4
    2a98:	4b16      	ldr	r3, [pc, #88]	; (2af4 <prvAddCurrentTaskToDelayedList+0x6c>)
    2a9a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2a9c:	1c63      	adds	r3, r4, #1
    2a9e:	d013      	beq.n	2ac8 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2aa0:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2aa2:	4b13      	ldr	r3, [pc, #76]	; (2af0 <prvAddCurrentTaskToDelayedList+0x68>)
    2aa4:	681b      	ldr	r3, [r3, #0]
    2aa6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    2aa8:	42a6      	cmp	r6, r4
    2aaa:	d816      	bhi.n	2ada <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2aac:	4b12      	ldr	r3, [pc, #72]	; (2af8 <prvAddCurrentTaskToDelayedList+0x70>)
    2aae:	6818      	ldr	r0, [r3, #0]
    2ab0:	4b0f      	ldr	r3, [pc, #60]	; (2af0 <prvAddCurrentTaskToDelayedList+0x68>)
    2ab2:	6819      	ldr	r1, [r3, #0]
    2ab4:	3104      	adds	r1, #4
    2ab6:	4b11      	ldr	r3, [pc, #68]	; (2afc <prvAddCurrentTaskToDelayedList+0x74>)
    2ab8:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    2aba:	4b11      	ldr	r3, [pc, #68]	; (2b00 <prvAddCurrentTaskToDelayedList+0x78>)
    2abc:	681b      	ldr	r3, [r3, #0]
    2abe:	429c      	cmp	r4, r3
    2ac0:	d212      	bcs.n	2ae8 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    2ac2:	4b0f      	ldr	r3, [pc, #60]	; (2b00 <prvAddCurrentTaskToDelayedList+0x78>)
    2ac4:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2ac6:	e00f      	b.n	2ae8 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2ac8:	2d00      	cmp	r5, #0
    2aca:	d0e9      	beq.n	2aa0 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2acc:	4b08      	ldr	r3, [pc, #32]	; (2af0 <prvAddCurrentTaskToDelayedList+0x68>)
    2ace:	6819      	ldr	r1, [r3, #0]
    2ad0:	3104      	adds	r1, #4
    2ad2:	480c      	ldr	r0, [pc, #48]	; (2b04 <prvAddCurrentTaskToDelayedList+0x7c>)
    2ad4:	4b0c      	ldr	r3, [pc, #48]	; (2b08 <prvAddCurrentTaskToDelayedList+0x80>)
    2ad6:	4798      	blx	r3
    2ad8:	e006      	b.n	2ae8 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2ada:	4b0c      	ldr	r3, [pc, #48]	; (2b0c <prvAddCurrentTaskToDelayedList+0x84>)
    2adc:	6818      	ldr	r0, [r3, #0]
    2ade:	4b04      	ldr	r3, [pc, #16]	; (2af0 <prvAddCurrentTaskToDelayedList+0x68>)
    2ae0:	6819      	ldr	r1, [r3, #0]
    2ae2:	3104      	adds	r1, #4
    2ae4:	4b05      	ldr	r3, [pc, #20]	; (2afc <prvAddCurrentTaskToDelayedList+0x74>)
    2ae6:	4798      	blx	r3
}
    2ae8:	bd70      	pop	{r4, r5, r6, pc}
    2aea:	46c0      	nop			; (mov r8, r8)
    2aec:	20004014 	.word	0x20004014
    2af0:	20003f18 	.word	0x20003f18
    2af4:	00001ecf 	.word	0x00001ecf
    2af8:	20003f1c 	.word	0x20003f1c
    2afc:	00001ea1 	.word	0x00001ea1
    2b00:	20003fcc 	.word	0x20003fcc
    2b04:	20003fec 	.word	0x20003fec
    2b08:	00001e89 	.word	0x00001e89
    2b0c:	20003f20 	.word	0x20003f20

00002b10 <xTaskCreate>:
	{
    2b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b12:	46c6      	mov	lr, r8
    2b14:	b500      	push	{lr}
    2b16:	b084      	sub	sp, #16
    2b18:	9001      	str	r0, [sp, #4]
    2b1a:	000d      	movs	r5, r1
    2b1c:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2b1e:	0097      	lsls	r7, r2, #2
    2b20:	0038      	movs	r0, r7
    2b22:	4b5b      	ldr	r3, [pc, #364]	; (2c90 <xTaskCreate+0x180>)
    2b24:	4798      	blx	r3
    2b26:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    2b28:	d100      	bne.n	2b2c <xTaskCreate+0x1c>
    2b2a:	e081      	b.n	2c30 <xTaskCreate+0x120>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    2b2c:	204c      	movs	r0, #76	; 0x4c
    2b2e:	4b58      	ldr	r3, [pc, #352]	; (2c90 <xTaskCreate+0x180>)
    2b30:	4798      	blx	r3
    2b32:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    2b34:	d100      	bne.n	2b38 <xTaskCreate+0x28>
    2b36:	e078      	b.n	2c2a <xTaskCreate+0x11a>
					pxNewTCB->pxStack = pxStack;
    2b38:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    2b3a:	1f38      	subs	r0, r7, #4
    2b3c:	1830      	adds	r0, r6, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2b3e:	2307      	movs	r3, #7
    2b40:	4398      	bics	r0, r3
    2b42:	4680      	mov	r8, r0
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2b44:	782a      	ldrb	r2, [r5, #0]
    2b46:	332d      	adds	r3, #45	; 0x2d
    2b48:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    2b4a:	782b      	ldrb	r3, [r5, #0]
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d00d      	beq.n	2b6c <xTaskCreate+0x5c>
    2b50:	3501      	adds	r5, #1
    2b52:	0023      	movs	r3, r4
    2b54:	3335      	adds	r3, #53	; 0x35
    2b56:	0020      	movs	r0, r4
    2b58:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2b5a:	782a      	ldrb	r2, [r5, #0]
    2b5c:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    2b5e:	782a      	ldrb	r2, [r5, #0]
    2b60:	2a00      	cmp	r2, #0
    2b62:	d003      	beq.n	2b6c <xTaskCreate+0x5c>
    2b64:	3501      	adds	r5, #1
    2b66:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2b68:	4283      	cmp	r3, r0
    2b6a:	d1f6      	bne.n	2b5a <xTaskCreate+0x4a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2b6c:	2200      	movs	r2, #0
    2b6e:	233b      	movs	r3, #59	; 0x3b
    2b70:	54e2      	strb	r2, [r4, r3]
    2b72:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    2b74:	2f04      	cmp	r7, #4
    2b76:	d900      	bls.n	2b7a <xTaskCreate+0x6a>
    2b78:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    2b7a:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    2b7c:	63e7      	str	r7, [r4, #60]	; 0x3c
		pxNewTCB->uxMutexesHeld = 0;
    2b7e:	2600      	movs	r6, #0
    2b80:	6426      	str	r6, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2b82:	1d23      	adds	r3, r4, #4
    2b84:	9303      	str	r3, [sp, #12]
    2b86:	0018      	movs	r0, r3
    2b88:	4d42      	ldr	r5, [pc, #264]	; (2c94 <xTaskCreate+0x184>)
    2b8a:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2b8c:	0020      	movs	r0, r4
    2b8e:	3018      	adds	r0, #24
    2b90:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2b92:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2b94:	2305      	movs	r3, #5
    2b96:	1bdb      	subs	r3, r3, r7
    2b98:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2b9a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    2b9c:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2b9e:	2348      	movs	r3, #72	; 0x48
    2ba0:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2ba2:	9a02      	ldr	r2, [sp, #8]
    2ba4:	9901      	ldr	r1, [sp, #4]
    2ba6:	4640      	mov	r0, r8
    2ba8:	4b3b      	ldr	r3, [pc, #236]	; (2c98 <xTaskCreate+0x188>)
    2baa:	4798      	blx	r3
    2bac:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    2bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d000      	beq.n	2bb6 <xTaskCreate+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2bb4:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    2bb6:	4b39      	ldr	r3, [pc, #228]	; (2c9c <xTaskCreate+0x18c>)
    2bb8:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    2bba:	4a39      	ldr	r2, [pc, #228]	; (2ca0 <xTaskCreate+0x190>)
    2bbc:	6813      	ldr	r3, [r2, #0]
    2bbe:	3301      	adds	r3, #1
    2bc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    2bc2:	4b38      	ldr	r3, [pc, #224]	; (2ca4 <xTaskCreate+0x194>)
    2bc4:	681b      	ldr	r3, [r3, #0]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d035      	beq.n	2c36 <xTaskCreate+0x126>
			if( xSchedulerRunning == pdFALSE )
    2bca:	4b37      	ldr	r3, [pc, #220]	; (2ca8 <xTaskCreate+0x198>)
    2bcc:	681b      	ldr	r3, [r3, #0]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d107      	bne.n	2be2 <xTaskCreate+0xd2>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2bd2:	4b34      	ldr	r3, [pc, #208]	; (2ca4 <xTaskCreate+0x194>)
    2bd4:	681b      	ldr	r3, [r3, #0]
    2bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2bda:	4293      	cmp	r3, r2
    2bdc:	d801      	bhi.n	2be2 <xTaskCreate+0xd2>
					pxCurrentTCB = pxNewTCB;
    2bde:	4b31      	ldr	r3, [pc, #196]	; (2ca4 <xTaskCreate+0x194>)
    2be0:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    2be2:	4a32      	ldr	r2, [pc, #200]	; (2cac <xTaskCreate+0x19c>)
    2be4:	6813      	ldr	r3, [r2, #0]
    2be6:	3301      	adds	r3, #1
    2be8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
    2bea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2bec:	4a30      	ldr	r2, [pc, #192]	; (2cb0 <xTaskCreate+0x1a0>)
    2bee:	6812      	ldr	r2, [r2, #0]
    2bf0:	4293      	cmp	r3, r2
    2bf2:	d901      	bls.n	2bf8 <xTaskCreate+0xe8>
    2bf4:	4a2e      	ldr	r2, [pc, #184]	; (2cb0 <xTaskCreate+0x1a0>)
    2bf6:	6013      	str	r3, [r2, #0]
    2bf8:	0098      	lsls	r0, r3, #2
    2bfa:	18c0      	adds	r0, r0, r3
    2bfc:	0080      	lsls	r0, r0, #2
    2bfe:	4b2d      	ldr	r3, [pc, #180]	; (2cb4 <xTaskCreate+0x1a4>)
    2c00:	1818      	adds	r0, r3, r0
    2c02:	9903      	ldr	r1, [sp, #12]
    2c04:	4b2c      	ldr	r3, [pc, #176]	; (2cb8 <xTaskCreate+0x1a8>)
    2c06:	4798      	blx	r3
	taskEXIT_CRITICAL();
    2c08:	4b2c      	ldr	r3, [pc, #176]	; (2cbc <xTaskCreate+0x1ac>)
    2c0a:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    2c0c:	4b26      	ldr	r3, [pc, #152]	; (2ca8 <xTaskCreate+0x198>)
    2c0e:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    2c10:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    2c12:	2b00      	cmp	r3, #0
    2c14:	d005      	beq.n	2c22 <xTaskCreate+0x112>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    2c16:	4b23      	ldr	r3, [pc, #140]	; (2ca4 <xTaskCreate+0x194>)
    2c18:	681b      	ldr	r3, [r3, #0]
    2c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2c1e:	429a      	cmp	r2, r3
    2c20:	d331      	bcc.n	2c86 <xTaskCreate+0x176>
	}
    2c22:	b004      	add	sp, #16
    2c24:	bc04      	pop	{r2}
    2c26:	4690      	mov	r8, r2
    2c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    2c2a:	0030      	movs	r0, r6
    2c2c:	4b24      	ldr	r3, [pc, #144]	; (2cc0 <xTaskCreate+0x1b0>)
    2c2e:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2c30:	2001      	movs	r0, #1
    2c32:	4240      	negs	r0, r0
    2c34:	e7f5      	b.n	2c22 <xTaskCreate+0x112>
			pxCurrentTCB = pxNewTCB;
    2c36:	4b1b      	ldr	r3, [pc, #108]	; (2ca4 <xTaskCreate+0x194>)
    2c38:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2c3a:	6813      	ldr	r3, [r2, #0]
    2c3c:	2b01      	cmp	r3, #1
    2c3e:	d1d0      	bne.n	2be2 <xTaskCreate+0xd2>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2c40:	4f1c      	ldr	r7, [pc, #112]	; (2cb4 <xTaskCreate+0x1a4>)
    2c42:	0038      	movs	r0, r7
    2c44:	4e1f      	ldr	r6, [pc, #124]	; (2cc4 <xTaskCreate+0x1b4>)
    2c46:	47b0      	blx	r6
    2c48:	0038      	movs	r0, r7
    2c4a:	3014      	adds	r0, #20
    2c4c:	47b0      	blx	r6
    2c4e:	0038      	movs	r0, r7
    2c50:	3028      	adds	r0, #40	; 0x28
    2c52:	47b0      	blx	r6
    2c54:	0038      	movs	r0, r7
    2c56:	303c      	adds	r0, #60	; 0x3c
    2c58:	47b0      	blx	r6
    2c5a:	0038      	movs	r0, r7
    2c5c:	3050      	adds	r0, #80	; 0x50
    2c5e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    2c60:	4b19      	ldr	r3, [pc, #100]	; (2cc8 <xTaskCreate+0x1b8>)
    2c62:	4698      	mov	r8, r3
    2c64:	0018      	movs	r0, r3
    2c66:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2c68:	4f18      	ldr	r7, [pc, #96]	; (2ccc <xTaskCreate+0x1bc>)
    2c6a:	0038      	movs	r0, r7
    2c6c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    2c6e:	4818      	ldr	r0, [pc, #96]	; (2cd0 <xTaskCreate+0x1c0>)
    2c70:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    2c72:	4818      	ldr	r0, [pc, #96]	; (2cd4 <xTaskCreate+0x1c4>)
    2c74:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    2c76:	4818      	ldr	r0, [pc, #96]	; (2cd8 <xTaskCreate+0x1c8>)
    2c78:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    2c7a:	4b18      	ldr	r3, [pc, #96]	; (2cdc <xTaskCreate+0x1cc>)
    2c7c:	4642      	mov	r2, r8
    2c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2c80:	4b17      	ldr	r3, [pc, #92]	; (2ce0 <xTaskCreate+0x1d0>)
    2c82:	601f      	str	r7, [r3, #0]
    2c84:	e7ad      	b.n	2be2 <xTaskCreate+0xd2>
			taskYIELD_IF_USING_PREEMPTION();
    2c86:	4b17      	ldr	r3, [pc, #92]	; (2ce4 <xTaskCreate+0x1d4>)
    2c88:	4798      	blx	r3
			xReturn = pdPASS;
    2c8a:	2001      	movs	r0, #1
    2c8c:	e7c9      	b.n	2c22 <xTaskCreate+0x112>
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	000020c5 	.word	0x000020c5
    2c94:	00001e83 	.word	0x00001e83
    2c98:	00001f55 	.word	0x00001f55
    2c9c:	00002005 	.word	0x00002005
    2ca0:	20003f88 	.word	0x20003f88
    2ca4:	20003f18 	.word	0x20003f18
    2ca8:	20003fe8 	.word	0x20003fe8
    2cac:	20003f98 	.word	0x20003f98
    2cb0:	20003f9c 	.word	0x20003f9c
    2cb4:	20003f24 	.word	0x20003f24
    2cb8:	00001e89 	.word	0x00001e89
    2cbc:	0000201d 	.word	0x0000201d
    2cc0:	00002131 	.word	0x00002131
    2cc4:	00001e6d 	.word	0x00001e6d
    2cc8:	20003fa0 	.word	0x20003fa0
    2ccc:	20003fb4 	.word	0x20003fb4
    2cd0:	20003fd4 	.word	0x20003fd4
    2cd4:	20004000 	.word	0x20004000
    2cd8:	20003fec 	.word	0x20003fec
    2cdc:	20003f1c 	.word	0x20003f1c
    2ce0:	20003f20 	.word	0x20003f20
    2ce4:	00001fed 	.word	0x00001fed

00002ce8 <vTaskResume>:
	{
    2ce8:	b570      	push	{r4, r5, r6, lr}
    2cea:	1e04      	subs	r4, r0, #0
		configASSERT( xTaskToResume );
    2cec:	d00d      	beq.n	2d0a <vTaskResume+0x22>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    2cee:	4b16      	ldr	r3, [pc, #88]	; (2d48 <vTaskResume+0x60>)
    2cf0:	681b      	ldr	r3, [r3, #0]
    2cf2:	4298      	cmp	r0, r3
    2cf4:	d008      	beq.n	2d08 <vTaskResume+0x20>
			taskENTER_CRITICAL();
    2cf6:	4b15      	ldr	r3, [pc, #84]	; (2d4c <vTaskResume+0x64>)
    2cf8:	4798      	blx	r3
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    2cfa:	0020      	movs	r0, r4
    2cfc:	4b14      	ldr	r3, [pc, #80]	; (2d50 <vTaskResume+0x68>)
    2cfe:	4798      	blx	r3
    2d00:	2800      	cmp	r0, #0
    2d02:	d104      	bne.n	2d0e <vTaskResume+0x26>
			taskEXIT_CRITICAL();
    2d04:	4b13      	ldr	r3, [pc, #76]	; (2d54 <vTaskResume+0x6c>)
    2d06:	4798      	blx	r3
	}
    2d08:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( xTaskToResume );
    2d0a:	b672      	cpsid	i
    2d0c:	e7fe      	b.n	2d0c <vTaskResume+0x24>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    2d0e:	1d25      	adds	r5, r4, #4
    2d10:	0028      	movs	r0, r5
    2d12:	4b11      	ldr	r3, [pc, #68]	; (2d58 <vTaskResume+0x70>)
    2d14:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2d18:	4a10      	ldr	r2, [pc, #64]	; (2d5c <vTaskResume+0x74>)
    2d1a:	6812      	ldr	r2, [r2, #0]
    2d1c:	4293      	cmp	r3, r2
    2d1e:	d901      	bls.n	2d24 <vTaskResume+0x3c>
    2d20:	4a0e      	ldr	r2, [pc, #56]	; (2d5c <vTaskResume+0x74>)
    2d22:	6013      	str	r3, [r2, #0]
    2d24:	0098      	lsls	r0, r3, #2
    2d26:	18c0      	adds	r0, r0, r3
    2d28:	0080      	lsls	r0, r0, #2
    2d2a:	4b0d      	ldr	r3, [pc, #52]	; (2d60 <vTaskResume+0x78>)
    2d2c:	1818      	adds	r0, r3, r0
    2d2e:	0029      	movs	r1, r5
    2d30:	4b0c      	ldr	r3, [pc, #48]	; (2d64 <vTaskResume+0x7c>)
    2d32:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2d34:	4b04      	ldr	r3, [pc, #16]	; (2d48 <vTaskResume+0x60>)
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d3c:	429a      	cmp	r2, r3
    2d3e:	d3e1      	bcc.n	2d04 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
    2d40:	4b09      	ldr	r3, [pc, #36]	; (2d68 <vTaskResume+0x80>)
    2d42:	4798      	blx	r3
    2d44:	e7de      	b.n	2d04 <vTaskResume+0x1c>
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	20003f18 	.word	0x20003f18
    2d4c:	00002005 	.word	0x00002005
    2d50:	000029ad 	.word	0x000029ad
    2d54:	0000201d 	.word	0x0000201d
    2d58:	00001ecf 	.word	0x00001ecf
    2d5c:	20003f9c 	.word	0x20003f9c
    2d60:	20003f24 	.word	0x20003f24
    2d64:	00001e89 	.word	0x00001e89
    2d68:	00001fed 	.word	0x00001fed

00002d6c <vTaskStartScheduler>:
{
    2d6c:	b510      	push	{r4, lr}
    2d6e:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    2d70:	4b11      	ldr	r3, [pc, #68]	; (2db8 <vTaskStartScheduler+0x4c>)
    2d72:	9301      	str	r3, [sp, #4]
    2d74:	2300      	movs	r3, #0
    2d76:	9300      	str	r3, [sp, #0]
    2d78:	2264      	movs	r2, #100	; 0x64
    2d7a:	4910      	ldr	r1, [pc, #64]	; (2dbc <vTaskStartScheduler+0x50>)
    2d7c:	4810      	ldr	r0, [pc, #64]	; (2dc0 <vTaskStartScheduler+0x54>)
    2d7e:	4c11      	ldr	r4, [pc, #68]	; (2dc4 <vTaskStartScheduler+0x58>)
    2d80:	47a0      	blx	r4
		if( xReturn == pdPASS )
    2d82:	2801      	cmp	r0, #1
    2d84:	d003      	beq.n	2d8e <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    2d86:	1c43      	adds	r3, r0, #1
    2d88:	d013      	beq.n	2db2 <vTaskStartScheduler+0x46>
}
    2d8a:	b002      	add	sp, #8
    2d8c:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    2d8e:	4b0e      	ldr	r3, [pc, #56]	; (2dc8 <vTaskStartScheduler+0x5c>)
    2d90:	4798      	blx	r3
	if( xReturn == pdPASS )
    2d92:	2801      	cmp	r0, #1
    2d94:	d1f7      	bne.n	2d86 <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    2d96:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    2d98:	2201      	movs	r2, #1
    2d9a:	4252      	negs	r2, r2
    2d9c:	4b0b      	ldr	r3, [pc, #44]	; (2dcc <vTaskStartScheduler+0x60>)
    2d9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    2da0:	3202      	adds	r2, #2
    2da2:	4b0b      	ldr	r3, [pc, #44]	; (2dd0 <vTaskStartScheduler+0x64>)
    2da4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2da6:	2200      	movs	r2, #0
    2da8:	4b0a      	ldr	r3, [pc, #40]	; (2dd4 <vTaskStartScheduler+0x68>)
    2daa:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    2dac:	4b0a      	ldr	r3, [pc, #40]	; (2dd8 <vTaskStartScheduler+0x6c>)
    2dae:	4798      	blx	r3
    2db0:	e7eb      	b.n	2d8a <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    2db2:	b672      	cpsid	i
    2db4:	e7fe      	b.n	2db4 <vTaskStartScheduler+0x48>
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	20003fc8 	.word	0x20003fc8
    2dbc:	00004450 	.word	0x00004450
    2dc0:	00002a09 	.word	0x00002a09
    2dc4:	00002b11 	.word	0x00002b11
    2dc8:	000035c1 	.word	0x000035c1
    2dcc:	20003fcc 	.word	0x20003fcc
    2dd0:	20003fe8 	.word	0x20003fe8
    2dd4:	20004014 	.word	0x20004014
    2dd8:	00001f79 	.word	0x00001f79

00002ddc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    2ddc:	4a02      	ldr	r2, [pc, #8]	; (2de8 <vTaskSuspendAll+0xc>)
    2dde:	6813      	ldr	r3, [r2, #0]
    2de0:	3301      	adds	r3, #1
    2de2:	6013      	str	r3, [r2, #0]
}
    2de4:	4770      	bx	lr
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	20003f94 	.word	0x20003f94

00002dec <xTaskGetTickCount>:
		xTicks = xTickCount;
    2dec:	4b01      	ldr	r3, [pc, #4]	; (2df4 <xTaskGetTickCount+0x8>)
    2dee:	6818      	ldr	r0, [r3, #0]
}
    2df0:	4770      	bx	lr
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	20004014 	.word	0x20004014

00002df8 <xTaskIncrementTick>:
{
    2df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfa:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2dfc:	4b38      	ldr	r3, [pc, #224]	; (2ee0 <xTaskIncrementTick+0xe8>)
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	2b00      	cmp	r3, #0
    2e02:	d160      	bne.n	2ec6 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    2e04:	4b37      	ldr	r3, [pc, #220]	; (2ee4 <xTaskIncrementTick+0xec>)
    2e06:	681d      	ldr	r5, [r3, #0]
    2e08:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    2e0a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    2e0c:	2d00      	cmp	r5, #0
    2e0e:	d112      	bne.n	2e36 <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
    2e10:	4b35      	ldr	r3, [pc, #212]	; (2ee8 <xTaskIncrementTick+0xf0>)
    2e12:	681b      	ldr	r3, [r3, #0]
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	2b00      	cmp	r3, #0
    2e18:	d001      	beq.n	2e1e <xTaskIncrementTick+0x26>
    2e1a:	b672      	cpsid	i
    2e1c:	e7fe      	b.n	2e1c <xTaskIncrementTick+0x24>
    2e1e:	4a32      	ldr	r2, [pc, #200]	; (2ee8 <xTaskIncrementTick+0xf0>)
    2e20:	6811      	ldr	r1, [r2, #0]
    2e22:	4b32      	ldr	r3, [pc, #200]	; (2eec <xTaskIncrementTick+0xf4>)
    2e24:	6818      	ldr	r0, [r3, #0]
    2e26:	6010      	str	r0, [r2, #0]
    2e28:	6019      	str	r1, [r3, #0]
    2e2a:	4a31      	ldr	r2, [pc, #196]	; (2ef0 <xTaskIncrementTick+0xf8>)
    2e2c:	6813      	ldr	r3, [r2, #0]
    2e2e:	3301      	adds	r3, #1
    2e30:	6013      	str	r3, [r2, #0]
    2e32:	4b30      	ldr	r3, [pc, #192]	; (2ef4 <xTaskIncrementTick+0xfc>)
    2e34:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    2e36:	4b30      	ldr	r3, [pc, #192]	; (2ef8 <xTaskIncrementTick+0x100>)
    2e38:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    2e3a:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    2e3c:	429d      	cmp	r5, r3
    2e3e:	d333      	bcc.n	2ea8 <xTaskIncrementTick+0xb0>
    2e40:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2e42:	4f29      	ldr	r7, [pc, #164]	; (2ee8 <xTaskIncrementTick+0xf0>)
    2e44:	683b      	ldr	r3, [r7, #0]
    2e46:	681b      	ldr	r3, [r3, #0]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d029      	beq.n	2ea0 <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2e4c:	4b26      	ldr	r3, [pc, #152]	; (2ee8 <xTaskIncrementTick+0xf0>)
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	68db      	ldr	r3, [r3, #12]
    2e52:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    2e54:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    2e56:	429d      	cmp	r5, r3
    2e58:	d332      	bcc.n	2ec0 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2e5a:	1d33      	adds	r3, r6, #4
    2e5c:	9301      	str	r3, [sp, #4]
    2e5e:	0018      	movs	r0, r3
    2e60:	4b26      	ldr	r3, [pc, #152]	; (2efc <xTaskIncrementTick+0x104>)
    2e62:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2e64:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2e66:	2b00      	cmp	r3, #0
    2e68:	d003      	beq.n	2e72 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2e6a:	0030      	movs	r0, r6
    2e6c:	3018      	adds	r0, #24
    2e6e:	4b23      	ldr	r3, [pc, #140]	; (2efc <xTaskIncrementTick+0x104>)
    2e70:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2e72:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2e74:	4a22      	ldr	r2, [pc, #136]	; (2f00 <xTaskIncrementTick+0x108>)
    2e76:	6812      	ldr	r2, [r2, #0]
    2e78:	4293      	cmp	r3, r2
    2e7a:	d901      	bls.n	2e80 <xTaskIncrementTick+0x88>
    2e7c:	4a20      	ldr	r2, [pc, #128]	; (2f00 <xTaskIncrementTick+0x108>)
    2e7e:	6013      	str	r3, [r2, #0]
    2e80:	0098      	lsls	r0, r3, #2
    2e82:	18c0      	adds	r0, r0, r3
    2e84:	0080      	lsls	r0, r0, #2
    2e86:	4b1f      	ldr	r3, [pc, #124]	; (2f04 <xTaskIncrementTick+0x10c>)
    2e88:	1818      	adds	r0, r3, r0
    2e8a:	9901      	ldr	r1, [sp, #4]
    2e8c:	4b1e      	ldr	r3, [pc, #120]	; (2f08 <xTaskIncrementTick+0x110>)
    2e8e:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2e90:	4b1e      	ldr	r3, [pc, #120]	; (2f0c <xTaskIncrementTick+0x114>)
    2e92:	681b      	ldr	r3, [r3, #0]
    2e94:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e98:	429a      	cmp	r2, r3
    2e9a:	d3d3      	bcc.n	2e44 <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
    2e9c:	2401      	movs	r4, #1
    2e9e:	e7d1      	b.n	2e44 <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2ea0:	2201      	movs	r2, #1
    2ea2:	4252      	negs	r2, r2
    2ea4:	4b14      	ldr	r3, [pc, #80]	; (2ef8 <xTaskIncrementTick+0x100>)
    2ea6:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    2ea8:	4b18      	ldr	r3, [pc, #96]	; (2f0c <xTaskIncrementTick+0x114>)
    2eaa:	681b      	ldr	r3, [r3, #0]
    2eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2eae:	0093      	lsls	r3, r2, #2
    2eb0:	189b      	adds	r3, r3, r2
    2eb2:	009b      	lsls	r3, r3, #2
    2eb4:	4a13      	ldr	r2, [pc, #76]	; (2f04 <xTaskIncrementTick+0x10c>)
    2eb6:	589b      	ldr	r3, [r3, r2]
    2eb8:	2b01      	cmp	r3, #1
    2eba:	d909      	bls.n	2ed0 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
    2ebc:	2401      	movs	r4, #1
    2ebe:	e007      	b.n	2ed0 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
    2ec0:	4a0d      	ldr	r2, [pc, #52]	; (2ef8 <xTaskIncrementTick+0x100>)
    2ec2:	6013      	str	r3, [r2, #0]
						break;
    2ec4:	e7f0      	b.n	2ea8 <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
    2ec6:	4a12      	ldr	r2, [pc, #72]	; (2f10 <xTaskIncrementTick+0x118>)
    2ec8:	6813      	ldr	r3, [r2, #0]
    2eca:	3301      	adds	r3, #1
    2ecc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    2ece:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    2ed0:	4b10      	ldr	r3, [pc, #64]	; (2f14 <xTaskIncrementTick+0x11c>)
    2ed2:	681b      	ldr	r3, [r3, #0]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d000      	beq.n	2eda <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
    2ed8:	2401      	movs	r4, #1
}
    2eda:	0020      	movs	r0, r4
    2edc:	b003      	add	sp, #12
    2ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ee0:	20003f94 	.word	0x20003f94
    2ee4:	20004014 	.word	0x20004014
    2ee8:	20003f1c 	.word	0x20003f1c
    2eec:	20003f20 	.word	0x20003f20
    2ef0:	20003fd0 	.word	0x20003fd0
    2ef4:	000029dd 	.word	0x000029dd
    2ef8:	20003fcc 	.word	0x20003fcc
    2efc:	00001ecf 	.word	0x00001ecf
    2f00:	20003f9c 	.word	0x20003f9c
    2f04:	20003f24 	.word	0x20003f24
    2f08:	00001e89 	.word	0x00001e89
    2f0c:	20003f18 	.word	0x20003f18
    2f10:	20003f90 	.word	0x20003f90
    2f14:	20004018 	.word	0x20004018

00002f18 <xTaskResumeAll>:
{
    2f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    2f1a:	4b30      	ldr	r3, [pc, #192]	; (2fdc <xTaskResumeAll+0xc4>)
    2f1c:	681b      	ldr	r3, [r3, #0]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d101      	bne.n	2f26 <xTaskResumeAll+0xe>
    2f22:	b672      	cpsid	i
    2f24:	e7fe      	b.n	2f24 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    2f26:	4b2e      	ldr	r3, [pc, #184]	; (2fe0 <xTaskResumeAll+0xc8>)
    2f28:	4798      	blx	r3
		--uxSchedulerSuspended;
    2f2a:	4b2c      	ldr	r3, [pc, #176]	; (2fdc <xTaskResumeAll+0xc4>)
    2f2c:	681a      	ldr	r2, [r3, #0]
    2f2e:	3a01      	subs	r2, #1
    2f30:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2f32:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    2f34:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2f36:	2b00      	cmp	r3, #0
    2f38:	d103      	bne.n	2f42 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2f3a:	4b2a      	ldr	r3, [pc, #168]	; (2fe4 <xTaskResumeAll+0xcc>)
    2f3c:	681b      	ldr	r3, [r3, #0]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d103      	bne.n	2f4a <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    2f42:	4b29      	ldr	r3, [pc, #164]	; (2fe8 <xTaskResumeAll+0xd0>)
    2f44:	4798      	blx	r3
}
    2f46:	0020      	movs	r0, r4
    2f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2f4a:	4d28      	ldr	r5, [pc, #160]	; (2fec <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2f4c:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2f4e:	682b      	ldr	r3, [r5, #0]
    2f50:	2b00      	cmp	r3, #0
    2f52:	d022      	beq.n	2f9a <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2f54:	68fb      	ldr	r3, [r7, #12]
    2f56:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2f58:	0020      	movs	r0, r4
    2f5a:	3018      	adds	r0, #24
    2f5c:	4b24      	ldr	r3, [pc, #144]	; (2ff0 <xTaskResumeAll+0xd8>)
    2f5e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2f60:	1d26      	adds	r6, r4, #4
    2f62:	0030      	movs	r0, r6
    2f64:	4b22      	ldr	r3, [pc, #136]	; (2ff0 <xTaskResumeAll+0xd8>)
    2f66:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2f68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2f6a:	4a22      	ldr	r2, [pc, #136]	; (2ff4 <xTaskResumeAll+0xdc>)
    2f6c:	6812      	ldr	r2, [r2, #0]
    2f6e:	4293      	cmp	r3, r2
    2f70:	d901      	bls.n	2f76 <xTaskResumeAll+0x5e>
    2f72:	4a20      	ldr	r2, [pc, #128]	; (2ff4 <xTaskResumeAll+0xdc>)
    2f74:	6013      	str	r3, [r2, #0]
    2f76:	0098      	lsls	r0, r3, #2
    2f78:	18c0      	adds	r0, r0, r3
    2f7a:	0080      	lsls	r0, r0, #2
    2f7c:	4b1e      	ldr	r3, [pc, #120]	; (2ff8 <xTaskResumeAll+0xe0>)
    2f7e:	1818      	adds	r0, r3, r0
    2f80:	0031      	movs	r1, r6
    2f82:	4b1e      	ldr	r3, [pc, #120]	; (2ffc <xTaskResumeAll+0xe4>)
    2f84:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2f86:	4b1e      	ldr	r3, [pc, #120]	; (3000 <xTaskResumeAll+0xe8>)
    2f88:	681b      	ldr	r3, [r3, #0]
    2f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2f8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2f8e:	429a      	cmp	r2, r3
    2f90:	d3dd      	bcc.n	2f4e <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    2f92:	2201      	movs	r2, #1
    2f94:	4b1b      	ldr	r3, [pc, #108]	; (3004 <xTaskResumeAll+0xec>)
    2f96:	601a      	str	r2, [r3, #0]
    2f98:	e7d9      	b.n	2f4e <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    2f9a:	2c00      	cmp	r4, #0
    2f9c:	d001      	beq.n	2fa2 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    2f9e:	4b1a      	ldr	r3, [pc, #104]	; (3008 <xTaskResumeAll+0xf0>)
    2fa0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2fa2:	4b1a      	ldr	r3, [pc, #104]	; (300c <xTaskResumeAll+0xf4>)
    2fa4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    2fa6:	2c00      	cmp	r4, #0
    2fa8:	d00e      	beq.n	2fc8 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    2faa:	4f19      	ldr	r7, [pc, #100]	; (3010 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    2fac:	4e15      	ldr	r6, [pc, #84]	; (3004 <xTaskResumeAll+0xec>)
    2fae:	2501      	movs	r5, #1
    2fb0:	e002      	b.n	2fb8 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    2fb2:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    2fb4:	2c00      	cmp	r4, #0
    2fb6:	d004      	beq.n	2fc2 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    2fb8:	47b8      	blx	r7
    2fba:	2800      	cmp	r0, #0
    2fbc:	d0f9      	beq.n	2fb2 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    2fbe:	6035      	str	r5, [r6, #0]
    2fc0:	e7f7      	b.n	2fb2 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    2fc2:	2200      	movs	r2, #0
    2fc4:	4b11      	ldr	r3, [pc, #68]	; (300c <xTaskResumeAll+0xf4>)
    2fc6:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    2fc8:	4b0e      	ldr	r3, [pc, #56]	; (3004 <xTaskResumeAll+0xec>)
    2fca:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    2fcc:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d0b7      	beq.n	2f42 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    2fd2:	4b10      	ldr	r3, [pc, #64]	; (3014 <xTaskResumeAll+0xfc>)
    2fd4:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    2fd6:	3401      	adds	r4, #1
    2fd8:	e7b3      	b.n	2f42 <xTaskResumeAll+0x2a>
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	20003f94 	.word	0x20003f94
    2fe0:	00002005 	.word	0x00002005
    2fe4:	20003f88 	.word	0x20003f88
    2fe8:	0000201d 	.word	0x0000201d
    2fec:	20003fd4 	.word	0x20003fd4
    2ff0:	00001ecf 	.word	0x00001ecf
    2ff4:	20003f9c 	.word	0x20003f9c
    2ff8:	20003f24 	.word	0x20003f24
    2ffc:	00001e89 	.word	0x00001e89
    3000:	20003f18 	.word	0x20003f18
    3004:	20004018 	.word	0x20004018
    3008:	000029dd 	.word	0x000029dd
    300c:	20003f90 	.word	0x20003f90
    3010:	00002df9 	.word	0x00002df9
    3014:	00001fed 	.word	0x00001fed

00003018 <vTaskDelay>:
	{
    3018:	b510      	push	{r4, lr}
    301a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    301c:	d00f      	beq.n	303e <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    301e:	4b09      	ldr	r3, [pc, #36]	; (3044 <vTaskDelay+0x2c>)
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	2b00      	cmp	r3, #0
    3024:	d001      	beq.n	302a <vTaskDelay+0x12>
    3026:	b672      	cpsid	i
    3028:	e7fe      	b.n	3028 <vTaskDelay+0x10>
			vTaskSuspendAll();
    302a:	4b07      	ldr	r3, [pc, #28]	; (3048 <vTaskDelay+0x30>)
    302c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    302e:	2100      	movs	r1, #0
    3030:	0020      	movs	r0, r4
    3032:	4b06      	ldr	r3, [pc, #24]	; (304c <vTaskDelay+0x34>)
    3034:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    3036:	4b06      	ldr	r3, [pc, #24]	; (3050 <vTaskDelay+0x38>)
    3038:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    303a:	2800      	cmp	r0, #0
    303c:	d101      	bne.n	3042 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    303e:	4b05      	ldr	r3, [pc, #20]	; (3054 <vTaskDelay+0x3c>)
    3040:	4798      	blx	r3
	}
    3042:	bd10      	pop	{r4, pc}
    3044:	20003f94 	.word	0x20003f94
    3048:	00002ddd 	.word	0x00002ddd
    304c:	00002a89 	.word	0x00002a89
    3050:	00002f19 	.word	0x00002f19
    3054:	00001fed 	.word	0x00001fed

00003058 <vTaskSwitchContext>:
{
    3058:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    305a:	4b21      	ldr	r3, [pc, #132]	; (30e0 <vTaskSwitchContext+0x88>)
    305c:	681b      	ldr	r3, [r3, #0]
    305e:	2b00      	cmp	r3, #0
    3060:	d118      	bne.n	3094 <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
    3062:	2200      	movs	r2, #0
    3064:	4b1f      	ldr	r3, [pc, #124]	; (30e4 <vTaskSwitchContext+0x8c>)
    3066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3068:	4b1f      	ldr	r3, [pc, #124]	; (30e8 <vTaskSwitchContext+0x90>)
    306a:	681b      	ldr	r3, [r3, #0]
    306c:	009a      	lsls	r2, r3, #2
    306e:	18d2      	adds	r2, r2, r3
    3070:	0092      	lsls	r2, r2, #2
    3072:	491e      	ldr	r1, [pc, #120]	; (30ec <vTaskSwitchContext+0x94>)
    3074:	5852      	ldr	r2, [r2, r1]
    3076:	2a00      	cmp	r2, #0
    3078:	d110      	bne.n	309c <vTaskSwitchContext+0x44>
    307a:	2b00      	cmp	r3, #0
    307c:	d008      	beq.n	3090 <vTaskSwitchContext+0x38>
    307e:	3b01      	subs	r3, #1
    3080:	009a      	lsls	r2, r3, #2
    3082:	18d2      	adds	r2, r2, r3
    3084:	0092      	lsls	r2, r2, #2
    3086:	5852      	ldr	r2, [r2, r1]
    3088:	2a00      	cmp	r2, #0
    308a:	d107      	bne.n	309c <vTaskSwitchContext+0x44>
    308c:	2b00      	cmp	r3, #0
    308e:	d1f6      	bne.n	307e <vTaskSwitchContext+0x26>
    3090:	b672      	cpsid	i
    3092:	e7fe      	b.n	3092 <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
    3094:	2201      	movs	r2, #1
    3096:	4b13      	ldr	r3, [pc, #76]	; (30e4 <vTaskSwitchContext+0x8c>)
    3098:	601a      	str	r2, [r3, #0]
}
    309a:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    309c:	4813      	ldr	r0, [pc, #76]	; (30ec <vTaskSwitchContext+0x94>)
    309e:	009a      	lsls	r2, r3, #2
    30a0:	18d1      	adds	r1, r2, r3
    30a2:	0089      	lsls	r1, r1, #2
    30a4:	1841      	adds	r1, r0, r1
    30a6:	684c      	ldr	r4, [r1, #4]
    30a8:	6864      	ldr	r4, [r4, #4]
    30aa:	604c      	str	r4, [r1, #4]
    30ac:	18d2      	adds	r2, r2, r3
    30ae:	0092      	lsls	r2, r2, #2
    30b0:	3208      	adds	r2, #8
    30b2:	1882      	adds	r2, r0, r2
    30b4:	4294      	cmp	r4, r2
    30b6:	d00b      	beq.n	30d0 <vTaskSwitchContext+0x78>
    30b8:	009a      	lsls	r2, r3, #2
    30ba:	18d2      	adds	r2, r2, r3
    30bc:	0092      	lsls	r2, r2, #2
    30be:	490b      	ldr	r1, [pc, #44]	; (30ec <vTaskSwitchContext+0x94>)
    30c0:	188a      	adds	r2, r1, r2
    30c2:	6852      	ldr	r2, [r2, #4]
    30c4:	68d1      	ldr	r1, [r2, #12]
    30c6:	4a0a      	ldr	r2, [pc, #40]	; (30f0 <vTaskSwitchContext+0x98>)
    30c8:	6011      	str	r1, [r2, #0]
    30ca:	4a07      	ldr	r2, [pc, #28]	; (30e8 <vTaskSwitchContext+0x90>)
    30cc:	6013      	str	r3, [r2, #0]
}
    30ce:	e7e4      	b.n	309a <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    30d0:	6860      	ldr	r0, [r4, #4]
    30d2:	009a      	lsls	r2, r3, #2
    30d4:	18d2      	adds	r2, r2, r3
    30d6:	0092      	lsls	r2, r2, #2
    30d8:	4904      	ldr	r1, [pc, #16]	; (30ec <vTaskSwitchContext+0x94>)
    30da:	188a      	adds	r2, r1, r2
    30dc:	6050      	str	r0, [r2, #4]
    30de:	e7eb      	b.n	30b8 <vTaskSwitchContext+0x60>
    30e0:	20003f94 	.word	0x20003f94
    30e4:	20004018 	.word	0x20004018
    30e8:	20003f9c 	.word	0x20003f9c
    30ec:	20003f24 	.word	0x20003f24
    30f0:	20003f18 	.word	0x20003f18

000030f4 <vTaskSuspend>:
	{
    30f4:	b570      	push	{r4, r5, r6, lr}
    30f6:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
    30f8:	4b24      	ldr	r3, [pc, #144]	; (318c <vTaskSuspend+0x98>)
    30fa:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    30fc:	1e2c      	subs	r4, r5, #0
    30fe:	d01d      	beq.n	313c <vTaskSuspend+0x48>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3100:	1d25      	adds	r5, r4, #4
    3102:	0028      	movs	r0, r5
    3104:	4b22      	ldr	r3, [pc, #136]	; (3190 <vTaskSuspend+0x9c>)
    3106:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    310a:	2b00      	cmp	r3, #0
    310c:	d003      	beq.n	3116 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    310e:	0020      	movs	r0, r4
    3110:	3018      	adds	r0, #24
    3112:	4b1f      	ldr	r3, [pc, #124]	; (3190 <vTaskSuspend+0x9c>)
    3114:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    3116:	0029      	movs	r1, r5
    3118:	481e      	ldr	r0, [pc, #120]	; (3194 <vTaskSuspend+0xa0>)
    311a:	4b1f      	ldr	r3, [pc, #124]	; (3198 <vTaskSuspend+0xa4>)
    311c:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    311e:	2348      	movs	r3, #72	; 0x48
    3120:	5ce3      	ldrb	r3, [r4, r3]
    3122:	2b01      	cmp	r3, #1
    3124:	d00d      	beq.n	3142 <vTaskSuspend+0x4e>
		taskEXIT_CRITICAL();
    3126:	4b1d      	ldr	r3, [pc, #116]	; (319c <vTaskSuspend+0xa8>)
    3128:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    312a:	4b1d      	ldr	r3, [pc, #116]	; (31a0 <vTaskSuspend+0xac>)
    312c:	681b      	ldr	r3, [r3, #0]
    312e:	2b00      	cmp	r3, #0
    3130:	d10b      	bne.n	314a <vTaskSuspend+0x56>
		if( pxTCB == pxCurrentTCB )
    3132:	4b1c      	ldr	r3, [pc, #112]	; (31a4 <vTaskSuspend+0xb0>)
    3134:	681b      	ldr	r3, [r3, #0]
    3136:	429c      	cmp	r4, r3
    3138:	d00e      	beq.n	3158 <vTaskSuspend+0x64>
	}
    313a:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    313c:	4b19      	ldr	r3, [pc, #100]	; (31a4 <vTaskSuspend+0xb0>)
    313e:	681c      	ldr	r4, [r3, #0]
    3140:	e7de      	b.n	3100 <vTaskSuspend+0xc>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3142:	2200      	movs	r2, #0
    3144:	3347      	adds	r3, #71	; 0x47
    3146:	54e2      	strb	r2, [r4, r3]
    3148:	e7ed      	b.n	3126 <vTaskSuspend+0x32>
			taskENTER_CRITICAL();
    314a:	4b10      	ldr	r3, [pc, #64]	; (318c <vTaskSuspend+0x98>)
    314c:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
    314e:	4b16      	ldr	r3, [pc, #88]	; (31a8 <vTaskSuspend+0xb4>)
    3150:	4798      	blx	r3
			taskEXIT_CRITICAL();
    3152:	4b12      	ldr	r3, [pc, #72]	; (319c <vTaskSuspend+0xa8>)
    3154:	4798      	blx	r3
    3156:	e7ec      	b.n	3132 <vTaskSuspend+0x3e>
			if( xSchedulerRunning != pdFALSE )
    3158:	4b11      	ldr	r3, [pc, #68]	; (31a0 <vTaskSuspend+0xac>)
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	2b00      	cmp	r3, #0
    315e:	d008      	beq.n	3172 <vTaskSuspend+0x7e>
				configASSERT( uxSchedulerSuspended == 0 );
    3160:	4b12      	ldr	r3, [pc, #72]	; (31ac <vTaskSuspend+0xb8>)
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	2b00      	cmp	r3, #0
    3166:	d001      	beq.n	316c <vTaskSuspend+0x78>
    3168:	b672      	cpsid	i
    316a:	e7fe      	b.n	316a <vTaskSuspend+0x76>
				portYIELD_WITHIN_API();
    316c:	4b10      	ldr	r3, [pc, #64]	; (31b0 <vTaskSuspend+0xbc>)
    316e:	4798      	blx	r3
    3170:	e7e3      	b.n	313a <vTaskSuspend+0x46>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3172:	4b08      	ldr	r3, [pc, #32]	; (3194 <vTaskSuspend+0xa0>)
    3174:	681a      	ldr	r2, [r3, #0]
    3176:	4b0f      	ldr	r3, [pc, #60]	; (31b4 <vTaskSuspend+0xc0>)
    3178:	681b      	ldr	r3, [r3, #0]
    317a:	429a      	cmp	r2, r3
    317c:	d002      	beq.n	3184 <vTaskSuspend+0x90>
					vTaskSwitchContext();
    317e:	4b0e      	ldr	r3, [pc, #56]	; (31b8 <vTaskSuspend+0xc4>)
    3180:	4798      	blx	r3
	}
    3182:	e7da      	b.n	313a <vTaskSuspend+0x46>
					pxCurrentTCB = NULL;
    3184:	2200      	movs	r2, #0
    3186:	4b07      	ldr	r3, [pc, #28]	; (31a4 <vTaskSuspend+0xb0>)
    3188:	601a      	str	r2, [r3, #0]
    318a:	e7d6      	b.n	313a <vTaskSuspend+0x46>
    318c:	00002005 	.word	0x00002005
    3190:	00001ecf 	.word	0x00001ecf
    3194:	20003fec 	.word	0x20003fec
    3198:	00001e89 	.word	0x00001e89
    319c:	0000201d 	.word	0x0000201d
    31a0:	20003fe8 	.word	0x20003fe8
    31a4:	20003f18 	.word	0x20003f18
    31a8:	000029dd 	.word	0x000029dd
    31ac:	20003f94 	.word	0x20003f94
    31b0:	00001fed 	.word	0x00001fed
    31b4:	20003f88 	.word	0x20003f88
    31b8:	00003059 	.word	0x00003059

000031bc <vTaskPlaceOnEventList>:
{
    31bc:	b510      	push	{r4, lr}
    31be:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    31c0:	2800      	cmp	r0, #0
    31c2:	d101      	bne.n	31c8 <vTaskPlaceOnEventList+0xc>
    31c4:	b672      	cpsid	i
    31c6:	e7fe      	b.n	31c6 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    31c8:	4b04      	ldr	r3, [pc, #16]	; (31dc <vTaskPlaceOnEventList+0x20>)
    31ca:	6819      	ldr	r1, [r3, #0]
    31cc:	3118      	adds	r1, #24
    31ce:	4b04      	ldr	r3, [pc, #16]	; (31e0 <vTaskPlaceOnEventList+0x24>)
    31d0:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    31d2:	2101      	movs	r1, #1
    31d4:	0020      	movs	r0, r4
    31d6:	4b03      	ldr	r3, [pc, #12]	; (31e4 <vTaskPlaceOnEventList+0x28>)
    31d8:	4798      	blx	r3
}
    31da:	bd10      	pop	{r4, pc}
    31dc:	20003f18 	.word	0x20003f18
    31e0:	00001ea1 	.word	0x00001ea1
    31e4:	00002a89 	.word	0x00002a89

000031e8 <vTaskPlaceOnEventListRestricted>:
	{
    31e8:	b570      	push	{r4, r5, r6, lr}
    31ea:	000c      	movs	r4, r1
    31ec:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    31ee:	2800      	cmp	r0, #0
    31f0:	d00d      	beq.n	320e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    31f2:	4b08      	ldr	r3, [pc, #32]	; (3214 <vTaskPlaceOnEventListRestricted+0x2c>)
    31f4:	6819      	ldr	r1, [r3, #0]
    31f6:	3118      	adds	r1, #24
    31f8:	4b07      	ldr	r3, [pc, #28]	; (3218 <vTaskPlaceOnEventListRestricted+0x30>)
    31fa:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    31fc:	2d00      	cmp	r5, #0
    31fe:	d001      	beq.n	3204 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    3200:	2401      	movs	r4, #1
    3202:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3204:	0029      	movs	r1, r5
    3206:	0020      	movs	r0, r4
    3208:	4b04      	ldr	r3, [pc, #16]	; (321c <vTaskPlaceOnEventListRestricted+0x34>)
    320a:	4798      	blx	r3
	}
    320c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    320e:	b672      	cpsid	i
    3210:	e7fe      	b.n	3210 <vTaskPlaceOnEventListRestricted+0x28>
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	20003f18 	.word	0x20003f18
    3218:	00001e89 	.word	0x00001e89
    321c:	00002a89 	.word	0x00002a89

00003220 <xTaskRemoveFromEventList>:
{
    3220:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3222:	68c3      	ldr	r3, [r0, #12]
    3224:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    3226:	2c00      	cmp	r4, #0
    3228:	d027      	beq.n	327a <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    322a:	0025      	movs	r5, r4
    322c:	3518      	adds	r5, #24
    322e:	0028      	movs	r0, r5
    3230:	4b15      	ldr	r3, [pc, #84]	; (3288 <xTaskRemoveFromEventList+0x68>)
    3232:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3234:	4b15      	ldr	r3, [pc, #84]	; (328c <xTaskRemoveFromEventList+0x6c>)
    3236:	681b      	ldr	r3, [r3, #0]
    3238:	2b00      	cmp	r3, #0
    323a:	d120      	bne.n	327e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    323c:	1d25      	adds	r5, r4, #4
    323e:	0028      	movs	r0, r5
    3240:	4b11      	ldr	r3, [pc, #68]	; (3288 <xTaskRemoveFromEventList+0x68>)
    3242:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    3244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3246:	4a12      	ldr	r2, [pc, #72]	; (3290 <xTaskRemoveFromEventList+0x70>)
    3248:	6812      	ldr	r2, [r2, #0]
    324a:	4293      	cmp	r3, r2
    324c:	d901      	bls.n	3252 <xTaskRemoveFromEventList+0x32>
    324e:	4a10      	ldr	r2, [pc, #64]	; (3290 <xTaskRemoveFromEventList+0x70>)
    3250:	6013      	str	r3, [r2, #0]
    3252:	0098      	lsls	r0, r3, #2
    3254:	18c0      	adds	r0, r0, r3
    3256:	0080      	lsls	r0, r0, #2
    3258:	4b0e      	ldr	r3, [pc, #56]	; (3294 <xTaskRemoveFromEventList+0x74>)
    325a:	1818      	adds	r0, r3, r0
    325c:	0029      	movs	r1, r5
    325e:	4b0e      	ldr	r3, [pc, #56]	; (3298 <xTaskRemoveFromEventList+0x78>)
    3260:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3262:	4b0e      	ldr	r3, [pc, #56]	; (329c <xTaskRemoveFromEventList+0x7c>)
    3264:	681b      	ldr	r3, [r3, #0]
    3266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    326a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    326c:	429a      	cmp	r2, r3
    326e:	d903      	bls.n	3278 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    3270:	2201      	movs	r2, #1
    3272:	4b0b      	ldr	r3, [pc, #44]	; (32a0 <xTaskRemoveFromEventList+0x80>)
    3274:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    3276:	3001      	adds	r0, #1
}
    3278:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    327a:	b672      	cpsid	i
    327c:	e7fe      	b.n	327c <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    327e:	0029      	movs	r1, r5
    3280:	4808      	ldr	r0, [pc, #32]	; (32a4 <xTaskRemoveFromEventList+0x84>)
    3282:	4b05      	ldr	r3, [pc, #20]	; (3298 <xTaskRemoveFromEventList+0x78>)
    3284:	4798      	blx	r3
    3286:	e7ec      	b.n	3262 <xTaskRemoveFromEventList+0x42>
    3288:	00001ecf 	.word	0x00001ecf
    328c:	20003f94 	.word	0x20003f94
    3290:	20003f9c 	.word	0x20003f9c
    3294:	20003f24 	.word	0x20003f24
    3298:	00001e89 	.word	0x00001e89
    329c:	20003f18 	.word	0x20003f18
    32a0:	20004018 	.word	0x20004018
    32a4:	20003fd4 	.word	0x20003fd4

000032a8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    32a8:	4b03      	ldr	r3, [pc, #12]	; (32b8 <vTaskInternalSetTimeOutState+0x10>)
    32aa:	681b      	ldr	r3, [r3, #0]
    32ac:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    32ae:	4b03      	ldr	r3, [pc, #12]	; (32bc <vTaskInternalSetTimeOutState+0x14>)
    32b0:	681b      	ldr	r3, [r3, #0]
    32b2:	6043      	str	r3, [r0, #4]
}
    32b4:	4770      	bx	lr
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	20003fd0 	.word	0x20003fd0
    32bc:	20004014 	.word	0x20004014

000032c0 <xTaskCheckForTimeOut>:
{
    32c0:	b570      	push	{r4, r5, r6, lr}
    32c2:	0006      	movs	r6, r0
    32c4:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    32c6:	2800      	cmp	r0, #0
    32c8:	d01b      	beq.n	3302 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    32ca:	2900      	cmp	r1, #0
    32cc:	d01b      	beq.n	3306 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    32ce:	4b13      	ldr	r3, [pc, #76]	; (331c <xTaskCheckForTimeOut+0x5c>)
    32d0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    32d2:	4b13      	ldr	r3, [pc, #76]	; (3320 <xTaskCheckForTimeOut+0x60>)
    32d4:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    32d6:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    32d8:	682b      	ldr	r3, [r5, #0]
    32da:	1c58      	adds	r0, r3, #1
    32dc:	d01c      	beq.n	3318 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    32de:	4811      	ldr	r0, [pc, #68]	; (3324 <xTaskCheckForTimeOut+0x64>)
    32e0:	6800      	ldr	r0, [r0, #0]
    32e2:	6834      	ldr	r4, [r6, #0]
    32e4:	4284      	cmp	r4, r0
    32e6:	d002      	beq.n	32ee <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    32e8:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    32ea:	428a      	cmp	r2, r1
    32ec:	d205      	bcs.n	32fa <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    32ee:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    32f0:	429a      	cmp	r2, r3
    32f2:	d30a      	bcc.n	330a <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    32f4:	2300      	movs	r3, #0
    32f6:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    32f8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    32fa:	4b0b      	ldr	r3, [pc, #44]	; (3328 <xTaskCheckForTimeOut+0x68>)
    32fc:	4798      	blx	r3
}
    32fe:	0020      	movs	r0, r4
    3300:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    3302:	b672      	cpsid	i
    3304:	e7fe      	b.n	3304 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    3306:	b672      	cpsid	i
    3308:	e7fe      	b.n	3308 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    330a:	1a9b      	subs	r3, r3, r2
    330c:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    330e:	0030      	movs	r0, r6
    3310:	4b06      	ldr	r3, [pc, #24]	; (332c <xTaskCheckForTimeOut+0x6c>)
    3312:	4798      	blx	r3
			xReturn = pdFALSE;
    3314:	2400      	movs	r4, #0
    3316:	e7f0      	b.n	32fa <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    3318:	2400      	movs	r4, #0
    331a:	e7ee      	b.n	32fa <xTaskCheckForTimeOut+0x3a>
    331c:	00002005 	.word	0x00002005
    3320:	20004014 	.word	0x20004014
    3324:	20003fd0 	.word	0x20003fd0
    3328:	0000201d 	.word	0x0000201d
    332c:	000032a9 	.word	0x000032a9

00003330 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    3330:	2201      	movs	r2, #1
    3332:	4b01      	ldr	r3, [pc, #4]	; (3338 <vTaskMissedYield+0x8>)
    3334:	601a      	str	r2, [r3, #0]
}
    3336:	4770      	bx	lr
    3338:	20004018 	.word	0x20004018

0000333c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    333c:	4b05      	ldr	r3, [pc, #20]	; (3354 <xTaskGetSchedulerState+0x18>)
    333e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    3340:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    3342:	2b00      	cmp	r3, #0
    3344:	d004      	beq.n	3350 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3346:	4b04      	ldr	r3, [pc, #16]	; (3358 <xTaskGetSchedulerState+0x1c>)
    3348:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    334a:	4243      	negs	r3, r0
    334c:	4158      	adcs	r0, r3
    334e:	0040      	lsls	r0, r0, #1
	}
    3350:	4770      	bx	lr
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	20003fe8 	.word	0x20003fe8
    3358:	20003f94 	.word	0x20003f94

0000335c <xTaskPriorityInherit>:
	{
    335c:	b570      	push	{r4, r5, r6, lr}
    335e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    3360:	d03c      	beq.n	33dc <xTaskPriorityInherit+0x80>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    3362:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3364:	4b1e      	ldr	r3, [pc, #120]	; (33e0 <xTaskPriorityInherit+0x84>)
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    336a:	429a      	cmp	r2, r3
    336c:	d22e      	bcs.n	33cc <xTaskPriorityInherit+0x70>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    336e:	6983      	ldr	r3, [r0, #24]
    3370:	2b00      	cmp	r3, #0
    3372:	db05      	blt.n	3380 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3374:	4b1a      	ldr	r3, [pc, #104]	; (33e0 <xTaskPriorityInherit+0x84>)
    3376:	681b      	ldr	r3, [r3, #0]
    3378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    337a:	2305      	movs	r3, #5
    337c:	1a5b      	subs	r3, r3, r1
    337e:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    3380:	0093      	lsls	r3, r2, #2
    3382:	189b      	adds	r3, r3, r2
    3384:	009b      	lsls	r3, r3, #2
    3386:	4a17      	ldr	r2, [pc, #92]	; (33e4 <xTaskPriorityInherit+0x88>)
    3388:	18d3      	adds	r3, r2, r3
    338a:	6962      	ldr	r2, [r4, #20]
    338c:	429a      	cmp	r2, r3
    338e:	d005      	beq.n	339c <xTaskPriorityInherit+0x40>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    3390:	4b13      	ldr	r3, [pc, #76]	; (33e0 <xTaskPriorityInherit+0x84>)
    3392:	681b      	ldr	r3, [r3, #0]
    3394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3396:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
    3398:	2001      	movs	r0, #1
    339a:	e01e      	b.n	33da <xTaskPriorityInherit+0x7e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    339c:	1d25      	adds	r5, r4, #4
    339e:	0028      	movs	r0, r5
    33a0:	4b11      	ldr	r3, [pc, #68]	; (33e8 <xTaskPriorityInherit+0x8c>)
    33a2:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    33a4:	4b0e      	ldr	r3, [pc, #56]	; (33e0 <xTaskPriorityInherit+0x84>)
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    33aa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    33ac:	4a0f      	ldr	r2, [pc, #60]	; (33ec <xTaskPriorityInherit+0x90>)
    33ae:	6812      	ldr	r2, [r2, #0]
    33b0:	4293      	cmp	r3, r2
    33b2:	d901      	bls.n	33b8 <xTaskPriorityInherit+0x5c>
    33b4:	4a0d      	ldr	r2, [pc, #52]	; (33ec <xTaskPriorityInherit+0x90>)
    33b6:	6013      	str	r3, [r2, #0]
    33b8:	0098      	lsls	r0, r3, #2
    33ba:	18c0      	adds	r0, r0, r3
    33bc:	0080      	lsls	r0, r0, #2
    33be:	4b09      	ldr	r3, [pc, #36]	; (33e4 <xTaskPriorityInherit+0x88>)
    33c0:	1818      	adds	r0, r3, r0
    33c2:	0029      	movs	r1, r5
    33c4:	4b0a      	ldr	r3, [pc, #40]	; (33f0 <xTaskPriorityInherit+0x94>)
    33c6:	4798      	blx	r3
				xReturn = pdTRUE;
    33c8:	2001      	movs	r0, #1
    33ca:	e006      	b.n	33da <xTaskPriorityInherit+0x7e>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    33cc:	4b04      	ldr	r3, [pc, #16]	; (33e0 <xTaskPriorityInherit+0x84>)
    33ce:	681b      	ldr	r3, [r3, #0]
    33d0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    33d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    33d4:	4298      	cmp	r0, r3
    33d6:	4180      	sbcs	r0, r0
    33d8:	4240      	negs	r0, r0
	}
    33da:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    33dc:	2000      	movs	r0, #0
		return xReturn;
    33de:	e7fc      	b.n	33da <xTaskPriorityInherit+0x7e>
    33e0:	20003f18 	.word	0x20003f18
    33e4:	20003f24 	.word	0x20003f24
    33e8:	00001ecf 	.word	0x00001ecf
    33ec:	20003f9c 	.word	0x20003f9c
    33f0:	00001e89 	.word	0x00001e89

000033f4 <xTaskPriorityDisinherit>:
	{
    33f4:	b570      	push	{r4, r5, r6, lr}
    33f6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    33f8:	d02c      	beq.n	3454 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    33fa:	4b18      	ldr	r3, [pc, #96]	; (345c <xTaskPriorityDisinherit+0x68>)
    33fc:	681b      	ldr	r3, [r3, #0]
    33fe:	4298      	cmp	r0, r3
    3400:	d001      	beq.n	3406 <xTaskPriorityDisinherit+0x12>
    3402:	b672      	cpsid	i
    3404:	e7fe      	b.n	3404 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    3406:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3408:	2b00      	cmp	r3, #0
    340a:	d101      	bne.n	3410 <xTaskPriorityDisinherit+0x1c>
    340c:	b672      	cpsid	i
    340e:	e7fe      	b.n	340e <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    3410:	3b01      	subs	r3, #1
    3412:	6403      	str	r3, [r0, #64]	; 0x40
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3414:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3416:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    3418:	428a      	cmp	r2, r1
    341a:	d01d      	beq.n	3458 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    341c:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    341e:	2b00      	cmp	r3, #0
    3420:	d117      	bne.n	3452 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3422:	1d25      	adds	r5, r4, #4
    3424:	0028      	movs	r0, r5
    3426:	4b0e      	ldr	r3, [pc, #56]	; (3460 <xTaskPriorityDisinherit+0x6c>)
    3428:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    342a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    342c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    342e:	2205      	movs	r2, #5
    3430:	1ad2      	subs	r2, r2, r3
    3432:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    3434:	4a0b      	ldr	r2, [pc, #44]	; (3464 <xTaskPriorityDisinherit+0x70>)
    3436:	6812      	ldr	r2, [r2, #0]
    3438:	4293      	cmp	r3, r2
    343a:	d901      	bls.n	3440 <xTaskPriorityDisinherit+0x4c>
    343c:	4a09      	ldr	r2, [pc, #36]	; (3464 <xTaskPriorityDisinherit+0x70>)
    343e:	6013      	str	r3, [r2, #0]
    3440:	009a      	lsls	r2, r3, #2
    3442:	18d3      	adds	r3, r2, r3
    3444:	009b      	lsls	r3, r3, #2
    3446:	4808      	ldr	r0, [pc, #32]	; (3468 <xTaskPriorityDisinherit+0x74>)
    3448:	18c0      	adds	r0, r0, r3
    344a:	0029      	movs	r1, r5
    344c:	4b07      	ldr	r3, [pc, #28]	; (346c <xTaskPriorityDisinherit+0x78>)
    344e:	4798      	blx	r3
					xReturn = pdTRUE;
    3450:	2001      	movs	r0, #1
	}
    3452:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    3454:	2000      	movs	r0, #0
    3456:	e7fc      	b.n	3452 <xTaskPriorityDisinherit+0x5e>
    3458:	2000      	movs	r0, #0
    345a:	e7fa      	b.n	3452 <xTaskPriorityDisinherit+0x5e>
    345c:	20003f18 	.word	0x20003f18
    3460:	00001ecf 	.word	0x00001ecf
    3464:	20003f9c 	.word	0x20003f9c
    3468:	20003f24 	.word	0x20003f24
    346c:	00001e89 	.word	0x00001e89

00003470 <vTaskPriorityDisinheritAfterTimeout>:
	{
    3470:	b570      	push	{r4, r5, r6, lr}
    3472:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    3474:	d00d      	beq.n	3492 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    3476:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3478:	2b00      	cmp	r3, #0
    347a:	d101      	bne.n	3480 <vTaskPriorityDisinheritAfterTimeout+0x10>
    347c:	b672      	cpsid	i
    347e:	e7fe      	b.n	347e <vTaskPriorityDisinheritAfterTimeout+0xe>
    3480:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    3482:	428a      	cmp	r2, r1
    3484:	d200      	bcs.n	3488 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3486:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    3488:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    348a:	4291      	cmp	r1, r2
    348c:	d001      	beq.n	3492 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    348e:	2b01      	cmp	r3, #1
    3490:	d000      	beq.n	3494 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    3492:	bd70      	pop	{r4, r5, r6, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    3494:	4b14      	ldr	r3, [pc, #80]	; (34e8 <vTaskPriorityDisinheritAfterTimeout+0x78>)
    3496:	681b      	ldr	r3, [r3, #0]
    3498:	429c      	cmp	r4, r3
    349a:	d101      	bne.n	34a0 <vTaskPriorityDisinheritAfterTimeout+0x30>
    349c:	b672      	cpsid	i
    349e:	e7fe      	b.n	349e <vTaskPriorityDisinheritAfterTimeout+0x2e>
					pxTCB->uxPriority = uxPriorityToUse;
    34a0:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    34a2:	69a3      	ldr	r3, [r4, #24]
    34a4:	2b00      	cmp	r3, #0
    34a6:	db02      	blt.n	34ae <vTaskPriorityDisinheritAfterTimeout+0x3e>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    34a8:	2305      	movs	r3, #5
    34aa:	1a9a      	subs	r2, r3, r2
    34ac:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    34ae:	008b      	lsls	r3, r1, #2
    34b0:	185b      	adds	r3, r3, r1
    34b2:	009b      	lsls	r3, r3, #2
    34b4:	4a0d      	ldr	r2, [pc, #52]	; (34ec <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    34b6:	18d3      	adds	r3, r2, r3
    34b8:	6962      	ldr	r2, [r4, #20]
    34ba:	429a      	cmp	r2, r3
    34bc:	d1e9      	bne.n	3492 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    34be:	1d25      	adds	r5, r4, #4
    34c0:	0028      	movs	r0, r5
    34c2:	4b0b      	ldr	r3, [pc, #44]	; (34f0 <vTaskPriorityDisinheritAfterTimeout+0x80>)
    34c4:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    34c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    34c8:	4a0a      	ldr	r2, [pc, #40]	; (34f4 <vTaskPriorityDisinheritAfterTimeout+0x84>)
    34ca:	6812      	ldr	r2, [r2, #0]
    34cc:	4293      	cmp	r3, r2
    34ce:	d901      	bls.n	34d4 <vTaskPriorityDisinheritAfterTimeout+0x64>
    34d0:	4a08      	ldr	r2, [pc, #32]	; (34f4 <vTaskPriorityDisinheritAfterTimeout+0x84>)
    34d2:	6013      	str	r3, [r2, #0]
    34d4:	0098      	lsls	r0, r3, #2
    34d6:	18c0      	adds	r0, r0, r3
    34d8:	0080      	lsls	r0, r0, #2
    34da:	4b04      	ldr	r3, [pc, #16]	; (34ec <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    34dc:	1818      	adds	r0, r3, r0
    34de:	0029      	movs	r1, r5
    34e0:	4b05      	ldr	r3, [pc, #20]	; (34f8 <vTaskPriorityDisinheritAfterTimeout+0x88>)
    34e2:	4798      	blx	r3
	}
    34e4:	e7d5      	b.n	3492 <vTaskPriorityDisinheritAfterTimeout+0x22>
    34e6:	46c0      	nop			; (mov r8, r8)
    34e8:	20003f18 	.word	0x20003f18
    34ec:	20003f24 	.word	0x20003f24
    34f0:	00001ecf 	.word	0x00001ecf
    34f4:	20003f9c 	.word	0x20003f9c
    34f8:	00001e89 	.word	0x00001e89

000034fc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    34fc:	4b05      	ldr	r3, [pc, #20]	; (3514 <pvTaskIncrementMutexHeldCount+0x18>)
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	2b00      	cmp	r3, #0
    3502:	d004      	beq.n	350e <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    3504:	4b03      	ldr	r3, [pc, #12]	; (3514 <pvTaskIncrementMutexHeldCount+0x18>)
    3506:	681a      	ldr	r2, [r3, #0]
    3508:	6c13      	ldr	r3, [r2, #64]	; 0x40
    350a:	3301      	adds	r3, #1
    350c:	6413      	str	r3, [r2, #64]	; 0x40
		return pxCurrentTCB;
    350e:	4b01      	ldr	r3, [pc, #4]	; (3514 <pvTaskIncrementMutexHeldCount+0x18>)
    3510:	6818      	ldr	r0, [r3, #0]
	}
    3512:	4770      	bx	lr
    3514:	20003f18 	.word	0x20003f18

00003518 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    3518:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    351a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    351c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    351e:	4291      	cmp	r1, r2
    3520:	d80b      	bhi.n	353a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3522:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    3524:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3526:	6983      	ldr	r3, [r0, #24]
    3528:	429a      	cmp	r2, r3
    352a:	d211      	bcs.n	3550 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    352c:	1d01      	adds	r1, r0, #4
    352e:	4b09      	ldr	r3, [pc, #36]	; (3554 <prvInsertTimerInActiveList+0x3c>)
    3530:	6818      	ldr	r0, [r3, #0]
    3532:	4b09      	ldr	r3, [pc, #36]	; (3558 <prvInsertTimerInActiveList+0x40>)
    3534:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    3536:	2400      	movs	r4, #0
    3538:	e00a      	b.n	3550 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    353a:	429a      	cmp	r2, r3
    353c:	d202      	bcs.n	3544 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    353e:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    3540:	4299      	cmp	r1, r3
    3542:	d205      	bcs.n	3550 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3544:	1d01      	adds	r1, r0, #4
    3546:	4b05      	ldr	r3, [pc, #20]	; (355c <prvInsertTimerInActiveList+0x44>)
    3548:	6818      	ldr	r0, [r3, #0]
    354a:	4b03      	ldr	r3, [pc, #12]	; (3558 <prvInsertTimerInActiveList+0x40>)
    354c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    354e:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    3550:	0020      	movs	r0, r4
    3552:	bd10      	pop	{r4, pc}
    3554:	20004020 	.word	0x20004020
    3558:	00001ea1 	.word	0x00001ea1
    355c:	2000401c 	.word	0x2000401c

00003560 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    3560:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    3562:	4b0e      	ldr	r3, [pc, #56]	; (359c <prvCheckForValidListAndQueue+0x3c>)
    3564:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    3566:	4b0e      	ldr	r3, [pc, #56]	; (35a0 <prvCheckForValidListAndQueue+0x40>)
    3568:	681b      	ldr	r3, [r3, #0]
    356a:	2b00      	cmp	r3, #0
    356c:	d002      	beq.n	3574 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    356e:	4b0d      	ldr	r3, [pc, #52]	; (35a4 <prvCheckForValidListAndQueue+0x44>)
    3570:	4798      	blx	r3
}
    3572:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    3574:	4d0c      	ldr	r5, [pc, #48]	; (35a8 <prvCheckForValidListAndQueue+0x48>)
    3576:	0028      	movs	r0, r5
    3578:	4e0c      	ldr	r6, [pc, #48]	; (35ac <prvCheckForValidListAndQueue+0x4c>)
    357a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    357c:	4c0c      	ldr	r4, [pc, #48]	; (35b0 <prvCheckForValidListAndQueue+0x50>)
    357e:	0020      	movs	r0, r4
    3580:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    3582:	4b0c      	ldr	r3, [pc, #48]	; (35b4 <prvCheckForValidListAndQueue+0x54>)
    3584:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    3586:	4b0c      	ldr	r3, [pc, #48]	; (35b8 <prvCheckForValidListAndQueue+0x58>)
    3588:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    358a:	2200      	movs	r2, #0
    358c:	210c      	movs	r1, #12
    358e:	2002      	movs	r0, #2
    3590:	4b0a      	ldr	r3, [pc, #40]	; (35bc <prvCheckForValidListAndQueue+0x5c>)
    3592:	4798      	blx	r3
    3594:	4b02      	ldr	r3, [pc, #8]	; (35a0 <prvCheckForValidListAndQueue+0x40>)
    3596:	6018      	str	r0, [r3, #0]
    3598:	e7e9      	b.n	356e <prvCheckForValidListAndQueue+0xe>
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	00002005 	.word	0x00002005
    35a0:	20004050 	.word	0x20004050
    35a4:	0000201d 	.word	0x0000201d
    35a8:	20004024 	.word	0x20004024
    35ac:	00001e6d 	.word	0x00001e6d
    35b0:	20004038 	.word	0x20004038
    35b4:	2000401c 	.word	0x2000401c
    35b8:	20004020 	.word	0x20004020
    35bc:	00002391 	.word	0x00002391

000035c0 <xTimerCreateTimerTask>:
{
    35c0:	b510      	push	{r4, lr}
    35c2:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    35c4:	4b0a      	ldr	r3, [pc, #40]	; (35f0 <xTimerCreateTimerTask+0x30>)
    35c6:	4798      	blx	r3
	if( xTimerQueue != NULL )
    35c8:	4b0a      	ldr	r3, [pc, #40]	; (35f4 <xTimerCreateTimerTask+0x34>)
    35ca:	681b      	ldr	r3, [r3, #0]
    35cc:	2b00      	cmp	r3, #0
    35ce:	d00d      	beq.n	35ec <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    35d0:	4b09      	ldr	r3, [pc, #36]	; (35f8 <xTimerCreateTimerTask+0x38>)
    35d2:	9301      	str	r3, [sp, #4]
    35d4:	2302      	movs	r3, #2
    35d6:	9300      	str	r3, [sp, #0]
    35d8:	2300      	movs	r3, #0
    35da:	2250      	movs	r2, #80	; 0x50
    35dc:	4907      	ldr	r1, [pc, #28]	; (35fc <xTimerCreateTimerTask+0x3c>)
    35de:	4808      	ldr	r0, [pc, #32]	; (3600 <xTimerCreateTimerTask+0x40>)
    35e0:	4c08      	ldr	r4, [pc, #32]	; (3604 <xTimerCreateTimerTask+0x44>)
    35e2:	47a0      	blx	r4
	configASSERT( xReturn );
    35e4:	2800      	cmp	r0, #0
    35e6:	d001      	beq.n	35ec <xTimerCreateTimerTask+0x2c>
}
    35e8:	b002      	add	sp, #8
    35ea:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    35ec:	b672      	cpsid	i
    35ee:	e7fe      	b.n	35ee <xTimerCreateTimerTask+0x2e>
    35f0:	00003561 	.word	0x00003561
    35f4:	20004050 	.word	0x20004050
    35f8:	20004054 	.word	0x20004054
    35fc:	00004480 	.word	0x00004480
    3600:	0000372d 	.word	0x0000372d
    3604:	00002b11 	.word	0x00002b11

00003608 <xTimerGenericCommand>:
{
    3608:	b530      	push	{r4, r5, lr}
    360a:	b085      	sub	sp, #20
    360c:	0004      	movs	r4, r0
    360e:	001d      	movs	r5, r3
	configASSERT( xTimer );
    3610:	2800      	cmp	r0, #0
    3612:	d014      	beq.n	363e <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    3614:	4b13      	ldr	r3, [pc, #76]	; (3664 <xTimerGenericCommand+0x5c>)
    3616:	6818      	ldr	r0, [r3, #0]
    3618:	2800      	cmp	r0, #0
    361a:	d021      	beq.n	3660 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    361c:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    361e:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    3620:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3622:	2905      	cmp	r1, #5
    3624:	dc15      	bgt.n	3652 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3626:	4b10      	ldr	r3, [pc, #64]	; (3668 <xTimerGenericCommand+0x60>)
    3628:	4798      	blx	r3
    362a:	2802      	cmp	r0, #2
    362c:	d009      	beq.n	3642 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    362e:	4b0d      	ldr	r3, [pc, #52]	; (3664 <xTimerGenericCommand+0x5c>)
    3630:	6818      	ldr	r0, [r3, #0]
    3632:	2300      	movs	r3, #0
    3634:	2200      	movs	r2, #0
    3636:	a901      	add	r1, sp, #4
    3638:	4c0c      	ldr	r4, [pc, #48]	; (366c <xTimerGenericCommand+0x64>)
    363a:	47a0      	blx	r4
    363c:	e00e      	b.n	365c <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    363e:	b672      	cpsid	i
    3640:	e7fe      	b.n	3640 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3642:	4b08      	ldr	r3, [pc, #32]	; (3664 <xTimerGenericCommand+0x5c>)
    3644:	6818      	ldr	r0, [r3, #0]
    3646:	2300      	movs	r3, #0
    3648:	9a08      	ldr	r2, [sp, #32]
    364a:	a901      	add	r1, sp, #4
    364c:	4c07      	ldr	r4, [pc, #28]	; (366c <xTimerGenericCommand+0x64>)
    364e:	47a0      	blx	r4
    3650:	e004      	b.n	365c <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3652:	2300      	movs	r3, #0
    3654:	002a      	movs	r2, r5
    3656:	a901      	add	r1, sp, #4
    3658:	4c05      	ldr	r4, [pc, #20]	; (3670 <xTimerGenericCommand+0x68>)
    365a:	47a0      	blx	r4
}
    365c:	b005      	add	sp, #20
    365e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    3660:	2000      	movs	r0, #0
	return xReturn;
    3662:	e7fb      	b.n	365c <xTimerGenericCommand+0x54>
    3664:	20004050 	.word	0x20004050
    3668:	0000333d 	.word	0x0000333d
    366c:	000023d9 	.word	0x000023d9
    3670:	00002591 	.word	0x00002591

00003674 <prvSampleTimeNow>:
{
    3674:	b5f0      	push	{r4, r5, r6, r7, lr}
    3676:	46d6      	mov	lr, sl
    3678:	464f      	mov	r7, r9
    367a:	4646      	mov	r6, r8
    367c:	b5c0      	push	{r6, r7, lr}
    367e:	b082      	sub	sp, #8
    3680:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    3682:	4b23      	ldr	r3, [pc, #140]	; (3710 <prvSampleTimeNow+0x9c>)
    3684:	4798      	blx	r3
    3686:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    3688:	4b22      	ldr	r3, [pc, #136]	; (3714 <prvSampleTimeNow+0xa0>)
    368a:	681b      	ldr	r3, [r3, #0]
    368c:	4298      	cmp	r0, r3
    368e:	d317      	bcc.n	36c0 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    3690:	2300      	movs	r3, #0
    3692:	4642      	mov	r2, r8
    3694:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    3696:	4b1f      	ldr	r3, [pc, #124]	; (3714 <prvSampleTimeNow+0xa0>)
    3698:	4652      	mov	r2, sl
    369a:	601a      	str	r2, [r3, #0]
}
    369c:	4650      	mov	r0, sl
    369e:	b002      	add	sp, #8
    36a0:	bc1c      	pop	{r2, r3, r4}
    36a2:	4690      	mov	r8, r2
    36a4:	4699      	mov	r9, r3
    36a6:	46a2      	mov	sl, r4
    36a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    36aa:	2300      	movs	r3, #0
    36ac:	9300      	str	r3, [sp, #0]
    36ae:	003a      	movs	r2, r7
    36b0:	2100      	movs	r1, #0
    36b2:	0020      	movs	r0, r4
    36b4:	4c18      	ldr	r4, [pc, #96]	; (3718 <prvSampleTimeNow+0xa4>)
    36b6:	47a0      	blx	r4
				configASSERT( xResult );
    36b8:	2800      	cmp	r0, #0
    36ba:	d104      	bne.n	36c6 <prvSampleTimeNow+0x52>
    36bc:	b672      	cpsid	i
    36be:	e7fe      	b.n	36be <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    36c0:	4d16      	ldr	r5, [pc, #88]	; (371c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    36c2:	4b17      	ldr	r3, [pc, #92]	; (3720 <prvSampleTimeNow+0xac>)
    36c4:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    36c6:	682b      	ldr	r3, [r5, #0]
    36c8:	681a      	ldr	r2, [r3, #0]
    36ca:	2a00      	cmp	r2, #0
    36cc:	d017      	beq.n	36fe <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    36ce:	68db      	ldr	r3, [r3, #12]
    36d0:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    36d2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    36d4:	1d26      	adds	r6, r4, #4
    36d6:	0030      	movs	r0, r6
    36d8:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    36da:	0020      	movs	r0, r4
    36dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    36de:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    36e0:	69e3      	ldr	r3, [r4, #28]
    36e2:	2b01      	cmp	r3, #1
    36e4:	d1ef      	bne.n	36c6 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    36e6:	69a3      	ldr	r3, [r4, #24]
    36e8:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    36ea:	429f      	cmp	r7, r3
    36ec:	d2dd      	bcs.n	36aa <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    36ee:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    36f0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    36f2:	4b0a      	ldr	r3, [pc, #40]	; (371c <prvSampleTimeNow+0xa8>)
    36f4:	6818      	ldr	r0, [r3, #0]
    36f6:	0031      	movs	r1, r6
    36f8:	4b0a      	ldr	r3, [pc, #40]	; (3724 <prvSampleTimeNow+0xb0>)
    36fa:	4798      	blx	r3
    36fc:	e7e3      	b.n	36c6 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    36fe:	4a0a      	ldr	r2, [pc, #40]	; (3728 <prvSampleTimeNow+0xb4>)
    3700:	4906      	ldr	r1, [pc, #24]	; (371c <prvSampleTimeNow+0xa8>)
    3702:	6810      	ldr	r0, [r2, #0]
    3704:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    3706:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    3708:	2301      	movs	r3, #1
    370a:	4642      	mov	r2, r8
    370c:	6013      	str	r3, [r2, #0]
    370e:	e7c2      	b.n	3696 <prvSampleTimeNow+0x22>
    3710:	00002ded 	.word	0x00002ded
    3714:	2000404c 	.word	0x2000404c
    3718:	00003609 	.word	0x00003609
    371c:	2000401c 	.word	0x2000401c
    3720:	00001ecf 	.word	0x00001ecf
    3724:	00001ea1 	.word	0x00001ea1
    3728:	20004020 	.word	0x20004020

0000372c <prvTimerTask>:
{
    372c:	b5f0      	push	{r4, r5, r6, r7, lr}
    372e:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3730:	4f52      	ldr	r7, [pc, #328]	; (387c <prvTimerTask+0x150>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3732:	4b53      	ldr	r3, [pc, #332]	; (3880 <prvTimerTask+0x154>)
    3734:	681b      	ldr	r3, [r3, #0]
    3736:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    3738:	2a00      	cmp	r2, #0
    373a:	d00e      	beq.n	375a <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    373c:	68db      	ldr	r3, [r3, #12]
    373e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    3740:	4b50      	ldr	r3, [pc, #320]	; (3884 <prvTimerTask+0x158>)
    3742:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3744:	a805      	add	r0, sp, #20
    3746:	4b50      	ldr	r3, [pc, #320]	; (3888 <prvTimerTask+0x15c>)
    3748:	4798      	blx	r3
    374a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    374c:	9b05      	ldr	r3, [sp, #20]
    374e:	2b00      	cmp	r3, #0
    3750:	d15f      	bne.n	3812 <prvTimerTask+0xe6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3752:	42a0      	cmp	r0, r4
    3754:	d236      	bcs.n	37c4 <prvTimerTask+0x98>
    3756:	2200      	movs	r2, #0
    3758:	e00f      	b.n	377a <prvTimerTask+0x4e>
	vTaskSuspendAll();
    375a:	4b4a      	ldr	r3, [pc, #296]	; (3884 <prvTimerTask+0x158>)
    375c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    375e:	a805      	add	r0, sp, #20
    3760:	4b49      	ldr	r3, [pc, #292]	; (3888 <prvTimerTask+0x15c>)
    3762:	4798      	blx	r3
    3764:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    3766:	9b05      	ldr	r3, [sp, #20]
    3768:	2b00      	cmp	r3, #0
    376a:	d152      	bne.n	3812 <prvTimerTask+0xe6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    376c:	4b47      	ldr	r3, [pc, #284]	; (388c <prvTimerTask+0x160>)
    376e:	681b      	ldr	r3, [r3, #0]
    3770:	681b      	ldr	r3, [r3, #0]
    3772:	425a      	negs	r2, r3
    3774:	415a      	adcs	r2, r3
    3776:	b2d2      	uxtb	r2, r2
    3778:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    377a:	1b61      	subs	r1, r4, r5
    377c:	4b44      	ldr	r3, [pc, #272]	; (3890 <prvTimerTask+0x164>)
    377e:	6818      	ldr	r0, [r3, #0]
    3780:	4b44      	ldr	r3, [pc, #272]	; (3894 <prvTimerTask+0x168>)
    3782:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    3784:	4b44      	ldr	r3, [pc, #272]	; (3898 <prvTimerTask+0x16c>)
    3786:	4798      	blx	r3
    3788:	2800      	cmp	r0, #0
    378a:	d03f      	beq.n	380c <prvTimerTask+0xe0>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    378c:	4d40      	ldr	r5, [pc, #256]	; (3890 <prvTimerTask+0x164>)
    378e:	4c43      	ldr	r4, [pc, #268]	; (389c <prvTimerTask+0x170>)
    3790:	2200      	movs	r2, #0
    3792:	a905      	add	r1, sp, #20
    3794:	6828      	ldr	r0, [r5, #0]
    3796:	47a0      	blx	r4
    3798:	2800      	cmp	r0, #0
    379a:	d0ca      	beq.n	3732 <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    379c:	9b05      	ldr	r3, [sp, #20]
    379e:	9303      	str	r3, [sp, #12]
    37a0:	2b00      	cmp	r3, #0
    37a2:	dbf5      	blt.n	3790 <prvTimerTask+0x64>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    37a4:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    37a6:	6973      	ldr	r3, [r6, #20]
    37a8:	2b00      	cmp	r3, #0
    37aa:	d001      	beq.n	37b0 <prvTimerTask+0x84>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37ac:	1d30      	adds	r0, r6, #4
    37ae:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    37b0:	a804      	add	r0, sp, #16
    37b2:	4b35      	ldr	r3, [pc, #212]	; (3888 <prvTimerTask+0x15c>)
    37b4:	4798      	blx	r3
			switch( xMessage.xMessageID )
    37b6:	9b05      	ldr	r3, [sp, #20]
    37b8:	2b09      	cmp	r3, #9
    37ba:	d8e9      	bhi.n	3790 <prvTimerTask+0x64>
    37bc:	009b      	lsls	r3, r3, #2
    37be:	4a38      	ldr	r2, [pc, #224]	; (38a0 <prvTimerTask+0x174>)
    37c0:	58d3      	ldr	r3, [r2, r3]
    37c2:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    37c4:	4b34      	ldr	r3, [pc, #208]	; (3898 <prvTimerTask+0x16c>)
    37c6:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    37c8:	4b2d      	ldr	r3, [pc, #180]	; (3880 <prvTimerTask+0x154>)
    37ca:	681b      	ldr	r3, [r3, #0]
    37cc:	68db      	ldr	r3, [r3, #12]
    37ce:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37d0:	1d30      	adds	r0, r6, #4
    37d2:	4b2a      	ldr	r3, [pc, #168]	; (387c <prvTimerTask+0x150>)
    37d4:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    37d6:	69f3      	ldr	r3, [r6, #28]
    37d8:	2b01      	cmp	r3, #1
    37da:	d003      	beq.n	37e4 <prvTimerTask+0xb8>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    37de:	0030      	movs	r0, r6
    37e0:	4798      	blx	r3
    37e2:	e7d3      	b.n	378c <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    37e4:	69b3      	ldr	r3, [r6, #24]
    37e6:	18e1      	adds	r1, r4, r3
    37e8:	0023      	movs	r3, r4
    37ea:	002a      	movs	r2, r5
    37ec:	0030      	movs	r0, r6
    37ee:	4d2d      	ldr	r5, [pc, #180]	; (38a4 <prvTimerTask+0x178>)
    37f0:	47a8      	blx	r5
    37f2:	2800      	cmp	r0, #0
    37f4:	d0f2      	beq.n	37dc <prvTimerTask+0xb0>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    37f6:	2300      	movs	r3, #0
    37f8:	9300      	str	r3, [sp, #0]
    37fa:	0022      	movs	r2, r4
    37fc:	2100      	movs	r1, #0
    37fe:	0030      	movs	r0, r6
    3800:	4c29      	ldr	r4, [pc, #164]	; (38a8 <prvTimerTask+0x17c>)
    3802:	47a0      	blx	r4
			configASSERT( xResult );
    3804:	2800      	cmp	r0, #0
    3806:	d1e9      	bne.n	37dc <prvTimerTask+0xb0>
    3808:	b672      	cpsid	i
    380a:	e7fe      	b.n	380a <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
    380c:	4b27      	ldr	r3, [pc, #156]	; (38ac <prvTimerTask+0x180>)
    380e:	4798      	blx	r3
    3810:	e7bc      	b.n	378c <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    3812:	4b21      	ldr	r3, [pc, #132]	; (3898 <prvTimerTask+0x16c>)
    3814:	4798      	blx	r3
    3816:	e7b9      	b.n	378c <prvTimerTask+0x60>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3818:	9b06      	ldr	r3, [sp, #24]
    381a:	69b2      	ldr	r2, [r6, #24]
    381c:	4694      	mov	ip, r2
    381e:	4463      	add	r3, ip
    3820:	0019      	movs	r1, r3
    3822:	9b06      	ldr	r3, [sp, #24]
    3824:	0002      	movs	r2, r0
    3826:	0030      	movs	r0, r6
    3828:	4c1e      	ldr	r4, [pc, #120]	; (38a4 <prvTimerTask+0x178>)
    382a:	47a0      	blx	r4
    382c:	2800      	cmp	r0, #0
    382e:	d0ae      	beq.n	378e <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3830:	0030      	movs	r0, r6
    3832:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3834:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3836:	69f3      	ldr	r3, [r6, #28]
    3838:	2b01      	cmp	r3, #1
    383a:	d1a8      	bne.n	378e <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    383c:	9b06      	ldr	r3, [sp, #24]
    383e:	69b1      	ldr	r1, [r6, #24]
    3840:	468c      	mov	ip, r1
    3842:	4463      	add	r3, ip
    3844:	001a      	movs	r2, r3
    3846:	2300      	movs	r3, #0
    3848:	9300      	str	r3, [sp, #0]
    384a:	2100      	movs	r1, #0
    384c:	0030      	movs	r0, r6
    384e:	4c16      	ldr	r4, [pc, #88]	; (38a8 <prvTimerTask+0x17c>)
    3850:	47a0      	blx	r4
							configASSERT( xResult );
    3852:	2800      	cmp	r0, #0
    3854:	d19b      	bne.n	378e <prvTimerTask+0x62>
    3856:	b672      	cpsid	i
    3858:	e7fe      	b.n	3858 <prvTimerTask+0x12c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    385a:	9906      	ldr	r1, [sp, #24]
    385c:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    385e:	2900      	cmp	r1, #0
    3860:	d006      	beq.n	3870 <prvTimerTask+0x144>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3862:	1841      	adds	r1, r0, r1
    3864:	0003      	movs	r3, r0
    3866:	0002      	movs	r2, r0
    3868:	0030      	movs	r0, r6
    386a:	4c0e      	ldr	r4, [pc, #56]	; (38a4 <prvTimerTask+0x178>)
    386c:	47a0      	blx	r4
    386e:	e78e      	b.n	378e <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    3870:	b672      	cpsid	i
    3872:	e7fe      	b.n	3872 <prvTimerTask+0x146>
						vPortFree( pxTimer );
    3874:	0030      	movs	r0, r6
    3876:	4b0e      	ldr	r3, [pc, #56]	; (38b0 <prvTimerTask+0x184>)
    3878:	4798      	blx	r3
    387a:	e788      	b.n	378e <prvTimerTask+0x62>
    387c:	00001ecf 	.word	0x00001ecf
    3880:	2000401c 	.word	0x2000401c
    3884:	00002ddd 	.word	0x00002ddd
    3888:	00003675 	.word	0x00003675
    388c:	20004020 	.word	0x20004020
    3890:	20004050 	.word	0x20004050
    3894:	0000294d 	.word	0x0000294d
    3898:	00002f19 	.word	0x00002f19
    389c:	00002661 	.word	0x00002661
    38a0:	00004458 	.word	0x00004458
    38a4:	00003519 	.word	0x00003519
    38a8:	00003609 	.word	0x00003609
    38ac:	00001fed 	.word	0x00001fed
    38b0:	00002131 	.word	0x00002131

000038b4 <uart_task>:
 * anything to the display -- that is done by \ref terminal_task().
 *
 * \param params Parameters for the task. (Not used.)
 */
static void uart_task(void *params)
{
    38b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38b6:	46de      	mov	lr, fp
    38b8:	4657      	mov	r7, sl
    38ba:	464e      	mov	r6, r9
    38bc:	4645      	mov	r5, r8
    38be:	b5e0      	push	{r5, r6, r7, lr}
    38c0:	b083      	sub	sp, #12
	uint8_t *current_line_ptr;
	uint8_t *current_char_ptr;
	uint8_t current_column = 0;
    38c2:	2500      	movs	r5, #0
		port_base->OUTCLR.reg = pin_mask;
    38c4:	4b2b      	ldr	r3, [pc, #172]	; (3974 <uart_task+0xc0>)
    38c6:	469a      	mov	sl, r3
    38c8:	2380      	movs	r3, #128	; 0x80
    38ca:	02db      	lsls	r3, r3, #11
    38cc:	469b      	mov	fp, r3
    38ce:	9301      	str	r3, [sp, #4]
			default:
				// For all other characters, just move head to next char
				current_column++;
				if (current_column >= TERMINAL_COLUMNS) {
					current_column = 0;
					terminal_line_offset = (terminal_line_offset + 1)
    38d0:	4b29      	ldr	r3, [pc, #164]	; (3978 <uart_task+0xc4>)
    38d2:	4699      	mov	r9, r3
    38d4:	e03a      	b.n	394c <uart_task+0x98>
				current_column++;
    38d6:	3501      	adds	r5, #1
    38d8:	b2ed      	uxtb	r5, r5
				if (current_column >= TERMINAL_COLUMNS) {
    38da:	2d14      	cmp	r5, #20
    38dc:	d90b      	bls.n	38f6 <uart_task+0x42>
					terminal_line_offset = (terminal_line_offset + 1)
    38de:	464b      	mov	r3, r9
    38e0:	781b      	ldrb	r3, [r3, #0]
							% TERMINAL_BUFFER_LINES;
    38e2:	3301      	adds	r3, #1
    38e4:	2603      	movs	r6, #3
    38e6:	401e      	ands	r6, r3
					terminal_line_offset = (terminal_line_offset + 1)
    38e8:	464b      	mov	r3, r9
    38ea:	701e      	strb	r6, [r3, #0]
					current_line_ptr = terminal_buffer[terminal_line_offset];
    38ec:	2316      	movs	r3, #22
    38ee:	435e      	muls	r6, r3
    38f0:	4b22      	ldr	r3, [pc, #136]	; (397c <uart_task+0xc8>)
    38f2:	199e      	adds	r6, r3, r6
					current_column = 0;
    38f4:	2500      	movs	r5, #0
				}
				current_char_ptr = current_line_ptr + current_column;
    38f6:	1974      	adds	r4, r6, r5
			}

			// Set zero-terminator at head
			*current_char_ptr = '\0';
    38f8:	2300      	movs	r3, #0
    38fa:	7023      	strb	r3, [r4, #0]
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) {
    38fc:	2200      	movs	r2, #0
    38fe:	0021      	movs	r1, r4
    3900:	4643      	mov	r3, r8
    3902:	6818      	ldr	r0, [r3, #0]
    3904:	47b8      	blx	r7
    3906:	2800      	cmp	r0, #0
    3908:	d013      	beq.n	3932 <uart_task+0x7e>
			switch (*current_char_ptr) {
    390a:	7823      	ldrb	r3, [r4, #0]
    390c:	2b0a      	cmp	r3, #10
    390e:	d0f3      	beq.n	38f8 <uart_task+0x44>
    3910:	2b0d      	cmp	r3, #13
    3912:	d1e0      	bne.n	38d6 <uart_task+0x22>
				*current_char_ptr = '\0';
    3914:	2300      	movs	r3, #0
    3916:	7023      	strb	r3, [r4, #0]
				terminal_line_offset = (terminal_line_offset + 1)
    3918:	4a17      	ldr	r2, [pc, #92]	; (3978 <uart_task+0xc4>)
    391a:	7813      	ldrb	r3, [r2, #0]
						% TERMINAL_BUFFER_LINES;
    391c:	3301      	adds	r3, #1
    391e:	2403      	movs	r4, #3
    3920:	401c      	ands	r4, r3
				terminal_line_offset = (terminal_line_offset + 1)
    3922:	7014      	strb	r4, [r2, #0]
				current_line_ptr = terminal_buffer[terminal_line_offset];
    3924:	2316      	movs	r3, #22
    3926:	435c      	muls	r4, r3
    3928:	4b14      	ldr	r3, [pc, #80]	; (397c <uart_task+0xc8>)
    392a:	191c      	adds	r4, r3, r4
				current_char_ptr = current_line_ptr + current_column;
    392c:	0026      	movs	r6, r4
				current_column = 0;
    392e:	2500      	movs	r5, #0
				break;
    3930:	e7e2      	b.n	38f8 <uart_task+0x44>
		}

		xSemaphoreGive(terminal_mutex);
    3932:	4b13      	ldr	r3, [pc, #76]	; (3980 <uart_task+0xcc>)
    3934:	6818      	ldr	r0, [r3, #0]
    3936:	2300      	movs	r3, #0
    3938:	2200      	movs	r2, #0
    393a:	2100      	movs	r1, #0
    393c:	4c11      	ldr	r4, [pc, #68]	; (3984 <uart_task+0xd0>)
    393e:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    3940:	4653      	mov	r3, sl
    3942:	465a      	mov	r2, fp
    3944:	619a      	str	r2, [r3, #24]

		oled1_set_led_state(&oled1, OLED1_LED1_ID, false);

		vTaskDelay(UART_TASK_DELAY);
    3946:	2002      	movs	r0, #2
    3948:	4b0f      	ldr	r3, [pc, #60]	; (3988 <uart_task+0xd4>)
    394a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    394c:	4653      	mov	r3, sl
    394e:	9a01      	ldr	r2, [sp, #4]
    3950:	615a      	str	r2, [r3, #20]
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    3952:	4b0b      	ldr	r3, [pc, #44]	; (3980 <uart_task+0xcc>)
    3954:	6818      	ldr	r0, [r3, #0]
    3956:	2101      	movs	r1, #1
    3958:	4249      	negs	r1, r1
    395a:	4b0c      	ldr	r3, [pc, #48]	; (398c <uart_task+0xd8>)
    395c:	4798      	blx	r3
		current_line_ptr = terminal_buffer[terminal_line_offset];
    395e:	4b06      	ldr	r3, [pc, #24]	; (3978 <uart_task+0xc4>)
    3960:	781b      	ldrb	r3, [r3, #0]
    3962:	2616      	movs	r6, #22
    3964:	435e      	muls	r6, r3
    3966:	4b05      	ldr	r3, [pc, #20]	; (397c <uart_task+0xc8>)
    3968:	199e      	adds	r6, r3, r6
		current_char_ptr = current_line_ptr + current_column;
    396a:	1974      	adds	r4, r6, r5
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) {
    396c:	4b08      	ldr	r3, [pc, #32]	; (3990 <uart_task+0xdc>)
    396e:	4698      	mov	r8, r3
    3970:	4f08      	ldr	r7, [pc, #32]	; (3994 <uart_task+0xe0>)
    3972:	e7c3      	b.n	38fc <uart_task+0x48>
    3974:	41004400 	.word	0x41004400
    3978:	200040f0 	.word	0x200040f0
    397c:	20004094 	.word	0x20004094
    3980:	200040f4 	.word	0x200040f4
    3984:	000023d9 	.word	0x000023d9
    3988:	00003019 	.word	0x00003019
    398c:	000027b5 	.word	0x000027b5
    3990:	200040ec 	.word	0x200040ec
    3994:	00002661 	.word	0x00002661

00003998 <apaga_display>:
{
    3998:	b570      	push	{r4, r5, r6, lr}
	gfx_mono_draw_string("                    ", 0 , 0 , &sysfont);
    399a:	4e13      	ldr	r6, [pc, #76]	; (39e8 <apaga_display+0x50>)
    399c:	4d13      	ldr	r5, [pc, #76]	; (39ec <apaga_display+0x54>)
    399e:	0033      	movs	r3, r6
    39a0:	2200      	movs	r2, #0
    39a2:	2100      	movs	r1, #0
    39a4:	0028      	movs	r0, r5
    39a6:	4c12      	ldr	r4, [pc, #72]	; (39f0 <apaga_display+0x58>)
    39a8:	47a0      	blx	r4
	gfx_mono_draw_string("                    ", 0 , 11 , &sysfont);
    39aa:	0033      	movs	r3, r6
    39ac:	220b      	movs	r2, #11
    39ae:	2100      	movs	r1, #0
    39b0:	0028      	movs	r0, r5
    39b2:	47a0      	blx	r4
	gfx_mono_draw_string("                    ", 0 , 12 , &sysfont);	
    39b4:	0033      	movs	r3, r6
    39b6:	220c      	movs	r2, #12
    39b8:	2100      	movs	r1, #0
    39ba:	0028      	movs	r0, r5
    39bc:	47a0      	blx	r4
	gfx_mono_draw_string("                    ", 0 , 13 , &sysfont);
    39be:	0033      	movs	r3, r6
    39c0:	220d      	movs	r2, #13
    39c2:	2100      	movs	r1, #0
    39c4:	0028      	movs	r0, r5
    39c6:	47a0      	blx	r4
	gfx_mono_draw_string("                    ", 0 , 14 , &sysfont);
    39c8:	0033      	movs	r3, r6
    39ca:	220e      	movs	r2, #14
    39cc:	2100      	movs	r1, #0
    39ce:	0028      	movs	r0, r5
    39d0:	47a0      	blx	r4
	gfx_mono_draw_string("                    ", 0 , 15 , &sysfont);
    39d2:	0033      	movs	r3, r6
    39d4:	220f      	movs	r2, #15
    39d6:	2100      	movs	r1, #0
    39d8:	0028      	movs	r0, r5
    39da:	47a0      	blx	r4
	gfx_mono_draw_string("                    ", 0 , 16 , &sysfont);
    39dc:	0033      	movs	r3, r6
    39de:	2210      	movs	r2, #16
    39e0:	2100      	movs	r1, #0
    39e2:	0028      	movs	r0, r5
    39e4:	47a0      	blx	r4
}
    39e6:	bd70      	pop	{r4, r5, r6, pc}
    39e8:	20000008 	.word	0x20000008
    39ec:	000044c8 	.word	0x000044c8
    39f0:	000006cd 	.word	0x000006cd

000039f4 <main_task>:
{ 	
    39f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39f6:	46de      	mov	lr, fp
    39f8:	4657      	mov	r7, sl
    39fa:	464e      	mov	r6, r9
    39fc:	4645      	mov	r5, r8
    39fe:	b5e0      	push	{r5, r6, r7, lr}
    3a00:	b08b      	sub	sp, #44	; 0x2c
	bool selection_changed = true;
    3a02:	2701      	movs	r7, #1
	int vari = 0;
    3a04:	2400      	movs	r4, #0
    3a06:	4d62      	ldr	r5, [pc, #392]	; (3b90 <main_task+0x19c>)
    3a08:	2380      	movs	r3, #128	; 0x80
    3a0a:	055b      	lsls	r3, r3, #21
    3a0c:	4699      	mov	r9, r3
    3a0e:	469a      	mov	sl, r3
				gfx_mono_draw_string(menu_items_text[i], x, y, &sysfont);
    3a10:	4b60      	ldr	r3, [pc, #384]	; (3b94 <main_task+0x1a0>)
    3a12:	3306      	adds	r3, #6
    3a14:	9303      	str	r3, [sp, #12]
    3a16:	e082      	b.n	3b1e <main_task+0x12a>
	return (port_base->IN.reg & pin_mask);
    3a18:	6a2b      	ldr	r3, [r5, #32]
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON2_ID)) 
    3a1a:	065b      	lsls	r3, r3, #25
    3a1c:	d405      	bmi.n	3a2a <main_task+0x36>
			senha[vari] = 2;	
    3a1e:	00a2      	lsls	r2, r4, #2
    3a20:	2102      	movs	r1, #2
    3a22:	ab06      	add	r3, sp, #24
    3a24:	50d1      	str	r1, [r2, r3]
			vari++;		
    3a26:	3401      	adds	r4, #1
    3a28:	e084      	b.n	3b34 <main_task+0x140>
    3a2a:	6a2b      	ldr	r3, [r5, #32]
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON3_ID)) 
    3a2c:	061b      	lsls	r3, r3, #24
    3a2e:	d500      	bpl.n	3a32 <main_task+0x3e>
    3a30:	e080      	b.n	3b34 <main_task+0x140>
			senha[vari] = 3;
    3a32:	00a2      	lsls	r2, r4, #2
    3a34:	2103      	movs	r1, #3
    3a36:	ab06      	add	r3, sp, #24
    3a38:	50d1      	str	r1, [r2, r3]
			vari++;						
    3a3a:	3401      	adds	r4, #1
    3a3c:	e07a      	b.n	3b34 <main_task+0x140>
			apaga_display();
    3a3e:	4b56      	ldr	r3, [pc, #344]	; (3b98 <main_task+0x1a4>)
    3a40:	4798      	blx	r3
			gfx_mono_draw_string("         * ", 0 , 10 , &sysfont);
    3a42:	4b56      	ldr	r3, [pc, #344]	; (3b9c <main_task+0x1a8>)
    3a44:	220a      	movs	r2, #10
    3a46:	2100      	movs	r1, #0
    3a48:	4855      	ldr	r0, [pc, #340]	; (3ba0 <main_task+0x1ac>)
    3a4a:	4e56      	ldr	r6, [pc, #344]	; (3ba4 <main_task+0x1b0>)
    3a4c:	47b0      	blx	r6
    3a4e:	e01f      	b.n	3a90 <main_task+0x9c>
			apaga_display();
    3a50:	4b51      	ldr	r3, [pc, #324]	; (3b98 <main_task+0x1a4>)
    3a52:	4798      	blx	r3
			gfx_mono_draw_string("         * * ", 0 , 10 , &sysfont);
    3a54:	4b51      	ldr	r3, [pc, #324]	; (3b9c <main_task+0x1a8>)
    3a56:	220a      	movs	r2, #10
    3a58:	2100      	movs	r1, #0
    3a5a:	4853      	ldr	r0, [pc, #332]	; (3ba8 <main_task+0x1b4>)
    3a5c:	4e51      	ldr	r6, [pc, #324]	; (3ba4 <main_task+0x1b0>)
    3a5e:	47b0      	blx	r6
    3a60:	e016      	b.n	3a90 <main_task+0x9c>
				gfx_mono_draw_string("         * * *", 0 , 10 , &sysfont);
    3a62:	4b4e      	ldr	r3, [pc, #312]	; (3b9c <main_task+0x1a8>)
    3a64:	220a      	movs	r2, #10
    3a66:	2100      	movs	r1, #0
    3a68:	4850      	ldr	r0, [pc, #320]	; (3bac <main_task+0x1b8>)
    3a6a:	4e4e      	ldr	r6, [pc, #312]	; (3ba4 <main_task+0x1b0>)
    3a6c:	46b0      	mov	r8, r6
    3a6e:	47b0      	blx	r6
				delay_ms(500);
    3a70:	20fa      	movs	r0, #250	; 0xfa
    3a72:	0040      	lsls	r0, r0, #1
    3a74:	4e4e      	ldr	r6, [pc, #312]	; (3bb0 <main_task+0x1bc>)
    3a76:	47b0      	blx	r6
				apaga_display();
    3a78:	4b47      	ldr	r3, [pc, #284]	; (3b98 <main_task+0x1a4>)
    3a7a:	4798      	blx	r3
				gfx_mono_draw_string("   SENHA INCORRETA! ", 0 , 5 , &sysfont);	
    3a7c:	4b47      	ldr	r3, [pc, #284]	; (3b9c <main_task+0x1a8>)
    3a7e:	2205      	movs	r2, #5
    3a80:	2100      	movs	r1, #0
    3a82:	484c      	ldr	r0, [pc, #304]	; (3bb4 <main_task+0x1c0>)
    3a84:	47c0      	blx	r8
				delay_ms(1000);
    3a86:	20fa      	movs	r0, #250	; 0xfa
    3a88:	0080      	lsls	r0, r0, #2
    3a8a:	47b0      	blx	r6
				Reset_Handler();
    3a8c:	4b4a      	ldr	r3, [pc, #296]	; (3bb8 <main_task+0x1c4>)
    3a8e:	4798      	blx	r3
		if (selection_changed) {
    3a90:	2f00      	cmp	r7, #0
    3a92:	d03e      	beq.n	3b12 <main_task+0x11e>
			xSemaphoreTake(display_mutex, portMAX_DELAY);
    3a94:	4e49      	ldr	r6, [pc, #292]	; (3bbc <main_task+0x1c8>)
    3a96:	2101      	movs	r1, #1
    3a98:	4249      	negs	r1, r1
    3a9a:	6830      	ldr	r0, [r6, #0]
    3a9c:	4b48      	ldr	r3, [pc, #288]	; (3bc0 <main_task+0x1cc>)
    3a9e:	4798      	blx	r3
			temp_task_handle = about_task_handle;
    3aa0:	4b48      	ldr	r3, [pc, #288]	; (3bc4 <main_task+0x1d0>)
    3aa2:	681b      	ldr	r3, [r3, #0]
    3aa4:	469b      	mov	fp, r3
			gfx_mono_draw_filled_rect(0, display_y_offset,
    3aa6:	2300      	movs	r3, #0
    3aa8:	9300      	str	r3, [sp, #0]
    3aaa:	3320      	adds	r3, #32
    3aac:	2280      	movs	r2, #128	; 0x80
    3aae:	2100      	movs	r1, #0
    3ab0:	2000      	movs	r0, #0
    3ab2:	4f45      	ldr	r7, [pc, #276]	; (3bc8 <main_task+0x1d4>)
    3ab4:	47b8      	blx	r7
			gfx_mono_draw_horizontal_line(0, y, GFX_MONO_LCD_WIDTH,
    3ab6:	2301      	movs	r3, #1
    3ab8:	2280      	movs	r2, #128	; 0x80
    3aba:	2117      	movs	r1, #23
    3abc:	2000      	movs	r0, #0
    3abe:	4f43      	ldr	r7, [pc, #268]	; (3bcc <main_task+0x1d8>)
    3ac0:	47b8      	blx	r7
				gfx_mono_draw_vertical_line(x, y, MENU_HEIGHT,
    3ac2:	2301      	movs	r3, #1
    3ac4:	2208      	movs	r2, #8
    3ac6:	2118      	movs	r1, #24
    3ac8:	203f      	movs	r0, #63	; 0x3f
    3aca:	4f41      	ldr	r7, [pc, #260]	; (3bd0 <main_task+0x1dc>)
    3acc:	47b8      	blx	r7
			gfx_mono_draw_rect(current_selection * (1 + MENU_ITEM_WIDTH), y,
    3ace:	2301      	movs	r3, #1
    3ad0:	9300      	str	r3, [sp, #0]
    3ad2:	3307      	adds	r3, #7
    3ad4:	223f      	movs	r2, #63	; 0x3f
    3ad6:	2118      	movs	r1, #24
    3ad8:	2040      	movs	r0, #64	; 0x40
    3ada:	4f3e      	ldr	r7, [pc, #248]	; (3bd4 <main_task+0x1e0>)
    3adc:	47b8      	blx	r7
				gfx_mono_draw_string(menu_items_text[i], x, y, &sysfont);
    3ade:	4b2f      	ldr	r3, [pc, #188]	; (3b9c <main_task+0x1a8>)
    3ae0:	2219      	movs	r2, #25
    3ae2:	2110      	movs	r1, #16
    3ae4:	482b      	ldr	r0, [pc, #172]	; (3b94 <main_task+0x1a0>)
    3ae6:	4f2f      	ldr	r7, [pc, #188]	; (3ba4 <main_task+0x1b0>)
    3ae8:	47b8      	blx	r7
    3aea:	4b2c      	ldr	r3, [pc, #176]	; (3b9c <main_task+0x1a8>)
    3aec:	2219      	movs	r2, #25
    3aee:	2150      	movs	r1, #80	; 0x50
    3af0:	9803      	ldr	r0, [sp, #12]
    3af2:	47b8      	blx	r7
    3af4:	2040      	movs	r0, #64	; 0x40
    3af6:	4b38      	ldr	r3, [pc, #224]	; (3bd8 <main_task+0x1e4>)
    3af8:	4798      	blx	r3
			xSemaphoreGive(display_mutex);
    3afa:	6830      	ldr	r0, [r6, #0]
    3afc:	2300      	movs	r3, #0
    3afe:	2200      	movs	r2, #0
    3b00:	2100      	movs	r1, #0
    3b02:	4e36      	ldr	r6, [pc, #216]	; (3bdc <main_task+0x1e8>)
    3b04:	47b0      	blx	r6
			if (temp_task_handle) {
    3b06:	465b      	mov	r3, fp
    3b08:	2b00      	cmp	r3, #0
    3b0a:	d002      	beq.n	3b12 <main_task+0x11e>
				vTaskResume(temp_task_handle);
    3b0c:	4658      	mov	r0, fp
    3b0e:	4b34      	ldr	r3, [pc, #208]	; (3be0 <main_task+0x1ec>)
    3b10:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3b12:	464b      	mov	r3, r9
    3b14:	61ab      	str	r3, [r5, #24]
		vTaskDelay(MAIN_TASK_DELAY);
    3b16:	2014      	movs	r0, #20
    3b18:	4b32      	ldr	r3, [pc, #200]	; (3be4 <main_task+0x1f0>)
    3b1a:	4798      	blx	r3
    3b1c:	2700      	movs	r7, #0
		port_base->OUTCLR.reg = pin_mask;
    3b1e:	4653      	mov	r3, sl
    3b20:	616b      	str	r3, [r5, #20]
	return (port_base->IN.reg & pin_mask);
    3b22:	6a2b      	ldr	r3, [r5, #32]
		if (oled1_get_button_state(&oled1, OLED1_BUTTON1_ID)) 
    3b24:	025b      	lsls	r3, r3, #9
    3b26:	d500      	bpl.n	3b2a <main_task+0x136>
    3b28:	e776      	b.n	3a18 <main_task+0x24>
			senha[vari] = 1;
    3b2a:	00a2      	lsls	r2, r4, #2
    3b2c:	2101      	movs	r1, #1
    3b2e:	ab06      	add	r3, sp, #24
    3b30:	50d1      	str	r1, [r2, r3]
			vari++;									
    3b32:	3401      	adds	r4, #1
		if (vari == 2)
    3b34:	2c02      	cmp	r4, #2
    3b36:	d082      	beq.n	3a3e <main_task+0x4a>
		}else if (vari == 3)
    3b38:	2c03      	cmp	r4, #3
    3b3a:	d089      	beq.n	3a50 <main_task+0x5c>
		if (vari == 4)
    3b3c:	2c04      	cmp	r4, #4
    3b3e:	d1a7      	bne.n	3a90 <main_task+0x9c>
			int verdade = ((senha[3] - testea[3]) + (senha[2] - testea[2]) + (senha[1] - testea[1]) + (senha[0] - testea[0]));
    3b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b42:	9304      	str	r3, [sp, #16]
    3b44:	9b08      	ldr	r3, [sp, #32]
    3b46:	9305      	str	r3, [sp, #20]
    3b48:	9b04      	ldr	r3, [sp, #16]
    3b4a:	9a05      	ldr	r2, [sp, #20]
    3b4c:	4694      	mov	ip, r2
    3b4e:	4463      	add	r3, ip
    3b50:	9a07      	ldr	r2, [sp, #28]
    3b52:	189b      	adds	r3, r3, r2
    3b54:	9a06      	ldr	r2, [sp, #24]
    3b56:	4694      	mov	ip, r2
    3b58:	4463      	add	r3, ip
			if(verdade == 0)
    3b5a:	2b06      	cmp	r3, #6
    3b5c:	d181      	bne.n	3a62 <main_task+0x6e>
				gfx_mono_draw_string("         * * *", 0 , 10 , &sysfont);
    3b5e:	4b0f      	ldr	r3, [pc, #60]	; (3b9c <main_task+0x1a8>)
    3b60:	220a      	movs	r2, #10
    3b62:	2100      	movs	r1, #0
    3b64:	4811      	ldr	r0, [pc, #68]	; (3bac <main_task+0x1b8>)
    3b66:	4e0f      	ldr	r6, [pc, #60]	; (3ba4 <main_task+0x1b0>)
    3b68:	46b3      	mov	fp, r6
    3b6a:	47b0      	blx	r6
				delay_ms(500);
    3b6c:	20fa      	movs	r0, #250	; 0xfa
    3b6e:	0040      	lsls	r0, r0, #1
    3b70:	4e0f      	ldr	r6, [pc, #60]	; (3bb0 <main_task+0x1bc>)
    3b72:	47b0      	blx	r6
				apaga_display();
    3b74:	4b08      	ldr	r3, [pc, #32]	; (3b98 <main_task+0x1a4>)
    3b76:	4798      	blx	r3
				gfx_mono_draw_string("    SENHA CORRETA!", 0 , 5 , &sysfont);	
    3b78:	4b08      	ldr	r3, [pc, #32]	; (3b9c <main_task+0x1a8>)
    3b7a:	2205      	movs	r2, #5
    3b7c:	2100      	movs	r1, #0
    3b7e:	481a      	ldr	r0, [pc, #104]	; (3be8 <main_task+0x1f4>)
    3b80:	47d8      	blx	fp
				delay_ms(1000);
    3b82:	20fa      	movs	r0, #250	; 0xfa
    3b84:	0080      	lsls	r0, r0, #2
    3b86:	47b0      	blx	r6
				Reset_Handler();
    3b88:	4b0b      	ldr	r3, [pc, #44]	; (3bb8 <main_task+0x1c4>)
    3b8a:	4798      	blx	r3
    3b8c:	e780      	b.n	3a90 <main_task+0x9c>
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	41004400 	.word	0x41004400
    3b94:	00004550 	.word	0x00004550
    3b98:	00003999 	.word	0x00003999
    3b9c:	20000008 	.word	0x20000008
    3ba0:	000044f8 	.word	0x000044f8
    3ba4:	000006cd 	.word	0x000006cd
    3ba8:	00004504 	.word	0x00004504
    3bac:	00004514 	.word	0x00004514
    3bb0:	000003bd 	.word	0x000003bd
    3bb4:	00004538 	.word	0x00004538
    3bb8:	00001d89 	.word	0x00001d89
    3bbc:	20004090 	.word	0x20004090
    3bc0:	000027b5 	.word	0x000027b5
    3bc4:	20004058 	.word	0x20004058
    3bc8:	000005c9 	.word	0x000005c9
    3bcc:	00000415 	.word	0x00000415
    3bd0:	000004dd 	.word	0x000004dd
    3bd4:	00000579 	.word	0x00000579
    3bd8:	00000115 	.word	0x00000115
    3bdc:	000023d9 	.word	0x000023d9
    3be0:	00002ce9 	.word	0x00002ce9
    3be4:	00003019 	.word	0x00003019
    3be8:	00004524 	.word	0x00004524

00003bec <about_task>:
{
    3bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bee:	46de      	mov	lr, fp
    3bf0:	4657      	mov	r7, sl
    3bf2:	464e      	mov	r6, r9
    3bf4:	4645      	mov	r5, r8
    3bf6:	b5e0      	push	{r5, r6, r7, lr}
    3bf8:	b083      	sub	sp, #12
	shift = 1;
    3bfa:	2301      	movs	r3, #1
    3bfc:	9300      	str	r3, [sp, #0]
		port_base->OUTCLR.reg = pin_mask;
    3bfe:	2380      	movs	r3, #128	; 0x80
    3c00:	031b      	lsls	r3, r3, #12
    3c02:	9301      	str	r3, [sp, #4]
    3c04:	e004      	b.n	3c10 <about_task+0x24>
			vTaskSuspend(NULL);
    3c06:	2000      	movs	r0, #0
    3c08:	4b2c      	ldr	r3, [pc, #176]	; (3cbc <about_task+0xd0>)
    3c0a:	4798      	blx	r3
			shift = 0;
    3c0c:	2300      	movs	r3, #0
    3c0e:	9300      	str	r3, [sp, #0]
    3c10:	4b2b      	ldr	r3, [pc, #172]	; (3cc0 <about_task+0xd4>)
    3c12:	9a01      	ldr	r2, [sp, #4]
    3c14:	615a      	str	r2, [r3, #20]
		xSemaphoreTake(display_mutex, portMAX_DELAY);
    3c16:	2101      	movs	r1, #1
    3c18:	4249      	negs	r1, r1
    3c1a:	4b2a      	ldr	r3, [pc, #168]	; (3cc4 <about_task+0xd8>)
    3c1c:	6818      	ldr	r0, [r3, #0]
    3c1e:	4b2a      	ldr	r3, [pc, #168]	; (3cc8 <about_task+0xdc>)
    3c20:	4798      	blx	r3
			x = (((i % TERMINAL_COLUMNS) * SYSFONT_WIDTH) * shift
    3c22:	9a00      	ldr	r2, [sp, #0]
    3c24:	4690      	mov	r8, r2
					+ (CANVAS_WIDTH / 2) * (max_shift - shift))
    3c26:	2308      	movs	r3, #8
    3c28:	1a9b      	subs	r3, r3, r2
    3c2a:	019a      	lsls	r2, r3, #6
    3c2c:	4693      	mov	fp, r2
					+ (CANVAS_HEIGHT / 2) * (max_shift - shift))
    3c2e:	009a      	lsls	r2, r3, #2
    3c30:	18d2      	adds	r2, r2, r3
    3c32:	0052      	lsls	r2, r2, #1
    3c34:	4691      	mov	r9, r2
    3c36:	4499      	add	r9, r3
    3c38:	2600      	movs	r6, #0
			y = (((i / TERMINAL_COLUMNS) * SYSFONT_HEIGHT) * shift
    3c3a:	4b24      	ldr	r3, [pc, #144]	; (3ccc <about_task+0xe0>)
    3c3c:	469a      	mov	sl, r3
    3c3e:	b2f7      	uxtb	r7, r6
    3c40:	2115      	movs	r1, #21
    3c42:	0038      	movs	r0, r7
    3c44:	47d0      	blx	sl
    3c46:	b2c5      	uxtb	r5, r0
    3c48:	00e8      	lsls	r0, r5, #3
    3c4a:	1b40      	subs	r0, r0, r5
    3c4c:	4643      	mov	r3, r8
    3c4e:	4358      	muls	r0, r3
					+ (CANVAS_HEIGHT / 2) * (max_shift - shift))
    3c50:	4448      	add	r0, r9
					/ max_shift;
    3c52:	17c5      	asrs	r5, r0, #31
    3c54:	2407      	movs	r4, #7
    3c56:	4025      	ands	r5, r4
    3c58:	1828      	adds	r0, r5, r0
    3c5a:	10c0      	asrs	r0, r0, #3
			gfx_mono_draw_char(c, x, y, &sysfont);
    3c5c:	b2c5      	uxtb	r5, r0
			x = (((i % TERMINAL_COLUMNS) * SYSFONT_WIDTH) * shift
    3c5e:	2115      	movs	r1, #21
    3c60:	0038      	movs	r0, r7
    3c62:	4b1b      	ldr	r3, [pc, #108]	; (3cd0 <about_task+0xe4>)
    3c64:	4798      	blx	r3
    3c66:	b2cb      	uxtb	r3, r1
    3c68:	0059      	lsls	r1, r3, #1
    3c6a:	18c9      	adds	r1, r1, r3
    3c6c:	0049      	lsls	r1, r1, #1
    3c6e:	4643      	mov	r3, r8
    3c70:	4359      	muls	r1, r3
					+ (CANVAS_WIDTH / 2) * (max_shift - shift))
    3c72:	000b      	movs	r3, r1
    3c74:	445b      	add	r3, fp
					/ max_shift;
    3c76:	17d9      	asrs	r1, r3, #31
    3c78:	4021      	ands	r1, r4
    3c7a:	18c9      	adds	r1, r1, r3
    3c7c:	10c9      	asrs	r1, r1, #3
			gfx_mono_draw_char(c, x, y, &sysfont);
    3c7e:	b2c9      	uxtb	r1, r1
			c = about_text[i];
    3c80:	4b14      	ldr	r3, [pc, #80]	; (3cd4 <about_task+0xe8>)
			gfx_mono_draw_char(c, x, y, &sysfont);
    3c82:	5cf0      	ldrb	r0, [r6, r3]
    3c84:	4b14      	ldr	r3, [pc, #80]	; (3cd8 <about_task+0xec>)
    3c86:	002a      	movs	r2, r5
    3c88:	4c14      	ldr	r4, [pc, #80]	; (3cdc <about_task+0xf0>)
    3c8a:	47a0      	blx	r4
    3c8c:	3601      	adds	r6, #1
		for (i = 0; i < (sizeof(about_text) - 1); i++) {
    3c8e:	2e3c      	cmp	r6, #60	; 0x3c
    3c90:	d1d5      	bne.n	3c3e <about_task+0x52>
		xSemaphoreGive(display_mutex);
    3c92:	4b0c      	ldr	r3, [pc, #48]	; (3cc4 <about_task+0xd8>)
    3c94:	6818      	ldr	r0, [r3, #0]
    3c96:	2300      	movs	r3, #0
    3c98:	2200      	movs	r2, #0
    3c9a:	2100      	movs	r1, #0
    3c9c:	4c10      	ldr	r4, [pc, #64]	; (3ce0 <about_task+0xf4>)
    3c9e:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    3ca0:	4b07      	ldr	r3, [pc, #28]	; (3cc0 <about_task+0xd4>)
    3ca2:	2280      	movs	r2, #128	; 0x80
    3ca4:	0312      	lsls	r2, r2, #12
    3ca6:	619a      	str	r2, [r3, #24]
		if (shift < max_shift) {
    3ca8:	9b00      	ldr	r3, [sp, #0]
    3caa:	2b07      	cmp	r3, #7
    3cac:	d8ab      	bhi.n	3c06 <about_task+0x1a>
			shift++;
    3cae:	3301      	adds	r3, #1
    3cb0:	b2db      	uxtb	r3, r3
    3cb2:	9300      	str	r3, [sp, #0]
			vTaskDelay(ABOUT_TASK_DELAY);
    3cb4:	2006      	movs	r0, #6
    3cb6:	4b0b      	ldr	r3, [pc, #44]	; (3ce4 <about_task+0xf8>)
    3cb8:	4798      	blx	r3
    3cba:	e7a9      	b.n	3c10 <about_task+0x24>
    3cbc:	000030f5 	.word	0x000030f5
    3cc0:	41004400 	.word	0x41004400
    3cc4:	20004090 	.word	0x20004090
    3cc8:	000027b5 	.word	0x000027b5
    3ccc:	00003f85 	.word	0x00003f85
    3cd0:	00004091 	.word	0x00004091
    3cd4:	00004488 	.word	0x00004488
    3cd8:	20000008 	.word	0x20000008
    3cdc:	000005fd 	.word	0x000005fd
    3ce0:	000023d9 	.word	0x000023d9
    3ce4:	00003019 	.word	0x00003019

00003ce8 <cdc_rx_handler>:
 * to the sender.
 *
 * \param instance Instance number of SERCOM that generated interrupt.
 */
static void cdc_rx_handler(uint8_t instance)
{
    3ce8:	b530      	push	{r4, r5, lr}
    3cea:	b083      	sub	sp, #12
	// Wait for synch to complete
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
	}
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	while (usart_hw->SYNCBUSY.reg) {
    3cec:	4a17      	ldr	r2, [pc, #92]	; (3d4c <cdc_rx_handler+0x64>)
    3cee:	69d3      	ldr	r3, [r2, #28]
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d1fc      	bne.n	3cee <cdc_rx_handler+0x6>
	}
#endif

	// Read and mask interrupt flag register
	interrupt_status = usart_hw->INTFLAG.reg;
    3cf4:	4b15      	ldr	r3, [pc, #84]	; (3d4c <cdc_rx_handler+0x64>)
    3cf6:	7e1c      	ldrb	r4, [r3, #24]
    3cf8:	b2e4      	uxtb	r4, r4

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3cfa:	0763      	lsls	r3, r4, #29
    3cfc:	d509      	bpl.n	3d12 <cdc_rx_handler+0x2a>
		// Check for errors
		error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3cfe:	4b13      	ldr	r3, [pc, #76]	; (3d4c <cdc_rx_handler+0x64>)
    3d00:	8b5b      	ldrh	r3, [r3, #26]
    3d02:	b2db      	uxtb	r3, r3
		if (error_code) {
    3d04:	069a      	lsls	r2, r3, #26
    3d06:	d006      	beq.n	3d16 <cdc_rx_handler+0x2e>
			// Only frame error and buffer overflow should be possible
			if (error_code &
    3d08:	2206      	movs	r2, #6
    3d0a:	421a      	tst	r2, r3
    3d0c:	d001      	beq.n	3d12 <cdc_rx_handler+0x2a>
					(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF)) {
				usart_hw->STATUS.reg =
    3d0e:	4b0f      	ldr	r3, [pc, #60]	; (3d4c <cdc_rx_handler+0x64>)
    3d10:	835a      	strh	r2, [r3, #26]
			}
		}
	} else {
		// Error: only RX interrupt should be enabled
	}
}
    3d12:	b003      	add	sp, #12
    3d14:	bd30      	pop	{r4, r5, pc}
			data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3d16:	4b0d      	ldr	r3, [pc, #52]	; (3d4c <cdc_rx_handler+0x64>)
    3d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3d1a:	466a      	mov	r2, sp
    3d1c:	1d91      	adds	r1, r2, #6
    3d1e:	05db      	lsls	r3, r3, #23
    3d20:	0ddb      	lsrs	r3, r3, #23
    3d22:	800b      	strh	r3, [r1, #0]
			if (!xQueueSendFromISR(terminal_in_queue, (uint8_t *)&data,
    3d24:	4b0a      	ldr	r3, [pc, #40]	; (3d50 <cdc_rx_handler+0x68>)
    3d26:	6818      	ldr	r0, [r3, #0]
    3d28:	2300      	movs	r3, #0
    3d2a:	2200      	movs	r2, #0
    3d2c:	4d09      	ldr	r5, [pc, #36]	; (3d54 <cdc_rx_handler+0x6c>)
    3d2e:	47a8      	blx	r5
    3d30:	2800      	cmp	r0, #0
    3d32:	d0ee      	beq.n	3d12 <cdc_rx_handler+0x2a>
				while (!(interrupt_status & SERCOM_USART_INTFLAG_DRE)) {
    3d34:	07e3      	lsls	r3, r4, #31
    3d36:	d404      	bmi.n	3d42 <cdc_rx_handler+0x5a>
					interrupt_status = usart_hw->INTFLAG.reg;
    3d38:	4904      	ldr	r1, [pc, #16]	; (3d4c <cdc_rx_handler+0x64>)
				while (!(interrupt_status & SERCOM_USART_INTFLAG_DRE)) {
    3d3a:	2201      	movs	r2, #1
					interrupt_status = usart_hw->INTFLAG.reg;
    3d3c:	7e0b      	ldrb	r3, [r1, #24]
				while (!(interrupt_status & SERCOM_USART_INTFLAG_DRE)) {
    3d3e:	4213      	tst	r3, r2
    3d40:	d0fc      	beq.n	3d3c <cdc_rx_handler+0x54>
    3d42:	466b      	mov	r3, sp
    3d44:	799a      	ldrb	r2, [r3, #6]
				usart_hw->DATA.reg = (uint8_t)data;
    3d46:	4b01      	ldr	r3, [pc, #4]	; (3d4c <cdc_rx_handler+0x64>)
    3d48:	851a      	strh	r2, [r3, #40]	; 0x28
}
    3d4a:	e7e2      	b.n	3d12 <cdc_rx_handler+0x2a>
    3d4c:	42000800 	.word	0x42000800
    3d50:	200040ec 	.word	0x200040ec
    3d54:	00002591 	.word	0x00002591

00003d58 <demotasks_init>:
{
    3d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d5a:	46c6      	mov	lr, r8
    3d5c:	b500      	push	{lr}
    3d5e:	b092      	sub	sp, #72	; 0x48
	config->powersave  = false;
    3d60:	ac02      	add	r4, sp, #8
    3d62:	2500      	movs	r5, #0
    3d64:	2700      	movs	r7, #0
    3d66:	70a5      	strb	r5, [r4, #2]
		port_base->OUTSET.reg = pin_mask;
    3d68:	4b63      	ldr	r3, [pc, #396]	; (3ef8 <demotasks_init+0x1a0>)
    3d6a:	2280      	movs	r2, #128	; 0x80
    3d6c:	02d2      	lsls	r2, r2, #11
    3d6e:	619a      	str	r2, [r3, #24]
    3d70:	2280      	movs	r2, #128	; 0x80
    3d72:	0312      	lsls	r2, r2, #12
    3d74:	619a      	str	r2, [r3, #24]
    3d76:	2280      	movs	r2, #128	; 0x80
    3d78:	0552      	lsls	r2, r2, #21
    3d7a:	619a      	str	r2, [r3, #24]

	port_pin_set_output_level(oled1->led0_pin, !OLED1_LED_ACTIVE);
	port_pin_set_output_level(oled1->led1_pin, !OLED1_LED_ACTIVE);
	port_pin_set_output_level(oled1->led2_pin, !OLED1_LED_ACTIVE);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    3d7c:	2302      	movs	r3, #2
    3d7e:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    3d80:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(oled1->led0_pin, &pin_conf);
    3d82:	0021      	movs	r1, r4
    3d84:	2012      	movs	r0, #18
    3d86:	4e5d      	ldr	r6, [pc, #372]	; (3efc <demotasks_init+0x1a4>)
    3d88:	47b0      	blx	r6
	port_pin_set_config(oled1->led1_pin, &pin_conf);
    3d8a:	0021      	movs	r1, r4
    3d8c:	2013      	movs	r0, #19
    3d8e:	47b0      	blx	r6
	port_pin_set_config(oled1->led2_pin, &pin_conf);
    3d90:	0021      	movs	r1, r4
    3d92:	201c      	movs	r0, #28
    3d94:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3d96:	7025      	strb	r5, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3d98:	2301      	movs	r3, #1
    3d9a:	4698      	mov	r8, r3
    3d9c:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(oled1->button0_pin, &pin_conf);
    3d9e:	0021      	movs	r1, r4
    3da0:	2016      	movs	r0, #22
    3da2:	47b0      	blx	r6
	port_pin_set_config(oled1->button1_pin, &pin_conf);
    3da4:	0021      	movs	r1, r4
    3da6:	2006      	movs	r0, #6
    3da8:	47b0      	blx	r6
	port_pin_set_config(oled1->button2_pin, &pin_conf);
    3daa:	0021      	movs	r1, r4
    3dac:	2007      	movs	r0, #7
    3dae:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3db0:	2380      	movs	r3, #128	; 0x80
    3db2:	05db      	lsls	r3, r3, #23
    3db4:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3db6:	6065      	str	r5, [r4, #4]
	config->parity           = USART_PARITY_NONE;
    3db8:	23ff      	movs	r3, #255	; 0xff
    3dba:	8123      	strh	r3, [r4, #8]
	config->stopbits         = USART_STOPBITS_1;
    3dbc:	72a5      	strb	r5, [r4, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3dbe:	72e5      	strb	r5, [r4, #11]
	config->baudrate         = 9600;
    3dc0:	2396      	movs	r3, #150	; 0x96
    3dc2:	019b      	lsls	r3, r3, #6
    3dc4:	6223      	str	r3, [r4, #32]
	config->receiver_enable  = true;
    3dc6:	2324      	movs	r3, #36	; 0x24
    3dc8:	4642      	mov	r2, r8
    3dca:	54e2      	strb	r2, [r4, r3]
	config->transmitter_enable = true;
    3dcc:	3301      	adds	r3, #1
    3dce:	54e2      	strb	r2, [r4, r3]
	config->clock_polarity_inverted = false;
    3dd0:	3301      	adds	r3, #1
    3dd2:	54e5      	strb	r5, [r4, r3]
	config->use_external_clock = false;
    3dd4:	3301      	adds	r3, #1
    3dd6:	54e5      	strb	r5, [r4, r3]
	config->ext_clock_freq   = 0;
    3dd8:	62a5      	str	r5, [r4, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3dda:	3305      	adds	r3, #5
    3ddc:	54e5      	strb	r5, [r4, r3]
	config->generator_source = GCLK_GENERATOR_0;
    3dde:	3301      	adds	r3, #1
    3de0:	54e5      	strb	r5, [r4, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3de2:	6165      	str	r5, [r4, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3de4:	8225      	strh	r5, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3de6:	2300      	movs	r3, #0
    3de8:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3dea:	7627      	strb	r7, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3dec:	7727      	strb	r7, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3dee:	7667      	strb	r7, [r4, #25]
	config->receive_pulse_length                    = 19;
    3df0:	2313      	movs	r3, #19
    3df2:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3df4:	7767      	strb	r7, [r4, #29]
	struct usart_config config_struct;
	uint8_t instance_index;

	usart_get_config_defaults(&config_struct);

	config_struct.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    3df6:	2380      	movs	r3, #128	; 0x80
    3df8:	035b      	lsls	r3, r3, #13
    3dfa:	60e3      	str	r3, [r4, #12]
	config_struct.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3dfc:	4b40      	ldr	r3, [pc, #256]	; (3f00 <demotasks_init+0x1a8>)
    3dfe:	6323      	str	r3, [r4, #48]	; 0x30
	config_struct.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    3e00:	4b40      	ldr	r3, [pc, #256]	; (3f04 <demotasks_init+0x1ac>)
    3e02:	6363      	str	r3, [r4, #52]	; 0x34
	config_struct.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    3e04:	2301      	movs	r3, #1
    3e06:	425b      	negs	r3, r3
    3e08:	63a3      	str	r3, [r4, #56]	; 0x38
	config_struct.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3e0a:	63e3      	str	r3, [r4, #60]	; 0x3c

	while (usart_init(usart, EDBG_CDC_MODULE, &config_struct) != STATUS_OK) {
    3e0c:	4d3e      	ldr	r5, [pc, #248]	; (3f08 <demotasks_init+0x1b0>)
    3e0e:	4c3f      	ldr	r4, [pc, #252]	; (3f0c <demotasks_init+0x1b4>)
    3e10:	aa02      	add	r2, sp, #8
    3e12:	493f      	ldr	r1, [pc, #252]	; (3f10 <demotasks_init+0x1b8>)
    3e14:	0028      	movs	r0, r5
    3e16:	47a0      	blx	r4
    3e18:	2800      	cmp	r0, #0
    3e1a:	d1f9      	bne.n	3e10 <demotasks_init+0xb8>
		// Intentionally left empty
	}

	// Inject our own interrupt handler
	instance_index = _sercom_get_sercom_inst_index(EDBG_CDC_MODULE);
    3e1c:	483c      	ldr	r0, [pc, #240]	; (3f10 <demotasks_init+0x1b8>)
    3e1e:	4b3d      	ldr	r3, [pc, #244]	; (3f14 <demotasks_init+0x1bc>)
    3e20:	4798      	blx	r3
	_sercom_set_handler(instance_index, cdc_rx_handler);
    3e22:	493d      	ldr	r1, [pc, #244]	; (3f18 <demotasks_init+0x1c0>)
    3e24:	4b3d      	ldr	r3, [pc, #244]	; (3f1c <demotasks_init+0x1c4>)
    3e26:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e28:	4d37      	ldr	r5, [pc, #220]	; (3f08 <demotasks_init+0x1b0>)
    3e2a:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3e2c:	0020      	movs	r0, r4
    3e2e:	4b3c      	ldr	r3, [pc, #240]	; (3f20 <demotasks_init+0x1c8>)
    3e30:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3e32:	231f      	movs	r3, #31
    3e34:	4018      	ands	r0, r3
    3e36:	3b1e      	subs	r3, #30
    3e38:	4083      	lsls	r3, r0
    3e3a:	4a3a      	ldr	r2, [pc, #232]	; (3f24 <demotasks_init+0x1cc>)
    3e3c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e3e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3e40:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3e42:	2b00      	cmp	r3, #0
    3e44:	d1fc      	bne.n	3e40 <demotasks_init+0xe8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3e46:	6823      	ldr	r3, [r4, #0]
    3e48:	2202      	movs	r2, #2
    3e4a:	4313      	orrs	r3, r2
    3e4c:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e4e:	4b2e      	ldr	r3, [pc, #184]	; (3f08 <demotasks_init+0x1b0>)
    3e50:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3e52:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3e54:	2a00      	cmp	r2, #0
    3e56:	d1fc      	bne.n	3e52 <demotasks_init+0xfa>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3e58:	6859      	ldr	r1, [r3, #4]
    3e5a:	2280      	movs	r2, #128	; 0x80
    3e5c:	0252      	lsls	r2, r2, #9
    3e5e:	430a      	orrs	r2, r1
    3e60:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3e62:	2101      	movs	r1, #1
    3e64:	4a28      	ldr	r2, [pc, #160]	; (3f08 <demotasks_init+0x1b0>)
    3e66:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3e68:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3e6a:	2a00      	cmp	r2, #0
    3e6c:	d1fc      	bne.n	3e68 <demotasks_init+0x110>
	return (usart_hw->SYNCBUSY.reg);
    3e6e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3e70:	2a00      	cmp	r2, #0
    3e72:	d1fc      	bne.n	3e6e <demotasks_init+0x116>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3e74:	6859      	ldr	r1, [r3, #4]
    3e76:	2280      	movs	r2, #128	; 0x80
    3e78:	0292      	lsls	r2, r2, #10
    3e7a:	430a      	orrs	r2, r1
    3e7c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3e7e:	2101      	movs	r1, #1
    3e80:	4a21      	ldr	r2, [pc, #132]	; (3f08 <demotasks_init+0x1b0>)
    3e82:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3e84:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3e86:	2a00      	cmp	r2, #0
    3e88:	d1fc      	bne.n	3e84 <demotasks_init+0x12c>
	usart_enable(usart);
	usart_enable_transceiver(usart, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(usart, USART_TRANSCEIVER_RX);

	// ..and the RX Complete interrupt
	((SercomUsart *)EDBG_CDC_MODULE)->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    3e8a:	3204      	adds	r2, #4
    3e8c:	4b20      	ldr	r3, [pc, #128]	; (3f10 <demotasks_init+0x1b8>)
    3e8e:	759a      	strb	r2, [r3, #22]
	display_mutex  = xSemaphoreCreateMutex();
    3e90:	2001      	movs	r0, #1
    3e92:	4c25      	ldr	r4, [pc, #148]	; (3f28 <demotasks_init+0x1d0>)
    3e94:	47a0      	blx	r4
    3e96:	4b25      	ldr	r3, [pc, #148]	; (3f2c <demotasks_init+0x1d4>)
    3e98:	6018      	str	r0, [r3, #0]
	terminal_mutex = xSemaphoreCreateMutex();
    3e9a:	2001      	movs	r0, #1
    3e9c:	47a0      	blx	r4
    3e9e:	4b24      	ldr	r3, [pc, #144]	; (3f30 <demotasks_init+0x1d8>)
    3ea0:	6018      	str	r0, [r3, #0]
	terminal_in_queue = xQueueCreate(64, sizeof(uint8_t));
    3ea2:	2200      	movs	r2, #0
    3ea4:	2101      	movs	r1, #1
    3ea6:	2040      	movs	r0, #64	; 0x40
    3ea8:	4b22      	ldr	r3, [pc, #136]	; (3f34 <demotasks_init+0x1dc>)
    3eaa:	4798      	blx	r3
    3eac:	4b22      	ldr	r3, [pc, #136]	; (3f38 <demotasks_init+0x1e0>)
    3eae:	6018      	str	r0, [r3, #0]
	xTaskCreate(about_task,
    3eb0:	4d22      	ldr	r5, [pc, #136]	; (3f3c <demotasks_init+0x1e4>)
    3eb2:	9501      	str	r5, [sp, #4]
    3eb4:	2301      	movs	r3, #1
    3eb6:	9300      	str	r3, [sp, #0]
    3eb8:	2300      	movs	r3, #0
    3eba:	2264      	movs	r2, #100	; 0x64
    3ebc:	4920      	ldr	r1, [pc, #128]	; (3f40 <demotasks_init+0x1e8>)
    3ebe:	4821      	ldr	r0, [pc, #132]	; (3f44 <demotasks_init+0x1ec>)
    3ec0:	4c21      	ldr	r4, [pc, #132]	; (3f48 <demotasks_init+0x1f0>)
    3ec2:	47a0      	blx	r4
	xTaskCreate(main_task,
    3ec4:	2600      	movs	r6, #0
    3ec6:	9601      	str	r6, [sp, #4]
    3ec8:	2302      	movs	r3, #2
    3eca:	9300      	str	r3, [sp, #0]
    3ecc:	2300      	movs	r3, #0
    3ece:	2264      	movs	r2, #100	; 0x64
    3ed0:	491e      	ldr	r1, [pc, #120]	; (3f4c <demotasks_init+0x1f4>)
    3ed2:	481f      	ldr	r0, [pc, #124]	; (3f50 <demotasks_init+0x1f8>)
    3ed4:	47a0      	blx	r4
	xTaskCreate(uart_task,
    3ed6:	9601      	str	r6, [sp, #4]
    3ed8:	2303      	movs	r3, #3
    3eda:	9300      	str	r3, [sp, #0]
    3edc:	2300      	movs	r3, #0
    3ede:	2264      	movs	r2, #100	; 0x64
    3ee0:	491c      	ldr	r1, [pc, #112]	; (3f54 <demotasks_init+0x1fc>)
    3ee2:	481d      	ldr	r0, [pc, #116]	; (3f58 <demotasks_init+0x200>)
    3ee4:	47a0      	blx	r4
	vTaskSuspend(about_task_handle);
    3ee6:	6828      	ldr	r0, [r5, #0]
    3ee8:	4c1c      	ldr	r4, [pc, #112]	; (3f5c <demotasks_init+0x204>)
    3eea:	47a0      	blx	r4
	vTaskSuspend(terminal_task_handle);
    3eec:	2000      	movs	r0, #0
    3eee:	47a0      	blx	r4
}
    3ef0:	b012      	add	sp, #72	; 0x48
    3ef2:	bc04      	pop	{r2}
    3ef4:	4690      	mov	r8, r2
    3ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ef8:	41004400 	.word	0x41004400
    3efc:	0000091d 	.word	0x0000091d
    3f00:	00040003 	.word	0x00040003
    3f04:	00050003 	.word	0x00050003
    3f08:	2000405c 	.word	0x2000405c
    3f0c:	000012ed 	.word	0x000012ed
    3f10:	42000800 	.word	0x42000800
    3f14:	00000c7d 	.word	0x00000c7d
    3f18:	00003ce9 	.word	0x00003ce9
    3f1c:	00000cb9 	.word	0x00000cb9
    3f20:	00000cf5 	.word	0x00000cf5
    3f24:	e000e100 	.word	0xe000e100
    3f28:	00002565 	.word	0x00002565
    3f2c:	20004090 	.word	0x20004090
    3f30:	200040f4 	.word	0x200040f4
    3f34:	00002391 	.word	0x00002391
    3f38:	200040ec 	.word	0x200040ec
    3f3c:	20004058 	.word	0x20004058
    3f40:	000044e0 	.word	0x000044e0
    3f44:	00003bed 	.word	0x00003bed
    3f48:	00002b11 	.word	0x00002b11
    3f4c:	000044e8 	.word	0x000044e8
    3f50:	000039f5 	.word	0x000039f5
    3f54:	000044f0 	.word	0x000044f0
    3f58:	000038b5 	.word	0x000038b5
    3f5c:	000030f5 	.word	0x000030f5

00003f60 <main>:
#include <asf.h>
#include "demotasks.h"


int main (void)
{
    3f60:	b510      	push	{r4, lr}
	system_init();
    3f62:	4b04      	ldr	r3, [pc, #16]	; (3f74 <main+0x14>)
    3f64:	4798      	blx	r3
	gfx_mono_init();
    3f66:	4b04      	ldr	r3, [pc, #16]	; (3f78 <main+0x18>)
    3f68:	4798      	blx	r3

	// Initialize the demo..
	demotasks_init();
    3f6a:	4b04      	ldr	r3, [pc, #16]	; (3f7c <main+0x1c>)
    3f6c:	4798      	blx	r3

	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    3f6e:	4b04      	ldr	r3, [pc, #16]	; (3f80 <main+0x20>)
    3f70:	4798      	blx	r3
    3f72:	e7fe      	b.n	3f72 <main+0x12>
    3f74:	00001d59 	.word	0x00001d59
    3f78:	00000771 	.word	0x00000771
    3f7c:	00003d59 	.word	0x00003d59
    3f80:	00002d6d 	.word	0x00002d6d

00003f84 <__udivsi3>:
    3f84:	2200      	movs	r2, #0
    3f86:	0843      	lsrs	r3, r0, #1
    3f88:	428b      	cmp	r3, r1
    3f8a:	d374      	bcc.n	4076 <__udivsi3+0xf2>
    3f8c:	0903      	lsrs	r3, r0, #4
    3f8e:	428b      	cmp	r3, r1
    3f90:	d35f      	bcc.n	4052 <__udivsi3+0xce>
    3f92:	0a03      	lsrs	r3, r0, #8
    3f94:	428b      	cmp	r3, r1
    3f96:	d344      	bcc.n	4022 <__udivsi3+0x9e>
    3f98:	0b03      	lsrs	r3, r0, #12
    3f9a:	428b      	cmp	r3, r1
    3f9c:	d328      	bcc.n	3ff0 <__udivsi3+0x6c>
    3f9e:	0c03      	lsrs	r3, r0, #16
    3fa0:	428b      	cmp	r3, r1
    3fa2:	d30d      	bcc.n	3fc0 <__udivsi3+0x3c>
    3fa4:	22ff      	movs	r2, #255	; 0xff
    3fa6:	0209      	lsls	r1, r1, #8
    3fa8:	ba12      	rev	r2, r2
    3faa:	0c03      	lsrs	r3, r0, #16
    3fac:	428b      	cmp	r3, r1
    3fae:	d302      	bcc.n	3fb6 <__udivsi3+0x32>
    3fb0:	1212      	asrs	r2, r2, #8
    3fb2:	0209      	lsls	r1, r1, #8
    3fb4:	d065      	beq.n	4082 <__udivsi3+0xfe>
    3fb6:	0b03      	lsrs	r3, r0, #12
    3fb8:	428b      	cmp	r3, r1
    3fba:	d319      	bcc.n	3ff0 <__udivsi3+0x6c>
    3fbc:	e000      	b.n	3fc0 <__udivsi3+0x3c>
    3fbe:	0a09      	lsrs	r1, r1, #8
    3fc0:	0bc3      	lsrs	r3, r0, #15
    3fc2:	428b      	cmp	r3, r1
    3fc4:	d301      	bcc.n	3fca <__udivsi3+0x46>
    3fc6:	03cb      	lsls	r3, r1, #15
    3fc8:	1ac0      	subs	r0, r0, r3
    3fca:	4152      	adcs	r2, r2
    3fcc:	0b83      	lsrs	r3, r0, #14
    3fce:	428b      	cmp	r3, r1
    3fd0:	d301      	bcc.n	3fd6 <__udivsi3+0x52>
    3fd2:	038b      	lsls	r3, r1, #14
    3fd4:	1ac0      	subs	r0, r0, r3
    3fd6:	4152      	adcs	r2, r2
    3fd8:	0b43      	lsrs	r3, r0, #13
    3fda:	428b      	cmp	r3, r1
    3fdc:	d301      	bcc.n	3fe2 <__udivsi3+0x5e>
    3fde:	034b      	lsls	r3, r1, #13
    3fe0:	1ac0      	subs	r0, r0, r3
    3fe2:	4152      	adcs	r2, r2
    3fe4:	0b03      	lsrs	r3, r0, #12
    3fe6:	428b      	cmp	r3, r1
    3fe8:	d301      	bcc.n	3fee <__udivsi3+0x6a>
    3fea:	030b      	lsls	r3, r1, #12
    3fec:	1ac0      	subs	r0, r0, r3
    3fee:	4152      	adcs	r2, r2
    3ff0:	0ac3      	lsrs	r3, r0, #11
    3ff2:	428b      	cmp	r3, r1
    3ff4:	d301      	bcc.n	3ffa <__udivsi3+0x76>
    3ff6:	02cb      	lsls	r3, r1, #11
    3ff8:	1ac0      	subs	r0, r0, r3
    3ffa:	4152      	adcs	r2, r2
    3ffc:	0a83      	lsrs	r3, r0, #10
    3ffe:	428b      	cmp	r3, r1
    4000:	d301      	bcc.n	4006 <__udivsi3+0x82>
    4002:	028b      	lsls	r3, r1, #10
    4004:	1ac0      	subs	r0, r0, r3
    4006:	4152      	adcs	r2, r2
    4008:	0a43      	lsrs	r3, r0, #9
    400a:	428b      	cmp	r3, r1
    400c:	d301      	bcc.n	4012 <__udivsi3+0x8e>
    400e:	024b      	lsls	r3, r1, #9
    4010:	1ac0      	subs	r0, r0, r3
    4012:	4152      	adcs	r2, r2
    4014:	0a03      	lsrs	r3, r0, #8
    4016:	428b      	cmp	r3, r1
    4018:	d301      	bcc.n	401e <__udivsi3+0x9a>
    401a:	020b      	lsls	r3, r1, #8
    401c:	1ac0      	subs	r0, r0, r3
    401e:	4152      	adcs	r2, r2
    4020:	d2cd      	bcs.n	3fbe <__udivsi3+0x3a>
    4022:	09c3      	lsrs	r3, r0, #7
    4024:	428b      	cmp	r3, r1
    4026:	d301      	bcc.n	402c <__udivsi3+0xa8>
    4028:	01cb      	lsls	r3, r1, #7
    402a:	1ac0      	subs	r0, r0, r3
    402c:	4152      	adcs	r2, r2
    402e:	0983      	lsrs	r3, r0, #6
    4030:	428b      	cmp	r3, r1
    4032:	d301      	bcc.n	4038 <__udivsi3+0xb4>
    4034:	018b      	lsls	r3, r1, #6
    4036:	1ac0      	subs	r0, r0, r3
    4038:	4152      	adcs	r2, r2
    403a:	0943      	lsrs	r3, r0, #5
    403c:	428b      	cmp	r3, r1
    403e:	d301      	bcc.n	4044 <__udivsi3+0xc0>
    4040:	014b      	lsls	r3, r1, #5
    4042:	1ac0      	subs	r0, r0, r3
    4044:	4152      	adcs	r2, r2
    4046:	0903      	lsrs	r3, r0, #4
    4048:	428b      	cmp	r3, r1
    404a:	d301      	bcc.n	4050 <__udivsi3+0xcc>
    404c:	010b      	lsls	r3, r1, #4
    404e:	1ac0      	subs	r0, r0, r3
    4050:	4152      	adcs	r2, r2
    4052:	08c3      	lsrs	r3, r0, #3
    4054:	428b      	cmp	r3, r1
    4056:	d301      	bcc.n	405c <__udivsi3+0xd8>
    4058:	00cb      	lsls	r3, r1, #3
    405a:	1ac0      	subs	r0, r0, r3
    405c:	4152      	adcs	r2, r2
    405e:	0883      	lsrs	r3, r0, #2
    4060:	428b      	cmp	r3, r1
    4062:	d301      	bcc.n	4068 <__udivsi3+0xe4>
    4064:	008b      	lsls	r3, r1, #2
    4066:	1ac0      	subs	r0, r0, r3
    4068:	4152      	adcs	r2, r2
    406a:	0843      	lsrs	r3, r0, #1
    406c:	428b      	cmp	r3, r1
    406e:	d301      	bcc.n	4074 <__udivsi3+0xf0>
    4070:	004b      	lsls	r3, r1, #1
    4072:	1ac0      	subs	r0, r0, r3
    4074:	4152      	adcs	r2, r2
    4076:	1a41      	subs	r1, r0, r1
    4078:	d200      	bcs.n	407c <__udivsi3+0xf8>
    407a:	4601      	mov	r1, r0
    407c:	4152      	adcs	r2, r2
    407e:	4610      	mov	r0, r2
    4080:	4770      	bx	lr
    4082:	e7ff      	b.n	4084 <__udivsi3+0x100>
    4084:	b501      	push	{r0, lr}
    4086:	2000      	movs	r0, #0
    4088:	f000 f806 	bl	4098 <__aeabi_idiv0>
    408c:	bd02      	pop	{r1, pc}
    408e:	46c0      	nop			; (mov r8, r8)

00004090 <__aeabi_uidivmod>:
    4090:	2900      	cmp	r1, #0
    4092:	d0f7      	beq.n	4084 <__udivsi3+0x100>
    4094:	e776      	b.n	3f84 <__udivsi3>
    4096:	4770      	bx	lr

00004098 <__aeabi_idiv0>:
    4098:	4770      	bx	lr
    409a:	46c0      	nop			; (mov r8, r8)

0000409c <__aeabi_lmul>:
    409c:	b5f0      	push	{r4, r5, r6, r7, lr}
    409e:	46ce      	mov	lr, r9
    40a0:	4647      	mov	r7, r8
    40a2:	0415      	lsls	r5, r2, #16
    40a4:	0c2d      	lsrs	r5, r5, #16
    40a6:	002e      	movs	r6, r5
    40a8:	b580      	push	{r7, lr}
    40aa:	0407      	lsls	r7, r0, #16
    40ac:	0c14      	lsrs	r4, r2, #16
    40ae:	0c3f      	lsrs	r7, r7, #16
    40b0:	4699      	mov	r9, r3
    40b2:	0c03      	lsrs	r3, r0, #16
    40b4:	437e      	muls	r6, r7
    40b6:	435d      	muls	r5, r3
    40b8:	4367      	muls	r7, r4
    40ba:	4363      	muls	r3, r4
    40bc:	197f      	adds	r7, r7, r5
    40be:	0c34      	lsrs	r4, r6, #16
    40c0:	19e4      	adds	r4, r4, r7
    40c2:	469c      	mov	ip, r3
    40c4:	42a5      	cmp	r5, r4
    40c6:	d903      	bls.n	40d0 <__aeabi_lmul+0x34>
    40c8:	2380      	movs	r3, #128	; 0x80
    40ca:	025b      	lsls	r3, r3, #9
    40cc:	4698      	mov	r8, r3
    40ce:	44c4      	add	ip, r8
    40d0:	464b      	mov	r3, r9
    40d2:	4351      	muls	r1, r2
    40d4:	4343      	muls	r3, r0
    40d6:	0436      	lsls	r6, r6, #16
    40d8:	0c36      	lsrs	r6, r6, #16
    40da:	0c25      	lsrs	r5, r4, #16
    40dc:	0424      	lsls	r4, r4, #16
    40de:	4465      	add	r5, ip
    40e0:	19a4      	adds	r4, r4, r6
    40e2:	1859      	adds	r1, r3, r1
    40e4:	1949      	adds	r1, r1, r5
    40e6:	0020      	movs	r0, r4
    40e8:	bc0c      	pop	{r2, r3}
    40ea:	4690      	mov	r8, r2
    40ec:	4699      	mov	r9, r3
    40ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000040f0 <__libc_init_array>:
    40f0:	b570      	push	{r4, r5, r6, lr}
    40f2:	2600      	movs	r6, #0
    40f4:	4d0c      	ldr	r5, [pc, #48]	; (4128 <__libc_init_array+0x38>)
    40f6:	4c0d      	ldr	r4, [pc, #52]	; (412c <__libc_init_array+0x3c>)
    40f8:	1b64      	subs	r4, r4, r5
    40fa:	10a4      	asrs	r4, r4, #2
    40fc:	42a6      	cmp	r6, r4
    40fe:	d109      	bne.n	4114 <__libc_init_array+0x24>
    4100:	2600      	movs	r6, #0
    4102:	f000 fa2b 	bl	455c <_init>
    4106:	4d0a      	ldr	r5, [pc, #40]	; (4130 <__libc_init_array+0x40>)
    4108:	4c0a      	ldr	r4, [pc, #40]	; (4134 <__libc_init_array+0x44>)
    410a:	1b64      	subs	r4, r4, r5
    410c:	10a4      	asrs	r4, r4, #2
    410e:	42a6      	cmp	r6, r4
    4110:	d105      	bne.n	411e <__libc_init_array+0x2e>
    4112:	bd70      	pop	{r4, r5, r6, pc}
    4114:	00b3      	lsls	r3, r6, #2
    4116:	58eb      	ldr	r3, [r5, r3]
    4118:	4798      	blx	r3
    411a:	3601      	adds	r6, #1
    411c:	e7ee      	b.n	40fc <__libc_init_array+0xc>
    411e:	00b3      	lsls	r3, r6, #2
    4120:	58eb      	ldr	r3, [r5, r3]
    4122:	4798      	blx	r3
    4124:	3601      	adds	r6, #1
    4126:	e7f2      	b.n	410e <__libc_init_array+0x1e>
    4128:	00004568 	.word	0x00004568
    412c:	00004568 	.word	0x00004568
    4130:	00004568 	.word	0x00004568
    4134:	0000456c 	.word	0x0000456c

00004138 <memcpy>:
    4138:	2300      	movs	r3, #0
    413a:	b510      	push	{r4, lr}
    413c:	429a      	cmp	r2, r3
    413e:	d100      	bne.n	4142 <memcpy+0xa>
    4140:	bd10      	pop	{r4, pc}
    4142:	5ccc      	ldrb	r4, [r1, r3]
    4144:	54c4      	strb	r4, [r0, r3]
    4146:	3301      	adds	r3, #1
    4148:	e7f8      	b.n	413c <memcpy+0x4>

0000414a <memset>:
    414a:	0003      	movs	r3, r0
    414c:	1882      	adds	r2, r0, r2
    414e:	4293      	cmp	r3, r2
    4150:	d100      	bne.n	4154 <memset+0xa>
    4152:	4770      	bx	lr
    4154:	7019      	strb	r1, [r3, #0]
    4156:	3301      	adds	r3, #1
    4158:	e7f9      	b.n	414e <memset+0x4>
	...

0000415c <sysfont_glyphs>:
    415c:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
    416c:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
    417c:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
    418c:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
    419c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
    41ac:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
    41bc:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
    41cc:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
    41dc:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
    41ec:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
    41fc:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
    420c:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
    421c:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
    422c:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
    423c:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
    424c:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
    425c:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
    426c:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
    427c:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
    428c:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
    429c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
    42ac:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
    42bc:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
    42cc:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
    42dc:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
    42ec:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
    42fc:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
    430c:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
    431c:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
    432c:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
    433c:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
    434c:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
    435c:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
    436c:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
    437c:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
    438c:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
    439c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
    43ac:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
    43bc:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
    43cc:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
    43dc:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
    43ec:	4020 0000 0800 4200 0c00 4200 1000 4200      @.....B...B...B
    43fc:	1400 4200 1800 4200 1c00 4200 17d6 0000     ...B...B...B....
    440c:	17d2 0000 17d2 0000 1838 0000 1838 0000     ........8...8...
    441c:	17ea 0000 17dc 0000 17f0 0000 1826 0000     ............&...
    442c:	18c0 0000 18a0 0000 18a0 0000 192c 0000     ............,...
    443c:	18b2 0000 18ce 0000 18a4 0000 18dc 0000     ................
    444c:	191c 0000 4449 454c 0000 0000 3818 0000     ....IDLE.....8..
    445c:	3818 0000 3818 0000 3790 0000 385a 0000     .8...8...7..Z8..
    446c:	3874 0000 3818 0000 3818 0000 3790 0000     t8...8...8...7..
    447c:	385a 0000 6d54 2072 7653 0063               Z8..Tmr Svc.

00004488 <about_text>:
    4488:	2020 5320 4a45 2041 4542 204d 4956 444e        SEJA BEM VIND
    4498:	214f 2020 2020 2020 2020 2020 2020 2020     O!              
    44a8:	2020 2020 2020 2020 2020 2020 4420 4749                  DIG
    44b8:	5449 2045 2041 4553 484e 3a41 0000 0000     ITE A SENHA:....
    44c8:	2020 2020 2020 2020 2020 2020 2020 2020                     
    44d8:	2020 2020 0000 0000 6241 756f 0074 0000         ....About...
    44e8:	614d 6e69 0000 0000 4155 5452 0000 0000     Main....UART....
    44f8:	2020 2020 2020 2020 2a20 0020 2020 2020              * .    
    4508:	2020 2020 2a20 2a20 0020 0000 2020 2020          * * ...    
    4518:	2020 2020 2a20 2a20 2a20 0000 2020 2020          * * *..    
    4528:	4553 484e 2041 4f43 5252 5445 2141 0000     SENHA CORRETA!..
    4538:	2020 5320 4e45 4148 4920 434e 524f 4552        SENHA INCORRE
    4548:	4154 2021 0000 0000                         TA! ....

00004550 <menu_items_text>:
    4550:	4c45 0043 0000 3031 3834 0000               ELC...1048..

0000455c <_init>:
    455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4562:	bc08      	pop	{r3}
    4564:	469e      	mov	lr, r3
    4566:	4770      	bx	lr

00004568 <__init_array_start>:
    4568:	000000dd 	.word	0x000000dd

0000456c <_fini>:
    456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4572:	bc08      	pop	{r3}
    4574:	469e      	mov	lr, r3
    4576:	4770      	bx	lr

00004578 <__fini_array_start>:
    4578:	000000b5 	.word	0x000000b5
